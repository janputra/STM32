
stm32f4-disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009104  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080092b4  080092b4  000192b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009348  08009348  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009348  08009348  00019348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009350  08009350  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009350  08009350  00019350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009354  08009354  00019354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  2000007c  080093d4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  080093d4  0002082c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c295  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000555b  00000000  00000000  0004c341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b38  00000000  00000000  000518a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001928  00000000  00000000  000533d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad81  00000000  00000000  00054d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025168  00000000  00000000  0007fa81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea5c0  00000000  00000000  000a4be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018f1a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ab0  00000000  00000000  0018f1fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800929c 	.word	0x0800929c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	0800929c 	.word	0x0800929c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2uiz>:
 8000ac8:	004a      	lsls	r2, r1, #1
 8000aca:	d211      	bcs.n	8000af0 <__aeabi_d2uiz+0x28>
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d211      	bcs.n	8000af6 <__aeabi_d2uiz+0x2e>
 8000ad2:	d50d      	bpl.n	8000af0 <__aeabi_d2uiz+0x28>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d40e      	bmi.n	8000afc <__aeabi_d2uiz+0x34>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_d2uiz+0x3a>
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0000 	mov.w	r0, #0
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_uldivmod>:
 8000b08:	b953      	cbnz	r3, 8000b20 <__aeabi_uldivmod+0x18>
 8000b0a:	b94a      	cbnz	r2, 8000b20 <__aeabi_uldivmod+0x18>
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	bf08      	it	eq
 8000b10:	2800      	cmpeq	r0, #0
 8000b12:	bf1c      	itt	ne
 8000b14:	f04f 31ff 	movne.w	r1, #4294967295
 8000b18:	f04f 30ff 	movne.w	r0, #4294967295
 8000b1c:	f000 b96e 	b.w	8000dfc <__aeabi_idiv0>
 8000b20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b28:	f000 f806 	bl	8000b38 <__udivmoddi4>
 8000b2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b34:	b004      	add	sp, #16
 8000b36:	4770      	bx	lr

08000b38 <__udivmoddi4>:
 8000b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b3c:	9d08      	ldr	r5, [sp, #32]
 8000b3e:	4604      	mov	r4, r0
 8000b40:	468c      	mov	ip, r1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f040 8083 	bne.w	8000c4e <__udivmoddi4+0x116>
 8000b48:	428a      	cmp	r2, r1
 8000b4a:	4617      	mov	r7, r2
 8000b4c:	d947      	bls.n	8000bde <__udivmoddi4+0xa6>
 8000b4e:	fab2 f282 	clz	r2, r2
 8000b52:	b142      	cbz	r2, 8000b66 <__udivmoddi4+0x2e>
 8000b54:	f1c2 0020 	rsb	r0, r2, #32
 8000b58:	fa24 f000 	lsr.w	r0, r4, r0
 8000b5c:	4091      	lsls	r1, r2
 8000b5e:	4097      	lsls	r7, r2
 8000b60:	ea40 0c01 	orr.w	ip, r0, r1
 8000b64:	4094      	lsls	r4, r2
 8000b66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b6a:	0c23      	lsrs	r3, r4, #16
 8000b6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000b70:	fa1f fe87 	uxth.w	lr, r7
 8000b74:	fb08 c116 	mls	r1, r8, r6, ip
 8000b78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000b80:	4299      	cmp	r1, r3
 8000b82:	d909      	bls.n	8000b98 <__udivmoddi4+0x60>
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b8a:	f080 8119 	bcs.w	8000dc0 <__udivmoddi4+0x288>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 8116 	bls.w	8000dc0 <__udivmoddi4+0x288>
 8000b94:	3e02      	subs	r6, #2
 8000b96:	443b      	add	r3, r7
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bac:	45a6      	cmp	lr, r4
 8000bae:	d909      	bls.n	8000bc4 <__udivmoddi4+0x8c>
 8000bb0:	193c      	adds	r4, r7, r4
 8000bb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb6:	f080 8105 	bcs.w	8000dc4 <__udivmoddi4+0x28c>
 8000bba:	45a6      	cmp	lr, r4
 8000bbc:	f240 8102 	bls.w	8000dc4 <__udivmoddi4+0x28c>
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	443c      	add	r4, r7
 8000bc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc8:	eba4 040e 	sub.w	r4, r4, lr
 8000bcc:	2600      	movs	r6, #0
 8000bce:	b11d      	cbz	r5, 8000bd8 <__udivmoddi4+0xa0>
 8000bd0:	40d4      	lsrs	r4, r2
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	b902      	cbnz	r2, 8000be2 <__udivmoddi4+0xaa>
 8000be0:	deff      	udf	#255	; 0xff
 8000be2:	fab2 f282 	clz	r2, r2
 8000be6:	2a00      	cmp	r2, #0
 8000be8:	d150      	bne.n	8000c8c <__udivmoddi4+0x154>
 8000bea:	1bcb      	subs	r3, r1, r7
 8000bec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf0:	fa1f f887 	uxth.w	r8, r7
 8000bf4:	2601      	movs	r6, #1
 8000bf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bfa:	0c21      	lsrs	r1, r4, #16
 8000bfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c04:	fb08 f30c 	mul.w	r3, r8, ip
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	d907      	bls.n	8000c1c <__udivmoddi4+0xe4>
 8000c0c:	1879      	adds	r1, r7, r1
 8000c0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0xe2>
 8000c14:	428b      	cmp	r3, r1
 8000c16:	f200 80e9 	bhi.w	8000dec <__udivmoddi4+0x2b4>
 8000c1a:	4684      	mov	ip, r0
 8000c1c:	1ac9      	subs	r1, r1, r3
 8000c1e:	b2a3      	uxth	r3, r4
 8000c20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c2c:	fb08 f800 	mul.w	r8, r8, r0
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	d907      	bls.n	8000c44 <__udivmoddi4+0x10c>
 8000c34:	193c      	adds	r4, r7, r4
 8000c36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x10a>
 8000c3c:	45a0      	cmp	r8, r4
 8000c3e:	f200 80d9 	bhi.w	8000df4 <__udivmoddi4+0x2bc>
 8000c42:	4618      	mov	r0, r3
 8000c44:	eba4 0408 	sub.w	r4, r4, r8
 8000c48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c4c:	e7bf      	b.n	8000bce <__udivmoddi4+0x96>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x12e>
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	f000 80b1 	beq.w	8000dba <__udivmoddi4+0x282>
 8000c58:	2600      	movs	r6, #0
 8000c5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5e:	4630      	mov	r0, r6
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f683 	clz	r6, r3
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d14a      	bne.n	8000d04 <__udivmoddi4+0x1cc>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0x140>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80b8 	bhi.w	8000de8 <__udivmoddi4+0x2b0>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	468c      	mov	ip, r1
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	d0a8      	beq.n	8000bd8 <__udivmoddi4+0xa0>
 8000c86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c8a:	e7a5      	b.n	8000bd8 <__udivmoddi4+0xa0>
 8000c8c:	f1c2 0320 	rsb	r3, r2, #32
 8000c90:	fa20 f603 	lsr.w	r6, r0, r3
 8000c94:	4097      	lsls	r7, r2
 8000c96:	fa01 f002 	lsl.w	r0, r1, r2
 8000c9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9e:	40d9      	lsrs	r1, r3
 8000ca0:	4330      	orrs	r0, r6
 8000ca2:	0c03      	lsrs	r3, r0, #16
 8000ca4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ca8:	fa1f f887 	uxth.w	r8, r7
 8000cac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb4:	fb06 f108 	mul.w	r1, r6, r8
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	fa04 f402 	lsl.w	r4, r4, r2
 8000cbe:	d909      	bls.n	8000cd4 <__udivmoddi4+0x19c>
 8000cc0:	18fb      	adds	r3, r7, r3
 8000cc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cc6:	f080 808d 	bcs.w	8000de4 <__udivmoddi4+0x2ac>
 8000cca:	4299      	cmp	r1, r3
 8000ccc:	f240 808a 	bls.w	8000de4 <__udivmoddi4+0x2ac>
 8000cd0:	3e02      	subs	r6, #2
 8000cd2:	443b      	add	r3, r7
 8000cd4:	1a5b      	subs	r3, r3, r1
 8000cd6:	b281      	uxth	r1, r0
 8000cd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cdc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb00 f308 	mul.w	r3, r0, r8
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x1c4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf2:	d273      	bcs.n	8000ddc <__udivmoddi4+0x2a4>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	d971      	bls.n	8000ddc <__udivmoddi4+0x2a4>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4439      	add	r1, r7
 8000cfc:	1acb      	subs	r3, r1, r3
 8000cfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d02:	e778      	b.n	8000bf6 <__udivmoddi4+0xbe>
 8000d04:	f1c6 0c20 	rsb	ip, r6, #32
 8000d08:	fa03 f406 	lsl.w	r4, r3, r6
 8000d0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d10:	431c      	orrs	r4, r3
 8000d12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d16:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d22:	431f      	orrs	r7, r3
 8000d24:	0c3b      	lsrs	r3, r7, #16
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fa1f f884 	uxth.w	r8, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d36:	fb09 fa08 	mul.w	sl, r9, r8
 8000d3a:	458a      	cmp	sl, r1
 8000d3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000d40:	fa00 f306 	lsl.w	r3, r0, r6
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x220>
 8000d46:	1861      	adds	r1, r4, r1
 8000d48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d4c:	d248      	bcs.n	8000de0 <__udivmoddi4+0x2a8>
 8000d4e:	458a      	cmp	sl, r1
 8000d50:	d946      	bls.n	8000de0 <__udivmoddi4+0x2a8>
 8000d52:	f1a9 0902 	sub.w	r9, r9, #2
 8000d56:	4421      	add	r1, r4
 8000d58:	eba1 010a 	sub.w	r1, r1, sl
 8000d5c:	b2bf      	uxth	r7, r7
 8000d5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d6a:	fb00 f808 	mul.w	r8, r0, r8
 8000d6e:	45b8      	cmp	r8, r7
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x24a>
 8000d72:	19e7      	adds	r7, r4, r7
 8000d74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d78:	d22e      	bcs.n	8000dd8 <__udivmoddi4+0x2a0>
 8000d7a:	45b8      	cmp	r8, r7
 8000d7c:	d92c      	bls.n	8000dd8 <__udivmoddi4+0x2a0>
 8000d7e:	3802      	subs	r0, #2
 8000d80:	4427      	add	r7, r4
 8000d82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d86:	eba7 0708 	sub.w	r7, r7, r8
 8000d8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8e:	454f      	cmp	r7, r9
 8000d90:	46c6      	mov	lr, r8
 8000d92:	4649      	mov	r1, r9
 8000d94:	d31a      	bcc.n	8000dcc <__udivmoddi4+0x294>
 8000d96:	d017      	beq.n	8000dc8 <__udivmoddi4+0x290>
 8000d98:	b15d      	cbz	r5, 8000db2 <__udivmoddi4+0x27a>
 8000d9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000d9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000da2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000da6:	40f2      	lsrs	r2, r6
 8000da8:	ea4c 0202 	orr.w	r2, ip, r2
 8000dac:	40f7      	lsrs	r7, r6
 8000dae:	e9c5 2700 	strd	r2, r7, [r5]
 8000db2:	2600      	movs	r6, #0
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	462e      	mov	r6, r5
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	e70b      	b.n	8000bd8 <__udivmoddi4+0xa0>
 8000dc0:	4606      	mov	r6, r0
 8000dc2:	e6e9      	b.n	8000b98 <__udivmoddi4+0x60>
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	e6fd      	b.n	8000bc4 <__udivmoddi4+0x8c>
 8000dc8:	4543      	cmp	r3, r8
 8000dca:	d2e5      	bcs.n	8000d98 <__udivmoddi4+0x260>
 8000dcc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dd0:	eb69 0104 	sbc.w	r1, r9, r4
 8000dd4:	3801      	subs	r0, #1
 8000dd6:	e7df      	b.n	8000d98 <__udivmoddi4+0x260>
 8000dd8:	4608      	mov	r0, r1
 8000dda:	e7d2      	b.n	8000d82 <__udivmoddi4+0x24a>
 8000ddc:	4660      	mov	r0, ip
 8000dde:	e78d      	b.n	8000cfc <__udivmoddi4+0x1c4>
 8000de0:	4681      	mov	r9, r0
 8000de2:	e7b9      	b.n	8000d58 <__udivmoddi4+0x220>
 8000de4:	4666      	mov	r6, ip
 8000de6:	e775      	b.n	8000cd4 <__udivmoddi4+0x19c>
 8000de8:	4630      	mov	r0, r6
 8000dea:	e74a      	b.n	8000c82 <__udivmoddi4+0x14a>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	4439      	add	r1, r7
 8000df2:	e713      	b.n	8000c1c <__udivmoddi4+0xe4>
 8000df4:	3802      	subs	r0, #2
 8000df6:	443c      	add	r4, r7
 8000df8:	e724      	b.n	8000c44 <__udivmoddi4+0x10c>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_CRC_Init+0x20>)
 8000e06:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <MX_CRC_Init+0x24>)
 8000e08:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_CRC_Init+0x20>)
 8000e0c:	f001 ff12 	bl	8002c34 <HAL_CRC_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e16:	f000 fe31 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000d0 	.word	0x200000d0
 8000e24:	40023000 	.word	0x40023000

08000e28 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <HAL_CRC_MspInit+0x3c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d10d      	bne.n	8000e56 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_CRC_MspInit+0x40>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <HAL_CRC_MspInit+0x40>)
 8000e44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <HAL_CRC_MspInit+0x40>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40023000 	.word	0x40023000
 8000e68:	40023800 	.word	0x40023800

08000e6c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e72:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <MX_DMA2D_Init+0x60>)
 8000e74:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ea0:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000ea2:	f001 ff75 	bl	8002d90 <HAL_DMA2D_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000eac:	f000 fde6 	bl	8001a7c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_DMA2D_Init+0x5c>)
 8000eb4:	f002 f8c6 	bl	8003044 <HAL_DMA2D_ConfigLayer>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ebe:	f000 fddd 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200000e4 	.word	0x200000e4
 8000ecc:	4002b000 	.word	0x4002b000

08000ed0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_DMA2D_MspInit+0x48>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d115      	bne.n	8000f0e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_DMA2D_MspInit+0x4c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <HAL_DMA2D_MspInit+0x4c>)
 8000eec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_DMA2D_MspInit+0x4c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2105      	movs	r1, #5
 8000f02:	205a      	movs	r0, #90	; 0x5a
 8000f04:	f001 fe6c 	bl	8002be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f08:	205a      	movs	r0, #90	; 0x5a
 8000f0a:	f001 fe85 	bl	8002c18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	4002b000 	.word	0x4002b000
 8000f1c:	40023800 	.word	0x40023800

08000f20 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
 8000f34:	615a      	str	r2, [r3, #20]
 8000f36:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <MX_FMC_Init+0x98>)
 8000f3a:	4a20      	ldr	r2, [pc, #128]	; (8000fbc <MX_FMC_Init+0x9c>)
 8000f3c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <MX_FMC_Init+0x98>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_FMC_Init+0x98>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <MX_FMC_Init+0x98>)
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_FMC_Init+0x98>)
 8000f52:	2210      	movs	r2, #16
 8000f54:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <MX_FMC_Init+0x98>)
 8000f58:	2240      	movs	r2, #64	; 0x40
 8000f5a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_FMC_Init+0x98>)
 8000f5e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000f62:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_FMC_Init+0x98>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <MX_FMC_Init+0x98>)
 8000f6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f70:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_FMC_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_FMC_Init+0x98>)
 8000f7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000f84:	2307      	movs	r3, #7
 8000f86:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000f8c:	2307      	movs	r3, #7
 8000f8e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000f90:	2303      	movs	r3, #3
 8000f92:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_FMC_Init+0x98>)
 8000fa2:	f005 f96f 	bl	8006284 <HAL_SDRAM_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000fac:	f000 fd66 	bl	8001a7c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000124 	.word	0x20000124
 8000fbc:	a0000140 	.word	0xa0000140

08000fc0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000fd4:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <HAL_FMC_MspInit+0x104>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d16f      	bne.n	80010bc <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000fdc:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <HAL_FMC_MspInit+0x104>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	4b38      	ldr	r3, [pc, #224]	; (80010c8 <HAL_FMC_MspInit+0x108>)
 8000fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fea:	4a37      	ldr	r2, [pc, #220]	; (80010c8 <HAL_FMC_MspInit+0x108>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6393      	str	r3, [r2, #56]	; 0x38
 8000ff2:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <HAL_FMC_MspInit+0x108>)
 8000ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000ffe:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001002:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001010:	230c      	movs	r3, #12
 8001012:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	4619      	mov	r1, r3
 8001018:	482c      	ldr	r0, [pc, #176]	; (80010cc <HAL_FMC_MspInit+0x10c>)
 800101a:	f002 f8a5 	bl	8003168 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800101e:	2301      	movs	r3, #1
 8001020:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800102e:	230c      	movs	r3, #12
 8001030:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	4619      	mov	r1, r3
 8001036:	4826      	ldr	r0, [pc, #152]	; (80010d0 <HAL_FMC_MspInit+0x110>)
 8001038:	f002 f896 	bl	8003168 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800103c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001040:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800104e:	230c      	movs	r3, #12
 8001050:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	4619      	mov	r1, r3
 8001056:	481f      	ldr	r0, [pc, #124]	; (80010d4 <HAL_FMC_MspInit+0x114>)
 8001058:	f002 f886 	bl	8003168 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800105c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001060:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800106e:	230c      	movs	r3, #12
 8001070:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	4619      	mov	r1, r3
 8001076:	4818      	ldr	r0, [pc, #96]	; (80010d8 <HAL_FMC_MspInit+0x118>)
 8001078:	f002 f876 	bl	8003168 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800107c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001080:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800108e:	230c      	movs	r3, #12
 8001090:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	4619      	mov	r1, r3
 8001096:	4811      	ldr	r0, [pc, #68]	; (80010dc <HAL_FMC_MspInit+0x11c>)
 8001098:	f002 f866 	bl	8003168 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800109c:	2360      	movs	r3, #96	; 0x60
 800109e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010ac:	230c      	movs	r3, #12
 80010ae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	4619      	mov	r1, r3
 80010b4:	480a      	ldr	r0, [pc, #40]	; (80010e0 <HAL_FMC_MspInit+0x120>)
 80010b6:	f002 f857 	bl	8003168 <HAL_GPIO_Init>
 80010ba:	e000      	b.n	80010be <HAL_FMC_MspInit+0xfe>
    return;
 80010bc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000098 	.word	0x20000098
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40021400 	.word	0x40021400
 80010d0:	40020800 	.word	0x40020800
 80010d4:	40021800 	.word	0x40021800
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40020c00 	.word	0x40020c00
 80010e0:	40020400 	.word	0x40020400

080010e4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80010ec:	f7ff ff68 	bl	8000fc0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08e      	sub	sp, #56	; 0x38
 80010fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
 8001112:	4b8d      	ldr	r3, [pc, #564]	; (8001348 <MX_GPIO_Init+0x250>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a8c      	ldr	r2, [pc, #560]	; (8001348 <MX_GPIO_Init+0x250>)
 8001118:	f043 0310 	orr.w	r3, r3, #16
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b8a      	ldr	r3, [pc, #552]	; (8001348 <MX_GPIO_Init+0x250>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	623b      	str	r3, [r7, #32]
 8001128:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	4b86      	ldr	r3, [pc, #536]	; (8001348 <MX_GPIO_Init+0x250>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a85      	ldr	r2, [pc, #532]	; (8001348 <MX_GPIO_Init+0x250>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b83      	ldr	r3, [pc, #524]	; (8001348 <MX_GPIO_Init+0x250>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
 800114a:	4b7f      	ldr	r3, [pc, #508]	; (8001348 <MX_GPIO_Init+0x250>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a7e      	ldr	r2, [pc, #504]	; (8001348 <MX_GPIO_Init+0x250>)
 8001150:	f043 0320 	orr.w	r3, r3, #32
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b7c      	ldr	r3, [pc, #496]	; (8001348 <MX_GPIO_Init+0x250>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0320 	and.w	r3, r3, #32
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	4b78      	ldr	r3, [pc, #480]	; (8001348 <MX_GPIO_Init+0x250>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a77      	ldr	r2, [pc, #476]	; (8001348 <MX_GPIO_Init+0x250>)
 800116c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b75      	ldr	r3, [pc, #468]	; (8001348 <MX_GPIO_Init+0x250>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b71      	ldr	r3, [pc, #452]	; (8001348 <MX_GPIO_Init+0x250>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a70      	ldr	r2, [pc, #448]	; (8001348 <MX_GPIO_Init+0x250>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b6e      	ldr	r3, [pc, #440]	; (8001348 <MX_GPIO_Init+0x250>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b6a      	ldr	r3, [pc, #424]	; (8001348 <MX_GPIO_Init+0x250>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a69      	ldr	r2, [pc, #420]	; (8001348 <MX_GPIO_Init+0x250>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b67      	ldr	r3, [pc, #412]	; (8001348 <MX_GPIO_Init+0x250>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b63      	ldr	r3, [pc, #396]	; (8001348 <MX_GPIO_Init+0x250>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a62      	ldr	r2, [pc, #392]	; (8001348 <MX_GPIO_Init+0x250>)
 80011c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b60      	ldr	r3, [pc, #384]	; (8001348 <MX_GPIO_Init+0x250>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b5c      	ldr	r3, [pc, #368]	; (8001348 <MX_GPIO_Init+0x250>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a5b      	ldr	r2, [pc, #364]	; (8001348 <MX_GPIO_Init+0x250>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b59      	ldr	r3, [pc, #356]	; (8001348 <MX_GPIO_Init+0x250>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SM_IN1_Pin|SM_IN2_Pin|SM_IN3_Pin|SM_IN4_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	213c      	movs	r1, #60	; 0x3c
 80011f2:	4856      	ldr	r0, [pc, #344]	; (800134c <MX_GPIO_Init+0x254>)
 80011f4:	f002 f964 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2116      	movs	r1, #22
 80011fc:	4854      	ldr	r0, [pc, #336]	; (8001350 <MX_GPIO_Init+0x258>)
 80011fe:	f002 f95f 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	4853      	ldr	r0, [pc, #332]	; (8001354 <MX_GPIO_Init+0x25c>)
 8001208:	f002 f95a 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001212:	4851      	ldr	r0, [pc, #324]	; (8001358 <MX_GPIO_Init+0x260>)
 8001214:	f002 f954 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800121e:	484f      	ldr	r0, [pc, #316]	; (800135c <MX_GPIO_Init+0x264>)
 8001220:	f002 f94e 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SM_IN1_Pin|SM_IN2_Pin|SM_IN3_Pin|SM_IN4_Pin;
 8001224:	233c      	movs	r3, #60	; 0x3c
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2301      	movs	r3, #1
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001238:	4619      	mov	r1, r3
 800123a:	4844      	ldr	r0, [pc, #272]	; (800134c <MX_GPIO_Init+0x254>)
 800123c:	f001 ff94 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001240:	2316      	movs	r3, #22
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	2301      	movs	r3, #1
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	4619      	mov	r1, r3
 8001256:	483e      	ldr	r0, [pc, #248]	; (8001350 <MX_GPIO_Init+0x258>)
 8001258:	f001 ff86 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800125c:	2301      	movs	r3, #1
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001260:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <MX_GPIO_Init+0x268>)
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126c:	4619      	mov	r1, r3
 800126e:	4839      	ldr	r0, [pc, #228]	; (8001354 <MX_GPIO_Init+0x25c>)
 8001270:	f001 ff7a 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|TP_INT1_Pin;
 8001274:	f248 0302 	movw	r3, #32770	; 0x8002
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800127a:	4b3a      	ldr	r3, [pc, #232]	; (8001364 <MX_GPIO_Init+0x26c>)
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001286:	4619      	mov	r1, r3
 8001288:	4832      	ldr	r0, [pc, #200]	; (8001354 <MX_GPIO_Init+0x25c>)
 800128a:	f001 ff6d 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	4619      	mov	r1, r3
 80012a4:	482b      	ldr	r0, [pc, #172]	; (8001354 <MX_GPIO_Init+0x25c>)
 80012a6:	f001 ff5f 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80012aa:	2320      	movs	r3, #32
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012ae:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <MX_GPIO_Init+0x26c>)
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ba:	4619      	mov	r1, r3
 80012bc:	4824      	ldr	r0, [pc, #144]	; (8001350 <MX_GPIO_Init+0x258>)
 80012be:	f001 ff53 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80012c2:	2304      	movs	r3, #4
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d2:	4619      	mov	r1, r3
 80012d4:	4824      	ldr	r0, [pc, #144]	; (8001368 <MX_GPIO_Init+0x270>)
 80012d6:	f001 ff47 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80012da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ec:	4619      	mov	r1, r3
 80012ee:	481a      	ldr	r0, [pc, #104]	; (8001358 <MX_GPIO_Init+0x260>)
 80012f0:	f001 ff3a 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80012f4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	4812      	ldr	r0, [pc, #72]	; (8001358 <MX_GPIO_Init+0x260>)
 800130e:	f001 ff2b 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001312:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001328:	4619      	mov	r1, r3
 800132a:	480c      	ldr	r0, [pc, #48]	; (800135c <MX_GPIO_Init+0x264>)
 800132c:	f001 ff1c 	bl	8003168 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	2006      	movs	r0, #6
 8001336:	f001 fc53 	bl	8002be0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800133a:	2006      	movs	r0, #6
 800133c:	f001 fc6c 	bl	8002c18 <HAL_NVIC_EnableIRQ>

}
 8001340:	bf00      	nop
 8001342:	3738      	adds	r7, #56	; 0x38
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	40021000 	.word	0x40021000
 8001350:	40020800 	.word	0x40020800
 8001354:	40020000 	.word	0x40020000
 8001358:	40020c00 	.word	0x40020c00
 800135c:	40021800 	.word	0x40021800
 8001360:	10110000 	.word	0x10110000
 8001364:	10120000 	.word	0x10120000
 8001368:	40020400 	.word	0x40020400

0800136c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]
	//HAL_UART_Transmit_IT(&huart5, Tx_data.buff, Tx_data.len);

	//TX_send_Int(10);

	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001376:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <HAL_GPIO_EXTI_Callback+0x24>)
 800137c:	f002 f8b9 	bl	80034f2 <HAL_GPIO_TogglePin>

	runMotor_f=1;
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <HAL_GPIO_EXTI_Callback+0x28>)
 8001382:	2201      	movs	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]

}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40021800 	.word	0x40021800
 8001394:	200000c8 	.word	0x200000c8

08001398 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_I2C3_Init+0x74>)
 800139e:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <MX_I2C3_Init+0x78>)
 80013a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_I2C3_Init+0x74>)
 80013a4:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <MX_I2C3_Init+0x7c>)
 80013a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <MX_I2C3_Init+0x74>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <MX_I2C3_Init+0x74>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <MX_I2C3_Init+0x74>)
 80013b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_I2C3_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <MX_I2C3_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c8:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_I2C3_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_I2C3_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_I2C3_Init+0x74>)
 80013d6:	f003 fbc9 	bl	8004b6c <HAL_I2C_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80013e0:	f000 fb4c 	bl	8001a7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013e4:	2100      	movs	r1, #0
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <MX_I2C3_Init+0x74>)
 80013e8:	f003 fd04 	bl	8004df4 <HAL_I2CEx_ConfigAnalogFilter>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80013f2:	f000 fb43 	bl	8001a7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80013f6:	2100      	movs	r1, #0
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <MX_I2C3_Init+0x74>)
 80013fa:	f003 fd37 	bl	8004e6c <HAL_I2CEx_ConfigDigitalFilter>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001404:	f000 fb3a 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000158 	.word	0x20000158
 8001410:	40005c00 	.word	0x40005c00
 8001414:	000186a0 	.word	0x000186a0

08001418 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a29      	ldr	r2, [pc, #164]	; (80014dc <HAL_I2C_MspInit+0xc4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d14b      	bne.n	80014d2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <HAL_I2C_MspInit+0xc8>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a27      	ldr	r2, [pc, #156]	; (80014e0 <HAL_I2C_MspInit+0xc8>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <HAL_I2C_MspInit+0xc8>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <HAL_I2C_MspInit+0xc8>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a20      	ldr	r2, [pc, #128]	; (80014e0 <HAL_I2C_MspInit+0xc8>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <HAL_I2C_MspInit+0xc8>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001472:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001478:	2312      	movs	r3, #18
 800147a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147c:	2301      	movs	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001484:	2304      	movs	r3, #4
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4815      	ldr	r0, [pc, #84]	; (80014e4 <HAL_I2C_MspInit+0xcc>)
 8001490:	f001 fe6a 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149a:	2312      	movs	r3, #18
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149e:	2301      	movs	r3, #1
 80014a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014a6:	2304      	movs	r3, #4
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	480d      	ldr	r0, [pc, #52]	; (80014e8 <HAL_I2C_MspInit+0xd0>)
 80014b2:	f001 fe59 	bl	8003168 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_I2C_MspInit+0xc8>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <HAL_I2C_MspInit+0xc8>)
 80014c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_I2C_MspInit+0xc8>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40005c00 	.word	0x40005c00
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020000 	.word	0x40020000

080014ec <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08e      	sub	sp, #56	; 0x38
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2234      	movs	r2, #52	; 0x34
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f007 f84b 	bl	8008594 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80014fe:	4b39      	ldr	r3, [pc, #228]	; (80015e4 <MX_LTDC_Init+0xf8>)
 8001500:	4a39      	ldr	r2, [pc, #228]	; (80015e8 <MX_LTDC_Init+0xfc>)
 8001502:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001504:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <MX_LTDC_Init+0xf8>)
 8001506:	2200      	movs	r2, #0
 8001508:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800150a:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <MX_LTDC_Init+0xf8>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001510:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <MX_LTDC_Init+0xf8>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001516:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <MX_LTDC_Init+0xf8>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800151c:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <MX_LTDC_Init+0xf8>)
 800151e:	2209      	movs	r2, #9
 8001520:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001522:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <MX_LTDC_Init+0xf8>)
 8001524:	2201      	movs	r2, #1
 8001526:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001528:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <MX_LTDC_Init+0xf8>)
 800152a:	221d      	movs	r2, #29
 800152c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800152e:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <MX_LTDC_Init+0xf8>)
 8001530:	2203      	movs	r2, #3
 8001532:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001534:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <MX_LTDC_Init+0xf8>)
 8001536:	f240 120d 	movw	r2, #269	; 0x10d
 800153a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800153c:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <MX_LTDC_Init+0xf8>)
 800153e:	f240 1243 	movw	r2, #323	; 0x143
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001544:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <MX_LTDC_Init+0xf8>)
 8001546:	f240 1217 	movw	r2, #279	; 0x117
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800154c:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <MX_LTDC_Init+0xf8>)
 800154e:	f240 1247 	movw	r2, #327	; 0x147
 8001552:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001554:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <MX_LTDC_Init+0xf8>)
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <MX_LTDC_Init+0xf8>)
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <MX_LTDC_Init+0xf8>)
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800156c:	481d      	ldr	r0, [pc, #116]	; (80015e4 <MX_LTDC_Init+0xf8>)
 800156e:	f003 fcbd 	bl	8004eec <HAL_LTDC_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001578:	f000 fa80 	bl	8001a7c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001580:	23f0      	movs	r3, #240	; 0xf0
 8001582:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001588:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800158c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800158e:	2302      	movs	r3, #2
 8001590:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001592:	23ff      	movs	r3, #255	; 0xff
 8001594:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800159a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800159e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80015a0:	2307      	movs	r3, #7
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80015a4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80015aa:	23f0      	movs	r3, #240	; 0xf0
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80015ae:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_LTDC_Init+0xf8>)
 80015ce:	f003 fe1f 	bl	8005210 <HAL_LTDC_ConfigLayer>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80015d8:	f000 fa50 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3738      	adds	r7, #56	; 0x38
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200001ac 	.word	0x200001ac
 80015e8:	40016800 	.word	0x40016800

080015ec <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08e      	sub	sp, #56	; 0x38
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a7b      	ldr	r2, [pc, #492]	; (80017f8 <HAL_LTDC_MspInit+0x20c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	f040 80f0 	bne.w	80017f0 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
 8001614:	4b79      	ldr	r3, [pc, #484]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 8001616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001618:	4a78      	ldr	r2, [pc, #480]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 800161a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800161e:	6453      	str	r3, [r2, #68]	; 0x44
 8001620:	4b76      	ldr	r3, [pc, #472]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001628:	623b      	str	r3, [r7, #32]
 800162a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
 8001630:	4b72      	ldr	r3, [pc, #456]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001634:	4a71      	ldr	r2, [pc, #452]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 8001636:	f043 0320 	orr.w	r3, r3, #32
 800163a:	6313      	str	r3, [r2, #48]	; 0x30
 800163c:	4b6f      	ldr	r3, [pc, #444]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	f003 0320 	and.w	r3, r3, #32
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	4b6b      	ldr	r3, [pc, #428]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	4a6a      	ldr	r2, [pc, #424]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6313      	str	r3, [r2, #48]	; 0x30
 8001658:	4b68      	ldr	r3, [pc, #416]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	4b64      	ldr	r3, [pc, #400]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	4a63      	ldr	r2, [pc, #396]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 800166e:	f043 0302 	orr.w	r3, r3, #2
 8001672:	6313      	str	r3, [r2, #48]	; 0x30
 8001674:	4b61      	ldr	r3, [pc, #388]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	4b5d      	ldr	r3, [pc, #372]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	4a5c      	ldr	r2, [pc, #368]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 800168a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168e:	6313      	str	r3, [r2, #48]	; 0x30
 8001690:	4b5a      	ldr	r3, [pc, #360]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	4b56      	ldr	r3, [pc, #344]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	4a55      	ldr	r2, [pc, #340]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6313      	str	r3, [r2, #48]	; 0x30
 80016ac:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	4b4f      	ldr	r3, [pc, #316]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	4a4e      	ldr	r2, [pc, #312]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 80016c2:	f043 0308 	orr.w	r3, r3, #8
 80016c6:	6313      	str	r3, [r2, #48]	; 0x30
 80016c8:	4b4c      	ldr	r3, [pc, #304]	; (80017fc <HAL_LTDC_MspInit+0x210>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80016d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016e6:	230e      	movs	r3, #14
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	4843      	ldr	r0, [pc, #268]	; (8001800 <HAL_LTDC_MspInit+0x214>)
 80016f2:	f001 fd39 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80016f6:	f641 0358 	movw	r3, #6232	; 0x1858
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001708:	230e      	movs	r3, #14
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	4619      	mov	r1, r3
 8001712:	483c      	ldr	r0, [pc, #240]	; (8001804 <HAL_LTDC_MspInit+0x218>)
 8001714:	f001 fd28 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001718:	2303      	movs	r3, #3
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001728:	2309      	movs	r3, #9
 800172a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001730:	4619      	mov	r1, r3
 8001732:	4835      	ldr	r0, [pc, #212]	; (8001808 <HAL_LTDC_MspInit+0x21c>)
 8001734:	f001 fd18 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001738:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800174a:	230e      	movs	r3, #14
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001752:	4619      	mov	r1, r3
 8001754:	482c      	ldr	r0, [pc, #176]	; (8001808 <HAL_LTDC_MspInit+0x21c>)
 8001756:	f001 fd07 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800175a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800176c:	230e      	movs	r3, #14
 800176e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001774:	4619      	mov	r1, r3
 8001776:	4825      	ldr	r0, [pc, #148]	; (800180c <HAL_LTDC_MspInit+0x220>)
 8001778:	f001 fcf6 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800177c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800178e:	230e      	movs	r3, #14
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	481d      	ldr	r0, [pc, #116]	; (8001810 <HAL_LTDC_MspInit+0x224>)
 800179a:	f001 fce5 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800179e:	2348      	movs	r3, #72	; 0x48
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017ae:	230e      	movs	r3, #14
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b6:	4619      	mov	r1, r3
 80017b8:	4816      	ldr	r0, [pc, #88]	; (8001814 <HAL_LTDC_MspInit+0x228>)
 80017ba:	f001 fcd5 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80017be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017d0:	2309      	movs	r3, #9
 80017d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d8:	4619      	mov	r1, r3
 80017da:	480c      	ldr	r0, [pc, #48]	; (800180c <HAL_LTDC_MspInit+0x220>)
 80017dc:	f001 fcc4 	bl	8003168 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2105      	movs	r1, #5
 80017e4:	2058      	movs	r0, #88	; 0x58
 80017e6:	f001 f9fb 	bl	8002be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80017ea:	2058      	movs	r0, #88	; 0x58
 80017ec:	f001 fa14 	bl	8002c18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80017f0:	bf00      	nop
 80017f2:	3738      	adds	r7, #56	; 0x38
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40016800 	.word	0x40016800
 80017fc:	40023800 	.word	0x40023800
 8001800:	40021400 	.word	0x40021400
 8001804:	40020000 	.word	0x40020000
 8001808:	40020400 	.word	0x40020400
 800180c:	40021800 	.word	0x40021800
 8001810:	40020800 	.word	0x40020800
 8001814:	40020c00 	.word	0x40020c00

08001818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001818:	b5b0      	push	{r4, r5, r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800181e:	f001 f8c1 	bl	80029a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001822:	f000 f873 	bl	800190c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001826:	f7ff fc67 	bl	80010f8 <MX_GPIO_Init>
  MX_CRC_Init();
 800182a:	f7ff fae9 	bl	8000e00 <MX_CRC_Init>
  MX_DMA2D_Init();
 800182e:	f7ff fb1d 	bl	8000e6c <MX_DMA2D_Init>
  MX_FMC_Init();
 8001832:	f7ff fb75 	bl	8000f20 <MX_FMC_Init>
  MX_I2C3_Init();
 8001836:	f7ff fdaf 	bl	8001398 <MX_I2C3_Init>
  MX_LTDC_Init();
 800183a:	f7ff fe57 	bl	80014ec <MX_LTDC_Init>
  MX_SPI5_Init();
 800183e:	f000 fa49 	bl	8001cd4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001842:	f000 fe19 	bl	8002478 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001846:	f000 ff03 	bl	8002650 <MX_USART1_UART_Init>
  MX_UART5_Init();
 800184a:	f000 fed7 	bl	80025fc <MX_UART5_Init>
  MX_USB_OTG_HS_HCD_Init();
 800184e:	f000 fff5 	bl	800283c <MX_USB_OTG_HS_HCD_Init>
  MX_TIM7_Init();
 8001852:	f000 fe61 	bl	8002518 <MX_TIM7_Init>
  RetargetInit(&huart5);
 8001856:	4824      	ldr	r0, [pc, #144]	; (80018e8 <main+0xd0>)
 8001858:	f000 f976 	bl	8001b48 <RetargetInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t str[]="Hello world!!!!!\n";
 800185c:	4b23      	ldr	r3, [pc, #140]	; (80018ec <main+0xd4>)
 800185e:	1d3c      	adds	r4, r7, #4
 8001860:	461d      	mov	r5, r3
 8001862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001866:	682b      	ldr	r3, [r5, #0]
 8001868:	8023      	strh	r3, [r4, #0]
  uint8_t len = (sizeof(str)/sizeof(str[0]))-1;
 800186a:	2311      	movs	r3, #17
 800186c:	75fb      	strb	r3, [r7, #23]

  Tx_data.len=len;
 800186e:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <main+0xd8>)
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	7013      	strb	r3, [r2, #0]
  Tx_data.buff=str;
 8001874:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <main+0xd8>)
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	6053      	str	r3, [r2, #4]


  Ser_Queue.Front=-1;
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <main+0xdc>)
 800187c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001880:	801a      	strh	r2, [r3, #0]
  Ser_Queue.Rear=-1;
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <main+0xdc>)
 8001884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001888:	805a      	strh	r2, [r3, #2]

  HAL_UART_Receive_IT(&huart5, rec_buff, 1);
 800188a:	2201      	movs	r2, #1
 800188c:	491a      	ldr	r1, [pc, #104]	; (80018f8 <main+0xe0>)
 800188e:	4816      	ldr	r0, [pc, #88]	; (80018e8 <main+0xd0>)
 8001890:	f005 fc28 	bl	80070e4 <HAL_UART_Receive_IT>
 // uint16_t c=0;
  motor_param.accel=100;
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <main+0xe4>)
 8001896:	2264      	movs	r2, #100	; 0x64
 8001898:	805a      	strh	r2, [r3, #2]
  motor_param.decel=100;
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <main+0xe4>)
 800189c:	2264      	movs	r2, #100	; 0x64
 800189e:	809a      	strh	r2, [r3, #4]
  motor_param.speed=10;
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <main+0xe4>)
 80018a2:	220a      	movs	r2, #10
 80018a4:	801a      	strh	r2, [r3, #0]
  motor_param.steps=4096/4;
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <main+0xe4>)
 80018a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ac:	80da      	strh	r2, [r3, #6]
//	  HAL_Delay(1000);
//
//	  //HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
//	  LD3_GPIO_Port->BSRR|=(uint32_t)LD3_Pin<<16;
//	  HAL_Delay(1000);
	  if (buff_is_ready())
 80018ae:	f000 f8b1 	bl	8001a14 <buff_is_ready>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00d      	beq.n	80018d4 <main+0xbc>
	  {

		  HAL_UART_Transmit_IT(&huart5,Ser_Queue.Buffer, Ser_Queue.Rear+1);
 80018b8:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <main+0xdc>)
 80018ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3301      	adds	r3, #1
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	490e      	ldr	r1, [pc, #56]	; (8001900 <main+0xe8>)
 80018c8:	4807      	ldr	r0, [pc, #28]	; (80018e8 <main+0xd0>)
 80018ca:	f005 fbc6 	bl	800705a <HAL_UART_Transmit_IT>
		  reset_Queue(&Ser_Queue);
 80018ce:	4809      	ldr	r0, [pc, #36]	; (80018f4 <main+0xdc>)
 80018d0:	f000 f8fa 	bl	8001ac8 <reset_Queue>
	  }
	  if (runMotor_f)
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <main+0xec>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0e8      	beq.n	80018ae <main+0x96>
	  {
		  runStepper(&motor_data, &motor_param);
 80018dc:	4907      	ldr	r1, [pc, #28]	; (80018fc <main+0xe4>)
 80018de:	480a      	ldr	r0, [pc, #40]	; (8001908 <main+0xf0>)
 80018e0:	f000 fada 	bl	8001e98 <runStepper>
	  if (buff_is_ready())
 80018e4:	e7e3      	b.n	80018ae <main+0x96>
 80018e6:	bf00      	nop
 80018e8:	2000048c 	.word	0x2000048c
 80018ec:	080092b4 	.word	0x080092b4
 80018f0:	200000d8 	.word	0x200000d8
 80018f4:	20000254 	.word	0x20000254
 80018f8:	200000cc 	.word	0x200000cc
 80018fc:	2000009c 	.word	0x2000009c
 8001900:	20000258 	.word	0x20000258
 8001904:	200000c8 	.word	0x200000c8
 8001908:	200000a4 	.word	0x200000a4

0800190c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b0a0      	sub	sp, #128	; 0x80
 8001910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001912:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001916:	2230      	movs	r2, #48	; 0x30
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f006 fe3a 	bl	8008594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001920:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	2230      	movs	r2, #48	; 0x30
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f006 fe2b 	bl	8008594 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <SystemClock_Config+0x100>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a31      	ldr	r2, [pc, #196]	; (8001a0c <SystemClock_Config+0x100>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <SystemClock_Config+0x100>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <SystemClock_Config+0x104>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001966:	4a2a      	ldr	r2, [pc, #168]	; (8001a10 <SystemClock_Config+0x104>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <SystemClock_Config+0x104>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800197a:	2301      	movs	r3, #1
 800197c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800197e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001982:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001984:	2302      	movs	r3, #2
 8001986:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001988:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800198c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800198e:	2304      	movs	r3, #4
 8001990:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001992:	2348      	movs	r3, #72	; 0x48
 8001994:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001996:	2302      	movs	r3, #2
 8001998:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800199a:	2303      	movs	r3, #3
 800199c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 fe0a 	bl	80055bc <HAL_RCC_OscConfig>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019ae:	f000 f865 	bl	8001a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b2:	230f      	movs	r3, #15
 80019b4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b6:	2302      	movs	r3, #2
 80019b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019cc:	2102      	movs	r1, #2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f004 f86c 	bl	8005aac <HAL_RCC_ClockConfig>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80019da:	f000 f84f 	bl	8001a7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80019de:	2308      	movs	r3, #8
 80019e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80019e2:	2332      	movs	r3, #50	; 0x32
 80019e4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80019e6:	2302      	movs	r3, #2
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80019ea:	2300      	movs	r3, #0
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	4618      	mov	r0, r3
 80019f4:	f004 fa88 	bl	8005f08 <HAL_RCCEx_PeriphCLKConfig>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80019fe:	f000 f83d 	bl	8001a7c <Error_Handler>
  }
}
 8001a02:	bf00      	nop
 8001a04:	3780      	adds	r7, #128	; 0x80
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40007000 	.word	0x40007000

08001a14 <buff_is_ready>:

/* USER CODE BEGIN 4 */

uint8_t buff_is_ready(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
	if(Ser_Queue.Buffer[Ser_Queue.Rear]=='\n')
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <buff_is_ready+0x28>)
 8001a1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <buff_is_ready+0x28>)
 8001a22:	4413      	add	r3, r2
 8001a24:	791b      	ldrb	r3, [r3, #4]
 8001a26:	2b0a      	cmp	r3, #10
 8001a28:	d101      	bne.n	8001a2e <buff_is_ready+0x1a>
	{
		return 1;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <buff_is_ready+0x1c>

	}
	return 0;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000254 	.word	0x20000254

08001a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a52:	f000 ffc9 	bl	80029e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d102      	bne.n	8001a66 <HAL_TIM_PeriodElapsedCallback+0x26>
  {

	  updateStepper(&motor_data);
 8001a60:	4805      	ldr	r0, [pc, #20]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a62:	f000 faf7 	bl	8002054 <updateStepper>

  }

  /* USER CODE END Callback 1 */
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40001000 	.word	0x40001000
 8001a74:	40001400 	.word	0x40001400
 8001a78:	200000a4 	.word	0x200000a4

08001a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
}
 8001a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <Error_Handler+0x8>

08001a86 <isQ_Full>:

#include "queue.h"


uint8_t isQ_Full(Queue *Q)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
	if ((Q->Front==Q->Rear+1)||(Q->Front==0&&Q->Rear==SIZE-1))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a94:	461a      	mov	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d009      	beq.n	8001ab6 <isQ_Full+0x30>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d106      	bne.n	8001aba <isQ_Full+0x34>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ab2:	2bff      	cmp	r3, #255	; 0xff
 8001ab4:	d101      	bne.n	8001aba <isQ_Full+0x34>
	{
		return 1;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <isQ_Full+0x36>
	}
	return 0;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <reset_Queue>:
	return 0;

}

void reset_Queue(Queue *Q)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	Q->Front=-1;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad6:	801a      	strh	r2, [r3, #0]
	Q->Rear=-1;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ade:	805a      	strh	r2, [r3, #2]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <enQueue>:


void enQueue(Queue *Q,uint8_t element)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	70fb      	strb	r3, [r7, #3]
	if (!isQ_Full(Q))
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ffc4 	bl	8001a86 <isQ_Full>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d11c      	bne.n	8001b3e <enQueue+0x52>
	{
		if (Q->Front==-1){Q->Front=0;}
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0e:	d102      	bne.n	8001b16 <enQueue+0x2a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	801a      	strh	r2, [r3, #0]

		Q->Rear= (Q->Rear+1)%SIZE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	425a      	negs	r2, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	bf58      	it	pl
 8001b26:	4253      	negpl	r3, r2
 8001b28:	b21a      	sxth	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	805a      	strh	r2, [r3, #2]
		Q->Buffer[Q->Rear]= element;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b34:	461a      	mov	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	78fa      	ldrb	r2, [r7, #3]
 8001b3c:	711a      	strb	r2, [r3, #4]


	}

}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001b50:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <RetargetInit+0x28>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <RetargetInit+0x2c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6898      	ldr	r0, [r3, #8]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	2202      	movs	r2, #2
 8001b60:	2100      	movs	r1, #0
 8001b62:	f006 fd95 	bl	8008690 <setvbuf>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000358 	.word	0x20000358
 8001b74:	20000014 	.word	0x20000014

08001b78 <_isatty>:

int _isatty(int fd) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db04      	blt.n	8001b90 <_isatty+0x18>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	dc01      	bgt.n	8001b90 <_isatty+0x18>
    return 1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e005      	b.n	8001b9c <_isatty+0x24>

  errno = EBADF;
 8001b90:	f006 fcd6 	bl	8008540 <__errno>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2209      	movs	r2, #9
 8001b98:	601a      	str	r2, [r3, #0]
  return 0;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_write>:

int _write(int fd, char* ptr, int len) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d002      	beq.n	8001bbc <_write+0x18>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d111      	bne.n	8001be0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <_write+0x54>)
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	f005 f912 	bl	8006df2 <HAL_UART_Transmit>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <_write+0x38>
      return len;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	e008      	b.n	8001bee <_write+0x4a>
    else
      return EIO;
 8001bdc:	2305      	movs	r3, #5
 8001bde:	e006      	b.n	8001bee <_write+0x4a>
  }
  errno = EBADF;
 8001be0:	f006 fcae 	bl	8008540 <__errno>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2209      	movs	r2, #9
 8001be8:	601a      	str	r2, [r3, #0]
  return -1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000358 	.word	0x20000358

08001bfc <_close>:

int _close(int fd) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db04      	blt.n	8001c14 <_close+0x18>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	dc01      	bgt.n	8001c14 <_close+0x18>
    return 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e006      	b.n	8001c22 <_close+0x26>

  errno = EBADF;
 8001c14:	f006 fc94 	bl	8008540 <__errno>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2209      	movs	r2, #9
 8001c1c:	601a      	str	r2, [r3, #0]
  return -1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b084      	sub	sp, #16
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001c36:	f006 fc83 	bl	8008540 <__errno>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2209      	movs	r2, #9
 8001c3e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <_read>:

int _read(int fd, char* ptr, int len) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d110      	bne.n	8001c80 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <_read+0x4c>)
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	2201      	movs	r2, #1
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	f005 f954 	bl	8006f16 <HAL_UART_Receive>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001c72:	7dfb      	ldrb	r3, [r7, #23]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <_read+0x30>
      return 1;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e008      	b.n	8001c8e <_read+0x42>
    else
      return EIO;
 8001c7c:	2305      	movs	r3, #5
 8001c7e:	e006      	b.n	8001c8e <_read+0x42>
  }
  errno = EBADF;
 8001c80:	f006 fc5e 	bl	8008540 <__errno>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2209      	movs	r2, #9
 8001c88:	601a      	str	r2, [r3, #0]
  return -1;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000358 	.word	0x20000358

08001c9c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db08      	blt.n	8001cbe <_fstat+0x22>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	dc05      	bgt.n	8001cbe <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cb8:	605a      	str	r2, [r3, #4]
    return 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e005      	b.n	8001cca <_fstat+0x2e>
  }

  errno = EBADF;
 8001cbe:	f006 fc3f 	bl	8008540 <__errno>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2209      	movs	r2, #9
 8001cc6:	601a      	str	r2, [r3, #0]
  return 0;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001cda:	4a18      	ldr	r2, [pc, #96]	; (8001d3c <MX_SPI5_Init+0x68>)
 8001cdc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001ce0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ce4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d04:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001d08:	2218      	movs	r2, #24
 8001d0a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001d20:	220a      	movs	r2, #10
 8001d22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001d24:	4804      	ldr	r0, [pc, #16]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001d26:	f004 fae1 	bl	80062ec <HAL_SPI_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001d30:	f7ff fea4 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	2000035c 	.word	0x2000035c
 8001d3c:	40015000 	.word	0x40015000

08001d40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <HAL_SPI_MspInit+0x84>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d12c      	bne.n	8001dbc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_SPI_MspInit+0x88>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <HAL_SPI_MspInit+0x88>)
 8001d6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <HAL_SPI_MspInit+0x88>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_SPI_MspInit+0x88>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a10      	ldr	r2, [pc, #64]	; (8001dc8 <HAL_SPI_MspInit+0x88>)
 8001d88:	f043 0320 	orr.w	r3, r3, #32
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_SPI_MspInit+0x88>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0320 	and.w	r3, r3, #32
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001d9a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001dac:	2305      	movs	r3, #5
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4619      	mov	r1, r3
 8001db6:	4805      	ldr	r0, [pc, #20]	; (8001dcc <HAL_SPI_MspInit+0x8c>)
 8001db8:	f001 f9d6 	bl	8003168 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	3728      	adds	r7, #40	; 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40015000 	.word	0x40015000
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40021400 	.word	0x40021400

08001dd0 <step_Counter>:




void step_Counter(speedRampData *data)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

	if (data->dir==CW)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	785b      	ldrb	r3, [r3, #1]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10f      	bne.n	8001e00 <step_Counter+0x30>
	{
		data->step_pos++;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7c1b      	ldrb	r3, [r3, #16]
 8001de4:	3301      	adds	r3, #1
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	741a      	strb	r2, [r3, #16]
		data->step_count++;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3301      	adds	r3, #1
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	b21a      	sxth	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	819a      	strh	r2, [r3, #12]
 8001dfe:	e012      	b.n	8001e26 <step_Counter+0x56>
	}
	else if (data->dir==CCW)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	785b      	ldrb	r3, [r3, #1]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d10e      	bne.n	8001e26 <step_Counter+0x56>
	{
		data->step_pos--;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	7c1b      	ldrb	r3, [r3, #16]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	741a      	strb	r2, [r3, #16]
		data->step_count--;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	b21a      	sxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	819a      	strh	r2, [r3, #12]
	}

	if (data->step_pos==8){
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	7c1b      	ldrb	r3, [r3, #16]
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d102      	bne.n	8001e34 <step_Counter+0x64>
		data->step_pos=0;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	741a      	strb	r2, [r3, #16]
	}

	mtr_Output(data->step_pos);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7c1b      	ldrb	r3, [r3, #16]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 f805 	bl	8001e48 <mtr_Output>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <mtr_Output>:

void mtr_Output(uint8_t pos)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
	uint16_t mask = SM_IN1_Pin|SM_IN2_Pin|SM_IN3_Pin|SM_IN4_Pin;
 8001e52:	233c      	movs	r3, #60	; 0x3c
 8001e54:	81fb      	strh	r3, [r7, #14]
	uint32_t temp = (MTR_OUT_TAB[pos]<<2) & mask;
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <mtr_Output+0x48>)
 8001e5a:	5cd3      	ldrb	r3, [r2, r3]
 8001e5c:	009a      	lsls	r2, r3, #2
 8001e5e:	89fb      	ldrh	r3, [r7, #14]
 8001e60:	4013      	ands	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
	temp |= (((~MTR_OUT_TAB[pos])<<2) & mask)<<16;
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <mtr_Output+0x48>)
 8001e68:	5cd3      	ldrb	r3, [r2, r3]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	009a      	lsls	r2, r3, #2
 8001e6e:	89fb      	ldrh	r3, [r7, #14]
 8001e70:	4013      	ands	r3, r2
 8001e72:	041b      	lsls	r3, r3, #16
 8001e74:	461a      	mov	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60bb      	str	r3, [r7, #8]
	MTR_PORT->BSRR=temp;
 8001e7c:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <mtr_Output+0x4c>)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	6193      	str	r3, [r2, #24]


}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000000 	.word	0x20000000
 8001e94:	40021000 	.word	0x40021000

08001e98 <runStepper>:


void runStepper(speedRampData *data, SM_Param *param)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
	//! Number of steps before we hit max speed.
	  uint16_t max_s_lim;
	  //! Number of steps before we must start deceleration (if accel does not hit max speed).
	  uint16_t accel_lim;
	  uint16_t speed = param->speed;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	827b      	strh	r3, [r7, #18]
	  uint16_t accel = param->accel;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	885b      	ldrh	r3, [r3, #2]
 8001eac:	823b      	strh	r3, [r7, #16]
	  uint16_t decel = param->decel;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	889b      	ldrh	r3, [r3, #4]
 8001eb2:	81fb      	strh	r3, [r7, #14]
	  uint16_t step = param->steps;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	88db      	ldrh	r3, [r3, #6]
 8001eb8:	81bb      	strh	r3, [r7, #12]
	  if(step < 0){
	    data->dir=CCW;
		data->step_total = -step;
	  }
	  else{
		data->dir=CW;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	705a      	strb	r2, [r3, #1]
		data->step_total= step;
 8001ec0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	81da      	strh	r2, [r3, #14]
	  }

	  // If moving only 1 step.
	  if(step == 1){
 8001ec8:	89bb      	ldrh	r3, [r7, #12]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10b      	bne.n	8001ee6 <runStepper+0x4e>
	    // Move one step...
	    data->accel_count=-1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed4:	815a      	strh	r2, [r3, #10]
		// ...in DECEL state.
	    data->state=DECEL;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	745a      	strb	r2, [r3, #17]
	    // Just a short delay so main() can act on 'running'.
	    data->step_delay=1000;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ee2:	805a      	strh	r2, [r3, #2]
 8001ee4:	e098      	b.n	8002018 <runStepper+0x180>

	    // Run Timer/Counter 1 with prescaler = 8.

	  }
	  // Only move if number of steps to move is not zero.
	  else if(step != 0)
 8001ee6:	89bb      	ldrh	r3, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8095 	beq.w	8002018 <runStepper+0x180>
	  {
	    // Refer to documentation for detailed information about these calculations.

	    // Set max speed limit, by calc min_delay to use in timer.
	    data->min_delay = A_T_x100 / speed;
 8001eee:	8a7b      	ldrh	r3, [r7, #18]
 8001ef0:	4a53      	ldr	r2, [pc, #332]	; (8002040 <runStepper+0x1a8>)
 8001ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef6:	b21a      	sxth	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	811a      	strh	r2, [r3, #8]

	    // Set accelration by calc the first (c0) step delay .
	     data->step_delay = (T0_FREQ_COR * sqrt(A_SQ / accel))/100;
 8001efc:	8a3b      	ldrh	r3, [r7, #16]
 8001efe:	4a51      	ldr	r2, [pc, #324]	; (8002044 <runStepper+0x1ac>)
 8001f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fab5 	bl	8000474 <__aeabi_ui2d>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	ec43 2b10 	vmov	d0, r2, r3
 8001f12:	f007 f8db 	bl	80090cc <sqrt>
 8001f16:	ec51 0b10 	vmov	r0, r1, d0
 8001f1a:	a347      	add	r3, pc, #284	; (adr r3, 8002038 <runStepper+0x1a0>)
 8001f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f20:	f7fe fb22 	bl	8000568 <__aeabi_dmul>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4b45      	ldr	r3, [pc, #276]	; (8002048 <runStepper+0x1b0>)
 8001f32:	f7fe fc43 	bl	80007bc <__aeabi_ddiv>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f7fe fdc3 	bl	8000ac8 <__aeabi_d2uiz>
 8001f42:	4603      	mov	r3, r0
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	805a      	strh	r2, [r3, #2]

	    // Find out after how many steps does the speed hit the max speed limit.
	    max_s_lim = (long)speed*speed/(long)(((long)A_x20000*accel)/100);
 8001f4a:	8a7b      	ldrh	r3, [r7, #18]
 8001f4c:	8a7a      	ldrh	r2, [r7, #18]
 8001f4e:	fb02 f103 	mul.w	r1, r2, r3
 8001f52:	8a3a      	ldrh	r2, [r7, #16]
 8001f54:	4613      	mov	r3, r2
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4a3b      	ldr	r2, [pc, #236]	; (800204c <runStepper+0x1b4>)
 8001f5e:	fb82 0203 	smull	r0, r2, r2, r3
 8001f62:	1152      	asrs	r2, r2, #5
 8001f64:	17db      	asrs	r3, r3, #31
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	fb91 f3f3 	sdiv	r3, r1, r3
 8001f6c:	82fb      	strh	r3, [r7, #22]
	    // If we hit max speed limit before 0,5 step it will round to 0.
	    // But in practice we need to move atleast 1 step to get any speed at all.
	    if(max_s_lim == 0){
 8001f6e:	8afb      	ldrh	r3, [r7, #22]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <runStepper+0xe0>
	      max_s_lim = 1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	82fb      	strh	r3, [r7, #22]
	    }

	    // Find out after how many steps we must start deceleration.
	    accel_lim = ((long)step*decel) / (accel+decel);
 8001f78:	89bb      	ldrh	r3, [r7, #12]
 8001f7a:	89fa      	ldrh	r2, [r7, #14]
 8001f7c:	fb02 f203 	mul.w	r2, r2, r3
 8001f80:	8a39      	ldrh	r1, [r7, #16]
 8001f82:	89fb      	ldrh	r3, [r7, #14]
 8001f84:	440b      	add	r3, r1
 8001f86:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f8a:	82bb      	strh	r3, [r7, #20]
	    // We must accelrate at least 1 step before we can start deceleration.
	    if(accel_lim == 0){
 8001f8c:	8abb      	ldrh	r3, [r7, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <runStepper+0xfe>
	      accel_lim = 1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	82bb      	strh	r3, [r7, #20]
	    }

	    // Use the limit we hit first to calc decel.
	    if(accel_lim <= max_s_lim){
 8001f96:	8aba      	ldrh	r2, [r7, #20]
 8001f98:	8afb      	ldrh	r3, [r7, #22]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d807      	bhi.n	8001fae <runStepper+0x116>
	      data->decel_val = accel_lim - step;
 8001f9e:	8aba      	ldrh	r2, [r7, #20]
 8001fa0:	89bb      	ldrh	r3, [r7, #12]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	80da      	strh	r2, [r3, #6]
 8001fac:	e00a      	b.n	8001fc4 <runStepper+0x12c>
	    }
	    else{
	      data->decel_val = -((long)max_s_lim*accel)/decel;
 8001fae:	8afb      	ldrh	r3, [r7, #22]
 8001fb0:	8a3a      	ldrh	r2, [r7, #16]
 8001fb2:	fb02 f303 	mul.w	r3, r2, r3
 8001fb6:	425a      	negs	r2, r3
 8001fb8:	89fb      	ldrh	r3, [r7, #14]
 8001fba:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fbe:	b21a      	sxth	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	80da      	strh	r2, [r3, #6]
	    }
	    // We must decelrate at least 1 step to stop.
	    if(data->decel_val == 0){
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d103      	bne.n	8001fd6 <runStepper+0x13e>
	      data->decel_val = -1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd4:	80da      	strh	r2, [r3, #6]
	    }

	    // Find step to start decleration.
	    data->decel_start = step + data->decel_val;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	89bb      	ldrh	r3, [r7, #12]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	809a      	strh	r2, [r3, #4]

	    // If the maximum speed is so low that we dont need to go via accelration state.
	    if(data->step_delay <= data->min_delay){
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	885b      	ldrh	r3, [r3, #2]
 8001fec:	461a      	mov	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	dc09      	bgt.n	800200c <runStepper+0x174>
	    	data->step_delay = data->min_delay;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	805a      	strh	r2, [r3, #2]
	    	data->state = RUN;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2203      	movs	r2, #3
 8002008:	745a      	strb	r2, [r3, #17]
 800200a:	e002      	b.n	8002012 <runStepper+0x17a>
	    }
	    else{
	    	data->state = ACCEL;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	745a      	strb	r2, [r3, #17]
	    }

	    // Reset counter.
	    data->accel_count = 0;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	815a      	strh	r2, [r3, #10]


	  }

	  TIM_MTR.Instance->ARR= data->step_delay-1;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	885b      	ldrh	r3, [r3, #2]
 800201c:	1e5a      	subs	r2, r3, #1
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <runStepper+0x1b8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
	  HAL_TIM_Base_Start_IT(&TIM_MTR);
 8002024:	480a      	ldr	r0, [pc, #40]	; (8002050 <runStepper+0x1b8>)
 8002026:	f004 fa39 	bl	800649c <HAL_TIM_Base_Start_IT>


}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	f3af 8000 	nop.w
 8002038:	00000000 	.word	0x00000000
 800203c:	40ba6800 	.word	0x40ba6800
 8002040:	00025735 	.word	0x00025735
 8002044:	01d42225 	.word	0x01d42225
 8002048:	40590000 	.word	0x40590000
 800204c:	51eb851f 	.word	0x51eb851f
 8002050:	20000444 	.word	0x20000444

08002054 <updateStepper>:

void updateStepper(speedRampData *data)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

	// Holds next delay period.
	// Remember the last step delay used when accelrating.


		printf("ok!\n");
 800205c:	484d      	ldr	r0, [pc, #308]	; (8002194 <updateStepper+0x140>)
 800205e:	f006 fb0f 	bl	8008680 <puts>
	  //OCR1A = srd.step_delay;


			TIM_MTR.Instance->ARR= data->step_delay-1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	885b      	ldrh	r3, [r3, #2]
 8002066:	1e5a      	subs	r2, r3, #1
 8002068:	4b4b      	ldr	r3, [pc, #300]	; (8002198 <updateStepper+0x144>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	62da      	str	r2, [r3, #44]	; 0x2c
			data->last_step_delay=data->step_delay;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	885a      	ldrh	r2, [r3, #2]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	829a      	strh	r2, [r3, #20]




	  switch(data->run_state) {
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b03      	cmp	r3, #3
 800207c:	f200 8085 	bhi.w	800218a <updateStepper+0x136>
 8002080:	a201      	add	r2, pc, #4	; (adr r2, 8002088 <updateStepper+0x34>)
 8002082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002086:	bf00      	nop
 8002088:	08002099 	.word	0x08002099
 800208c:	080020b3 	.word	0x080020b3
 8002090:	08002151 	.word	0x08002151
 8002094:	08002121 	.word	0x08002121
	    case STOP:
	      data->step_count=0;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	819a      	strh	r2, [r3, #12]
	      data->rest = 0;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	82da      	strh	r2, [r3, #22]
	      runMotor_f=0;
 80020a4:	4b3d      	ldr	r3, [pc, #244]	; (800219c <updateStepper+0x148>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]

	      HAL_TIM_Base_Stop_IT(&TIM_MTR);
 80020aa:	483b      	ldr	r0, [pc, #236]	; (8002198 <updateStepper+0x144>)
 80020ac:	f004 fa66 	bl	800657c <HAL_TIM_Base_Stop_IT>
	      break;
 80020b0:	e06b      	b.n	800218a <updateStepper+0x136>

	    case ACCEL:
	      step_Counter(data);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fe8c 	bl	8001dd0 <step_Counter>
	      data->accel_count++;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	b21a      	sxth	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	815a      	strh	r2, [r3, #10]

	      f_updateDelay(data);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f868 	bl	80021a0 <f_updateDelay>
	      // Chech if we should start decelration.
	      if(data->step_count >= data->decel_start) {
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80020d6:	461a      	mov	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	889b      	ldrh	r3, [r3, #4]
 80020dc:	429a      	cmp	r2, r3
 80020de:	db08      	blt.n	80020f2 <updateStepper+0x9e>
	    	  data->accel_count = data->decel_val;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	815a      	strh	r2, [r3, #10]
	        data->state = DECEL;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2202      	movs	r2, #2
 80020ee:	745a      	strb	r2, [r3, #17]
	        data->last_accel_delay = data->step_delay;
	        data->step_delay = data->step_delay;
	        data->rest = 0;
	        data->state = RUN;
	      }
	      break;
 80020f0:	e046      	b.n	8002180 <updateStepper+0x12c>
	      else if(data->step_delay <= data->min_delay) {
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	885b      	ldrh	r3, [r3, #2]
 80020f6:	461a      	mov	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020fe:	429a      	cmp	r2, r3
 8002100:	dc3e      	bgt.n	8002180 <updateStepper+0x12c>
	        data->last_accel_delay = data->step_delay;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	885a      	ldrh	r2, [r3, #2]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	825a      	strh	r2, [r3, #18]
	        data->step_delay = data->step_delay;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	885a      	ldrh	r2, [r3, #2]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	805a      	strh	r2, [r3, #2]
	        data->rest = 0;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	82da      	strh	r2, [r3, #22]
	        data->state = RUN;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2203      	movs	r2, #3
 800211c:	745a      	strb	r2, [r3, #17]
	      break;
 800211e:	e02f      	b.n	8002180 <updateStepper+0x12c>

	    case RUN:
	      step_Counter(data);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff fe55 	bl	8001dd0 <step_Counter>
	      //new_step_delay = srd.min_delay;
	      // Chech if we should start decelration.
	      if(data->step_count >= data->decel_start) {
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800212c:	461a      	mov	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	889b      	ldrh	r3, [r3, #4]
 8002132:	429a      	cmp	r2, r3
 8002134:	db26      	blt.n	8002184 <updateStepper+0x130>
	        data->accel_count = data->decel_val;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	815a      	strh	r2, [r3, #10]
	        // Start decelration with same delay as accel ended with.
	        data->step_delay= data->last_accel_delay;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	8a5a      	ldrh	r2, [r3, #18]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	805a      	strh	r2, [r3, #2]
	        data->state = DECEL;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	745a      	strb	r2, [r3, #17]
	      }
	      break;
 800214e:	e019      	b.n	8002184 <updateStepper+0x130>

	    case DECEL:
	      step_Counter(data);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fe3d 	bl	8001dd0 <step_Counter>
	      data->accel_count++;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800215c:	b29b      	uxth	r3, r3
 800215e:	3301      	adds	r3, #1
 8002160:	b29b      	uxth	r3, r3
 8002162:	b21a      	sxth	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	815a      	strh	r2, [r3, #10]
	      f_updateDelay(data);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f819 	bl	80021a0 <f_updateDelay>
	      // Check if we at last step
	      if(data->accel_count >= 0){
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002174:	2b00      	cmp	r3, #0
 8002176:	db07      	blt.n	8002188 <updateStepper+0x134>
	        data->state = STOP;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	745a      	strb	r2, [r3, #17]
	      }
	      break;
 800217e:	e003      	b.n	8002188 <updateStepper+0x134>
	      break;
 8002180:	bf00      	nop
 8002182:	e002      	b.n	800218a <updateStepper+0x136>
	      break;
 8002184:	bf00      	nop
 8002186:	e000      	b.n	800218a <updateStepper+0x136>
	      break;
 8002188:	bf00      	nop
	  }


}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	080092c8 	.word	0x080092c8
 8002198:	20000444 	.word	0x20000444
 800219c:	200000c8 	.word	0x200000c8

080021a0 <f_updateDelay>:


void f_updateDelay(speedRampData *data)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	uint16_t new_step_delay;
	uint16_t new_rest;

	new_step_delay = (((2 * (long)data->step_delay) + data->rest)/(4 * data->accel_count + 1));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	885b      	ldrh	r3, [r3, #2]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	8ad2      	ldrh	r2, [r2, #22]
 80021b2:	441a      	add	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	3301      	adds	r3, #1
 80021be:	fb92 f3f3 	sdiv	r3, r2, r3
 80021c2:	81fb      	strh	r3, [r7, #14]
	new_step_delay = data->step_delay- new_step_delay;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	885a      	ldrh	r2, [r3, #2]
 80021c8:	89fb      	ldrh	r3, [r7, #14]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	81fb      	strh	r3, [r7, #14]
	new_rest = ((2 * (long)data->step_delay)+data->rest)%(4 * data->accel_count + 1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	885b      	ldrh	r3, [r3, #2]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	8ad2      	ldrh	r2, [r2, #22]
 80021d8:	4413      	add	r3, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80021e0:	0092      	lsls	r2, r2, #2
 80021e2:	3201      	adds	r2, #1
 80021e4:	fb93 f1f2 	sdiv	r1, r3, r2
 80021e8:	fb02 f201 	mul.w	r2, r2, r1
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	81bb      	strh	r3, [r7, #12]

	data->step_delay= new_step_delay;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	89fa      	ldrh	r2, [r7, #14]
 80021f4:	805a      	strh	r2, [r3, #2]
	data->rest = new_rest;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	89ba      	ldrh	r2, [r7, #12]
 80021fa:	82da      	strh	r2, [r3, #22]

}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <HAL_MspInit+0x4c>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	4a0f      	ldr	r2, [pc, #60]	; (8002254 <HAL_MspInit+0x4c>)
 8002218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800221c:	6453      	str	r3, [r2, #68]	; 0x44
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_MspInit+0x4c>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_MspInit+0x4c>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4a08      	ldr	r2, [pc, #32]	; (8002254 <HAL_MspInit+0x4c>)
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002238:	6413      	str	r3, [r2, #64]	; 0x40
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_MspInit+0x4c>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800

08002258 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08c      	sub	sp, #48	; 0x30
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002268:	2200      	movs	r2, #0
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	2036      	movs	r0, #54	; 0x36
 800226e:	f000 fcb7 	bl	8002be0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002272:	2036      	movs	r0, #54	; 0x36
 8002274:	f000 fcd0 	bl	8002c18 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <HAL_InitTick+0xa4>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	4a1e      	ldr	r2, [pc, #120]	; (80022fc <HAL_InitTick+0xa4>)
 8002282:	f043 0310 	orr.w	r3, r3, #16
 8002286:	6413      	str	r3, [r2, #64]	; 0x40
 8002288:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <HAL_InitTick+0xa4>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002294:	f107 0210 	add.w	r2, r7, #16
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f003 fe00 	bl	8005ea4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80022a4:	f003 fdd6 	bl	8005e54 <HAL_RCC_GetPCLK1Freq>
 80022a8:	4603      	mov	r3, r0
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	4a13      	ldr	r2, [pc, #76]	; (8002300 <HAL_InitTick+0xa8>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	0c9b      	lsrs	r3, r3, #18
 80022b8:	3b01      	subs	r3, #1
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_InitTick+0xac>)
 80022be:	4a12      	ldr	r2, [pc, #72]	; (8002308 <HAL_InitTick+0xb0>)
 80022c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <HAL_InitTick+0xac>)
 80022c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022c8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80022ca:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <HAL_InitTick+0xac>)
 80022cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_InitTick+0xac>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_InitTick+0xac>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80022dc:	4809      	ldr	r0, [pc, #36]	; (8002304 <HAL_InitTick+0xac>)
 80022de:	f004 f88e 	bl	80063fe <HAL_TIM_Base_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d104      	bne.n	80022f2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80022e8:	4806      	ldr	r0, [pc, #24]	; (8002304 <HAL_InitTick+0xac>)
 80022ea:	f004 f8d7 	bl	800649c <HAL_TIM_Base_Start_IT>
 80022ee:	4603      	mov	r3, r0
 80022f0:	e000      	b.n	80022f4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3730      	adds	r7, #48	; 0x30
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	431bde83 	.word	0x431bde83
 8002304:	200003b4 	.word	0x200003b4
 8002308:	40001000 	.word	0x40001000

0800230c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002310:	e7fe      	b.n	8002310 <NMI_Handler+0x4>

08002312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002316:	e7fe      	b.n	8002316 <HardFault_Handler+0x4>

08002318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800231c:	e7fe      	b.n	800231c <MemManage_Handler+0x4>

0800231e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <BusFault_Handler+0x4>

08002324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <UsageFault_Handler+0x4>

0800232a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002366:	2001      	movs	r0, #1
 8002368:	f001 f8de 	bl	8003528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}

08002370 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <UART5_IRQHandler+0x10>)
 8002376:	f004 fee5 	bl	8007144 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000048c 	.word	0x2000048c

08002384 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <TIM6_DAC_IRQHandler+0x10>)
 800238a:	f004 f926 	bl	80065da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200003b4 	.word	0x200003b4

08002398 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */



  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <TIM7_IRQHandler+0x10>)
 800239e:	f004 f91c 	bl	80065da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000444 	.word	0x20000444

080023ac <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <OTG_HS_IRQHandler+0x10>)
 80023b2:	f001 f933 	bl	800361c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000514 	.word	0x20000514

080023c0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <LTDC_IRQHandler+0x10>)
 80023c6:	f002 fe61 	bl	800508c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200001ac 	.word	0x200001ac

080023d4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <DMA2D_IRQHandler+0x10>)
 80023da:	f000 fd22 	bl	8002e22 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200000e4 	.word	0x200000e4

080023e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f0:	4a14      	ldr	r2, [pc, #80]	; (8002444 <_sbrk+0x5c>)
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <_sbrk+0x60>)
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <_sbrk+0x64>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <_sbrk+0x64>)
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <_sbrk+0x68>)
 8002408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <_sbrk+0x64>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	429a      	cmp	r2, r3
 8002416:	d207      	bcs.n	8002428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002418:	f006 f892 	bl	8008540 <__errno>
 800241c:	4603      	mov	r3, r0
 800241e:	220c      	movs	r2, #12
 8002420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002422:	f04f 33ff 	mov.w	r3, #4294967295
 8002426:	e009      	b.n	800243c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <_sbrk+0x64>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	4a05      	ldr	r2, [pc, #20]	; (800244c <_sbrk+0x64>)
 8002438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243a:	68fb      	ldr	r3, [r7, #12]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20030000 	.word	0x20030000
 8002448:	00000400 	.word	0x00000400
 800244c:	200000bc 	.word	0x200000bc
 8002450:	20000830 	.word	0x20000830

08002454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <SystemInit+0x20>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245e:	4a05      	ldr	r2, [pc, #20]	; (8002474 <SystemInit+0x20>)
 8002460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247e:	f107 0308 	add.w	r3, r7, #8
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248c:	463b      	mov	r3, r7
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002494:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <MX_TIM1_Init+0x98>)
 8002496:	4a1f      	ldr	r2, [pc, #124]	; (8002514 <MX_TIM1_Init+0x9c>)
 8002498:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800249a:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <MX_TIM1_Init+0x98>)
 800249c:	2200      	movs	r2, #0
 800249e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a0:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <MX_TIM1_Init+0x98>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <MX_TIM1_Init+0x98>)
 80024a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <MX_TIM1_Init+0x98>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024b4:	4b16      	ldr	r3, [pc, #88]	; (8002510 <MX_TIM1_Init+0x98>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <MX_TIM1_Init+0x98>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024c0:	4813      	ldr	r0, [pc, #76]	; (8002510 <MX_TIM1_Init+0x98>)
 80024c2:	f003 ff9c 	bl	80063fe <HAL_TIM_Base_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80024cc:	f7ff fad6 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024d6:	f107 0308 	add.w	r3, r7, #8
 80024da:	4619      	mov	r1, r3
 80024dc:	480c      	ldr	r0, [pc, #48]	; (8002510 <MX_TIM1_Init+0x98>)
 80024de:	f004 f984 	bl	80067ea <HAL_TIM_ConfigClockSource>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80024e8:	f7ff fac8 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ec:	2300      	movs	r3, #0
 80024ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024f4:	463b      	mov	r3, r7
 80024f6:	4619      	mov	r1, r3
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <MX_TIM1_Init+0x98>)
 80024fa:	f004 fb9d 	bl	8006c38 <HAL_TIMEx_MasterConfigSynchronization>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002504:	f7ff faba 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	200003fc 	.word	0x200003fc
 8002514:	40010000 	.word	0x40010000

08002518 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251e:	463b      	mov	r3, r7
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002526:	4b14      	ldr	r3, [pc, #80]	; (8002578 <MX_TIM7_Init+0x60>)
 8002528:	4a14      	ldr	r2, [pc, #80]	; (800257c <MX_TIM7_Init+0x64>)
 800252a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <MX_TIM7_Init+0x60>)
 800252e:	2247      	movs	r2, #71	; 0x47
 8002530:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <MX_TIM7_Init+0x60>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <MX_TIM7_Init+0x60>)
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <MX_TIM7_Init+0x60>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002544:	480c      	ldr	r0, [pc, #48]	; (8002578 <MX_TIM7_Init+0x60>)
 8002546:	f003 ff5a 	bl	80063fe <HAL_TIM_Base_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002550:	f7ff fa94 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002554:	2300      	movs	r3, #0
 8002556:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002558:	2300      	movs	r3, #0
 800255a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800255c:	463b      	mov	r3, r7
 800255e:	4619      	mov	r1, r3
 8002560:	4805      	ldr	r0, [pc, #20]	; (8002578 <MX_TIM7_Init+0x60>)
 8002562:	f004 fb69 	bl	8006c38 <HAL_TIMEx_MasterConfigSynchronization>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 800256c:	f7ff fa86 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000444 	.word	0x20000444
 800257c:	40001400 	.word	0x40001400

08002580 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a18      	ldr	r2, [pc, #96]	; (80025f0 <HAL_TIM_Base_MspInit+0x70>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d10e      	bne.n	80025b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <HAL_TIM_Base_MspInit+0x74>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <HAL_TIM_Base_MspInit+0x74>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6453      	str	r3, [r2, #68]	; 0x44
 80025a2:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <HAL_TIM_Base_MspInit+0x74>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80025ae:	e01a      	b.n	80025e6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <HAL_TIM_Base_MspInit+0x78>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d115      	bne.n	80025e6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <HAL_TIM_Base_MspInit+0x74>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <HAL_TIM_Base_MspInit+0x74>)
 80025c4:	f043 0320 	orr.w	r3, r3, #32
 80025c8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_TIM_Base_MspInit+0x74>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2100      	movs	r1, #0
 80025da:	2037      	movs	r0, #55	; 0x37
 80025dc:	f000 fb00 	bl	8002be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80025e0:	2037      	movs	r0, #55	; 0x37
 80025e2:	f000 fb19 	bl	8002c18 <HAL_NVIC_EnableIRQ>
}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40010000 	.word	0x40010000
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40001400 	.word	0x40001400

080025fc <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <MX_UART5_Init+0x4c>)
 8002602:	4a12      	ldr	r2, [pc, #72]	; (800264c <MX_UART5_Init+0x50>)
 8002604:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <MX_UART5_Init+0x4c>)
 8002608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800260c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <MX_UART5_Init+0x4c>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <MX_UART5_Init+0x4c>)
 8002616:	2200      	movs	r2, #0
 8002618:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <MX_UART5_Init+0x4c>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <MX_UART5_Init+0x4c>)
 8002622:	220c      	movs	r2, #12
 8002624:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <MX_UART5_Init+0x4c>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <MX_UART5_Init+0x4c>)
 800262e:	2200      	movs	r2, #0
 8002630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002632:	4805      	ldr	r0, [pc, #20]	; (8002648 <MX_UART5_Init+0x4c>)
 8002634:	f004 fb90 	bl	8006d58 <HAL_UART_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800263e:	f7ff fa1d 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	2000048c 	.word	0x2000048c
 800264c:	40005000 	.word	0x40005000

08002650 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <MX_USART1_UART_Init+0x4c>)
 8002656:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <MX_USART1_UART_Init+0x50>)
 8002658:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <MX_USART1_UART_Init+0x4c>)
 800265c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002660:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <MX_USART1_UART_Init+0x4c>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <MX_USART1_UART_Init+0x4c>)
 800266a:	2200      	movs	r2, #0
 800266c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <MX_USART1_UART_Init+0x4c>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <MX_USART1_UART_Init+0x4c>)
 8002676:	220c      	movs	r2, #12
 8002678:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <MX_USART1_UART_Init+0x4c>)
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <MX_USART1_UART_Init+0x4c>)
 8002682:	2200      	movs	r2, #0
 8002684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002686:	4805      	ldr	r0, [pc, #20]	; (800269c <MX_USART1_UART_Init+0x4c>)
 8002688:	f004 fb66 	bl	8006d58 <HAL_UART_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002692:	f7ff f9f3 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	200004d0 	.word	0x200004d0
 80026a0:	40011000 	.word	0x40011000

080026a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08c      	sub	sp, #48	; 0x30
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 031c 	add.w	r3, r7, #28
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a46      	ldr	r2, [pc, #280]	; (80027dc <HAL_UART_MspInit+0x138>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d153      	bne.n	800276e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	4b45      	ldr	r3, [pc, #276]	; (80027e0 <HAL_UART_MspInit+0x13c>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	4a44      	ldr	r2, [pc, #272]	; (80027e0 <HAL_UART_MspInit+0x13c>)
 80026d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d4:	6413      	str	r3, [r2, #64]	; 0x40
 80026d6:	4b42      	ldr	r3, [pc, #264]	; (80027e0 <HAL_UART_MspInit+0x13c>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	4b3e      	ldr	r3, [pc, #248]	; (80027e0 <HAL_UART_MspInit+0x13c>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a3d      	ldr	r2, [pc, #244]	; (80027e0 <HAL_UART_MspInit+0x13c>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <HAL_UART_MspInit+0x13c>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <HAL_UART_MspInit+0x13c>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a36      	ldr	r2, [pc, #216]	; (80027e0 <HAL_UART_MspInit+0x13c>)
 8002708:	f043 0308 	orr.w	r3, r3, #8
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_UART_MspInit+0x13c>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800271a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800271e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002724:	2301      	movs	r3, #1
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002728:	2303      	movs	r3, #3
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800272c:	2308      	movs	r3, #8
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002730:	f107 031c 	add.w	r3, r7, #28
 8002734:	4619      	mov	r1, r3
 8002736:	482b      	ldr	r0, [pc, #172]	; (80027e4 <HAL_UART_MspInit+0x140>)
 8002738:	f000 fd16 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800273c:	2304      	movs	r3, #4
 800273e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002740:	2302      	movs	r3, #2
 8002742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002744:	2301      	movs	r3, #1
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002748:	2303      	movs	r3, #3
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800274c:	2308      	movs	r3, #8
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002750:	f107 031c 	add.w	r3, r7, #28
 8002754:	4619      	mov	r1, r3
 8002756:	4824      	ldr	r0, [pc, #144]	; (80027e8 <HAL_UART_MspInit+0x144>)
 8002758:	f000 fd06 	bl	8003168 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	2100      	movs	r1, #0
 8002760:	2035      	movs	r0, #53	; 0x35
 8002762:	f000 fa3d 	bl	8002be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002766:	2035      	movs	r0, #53	; 0x35
 8002768:	f000 fa56 	bl	8002c18 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800276c:	e031      	b.n	80027d2 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1e      	ldr	r2, [pc, #120]	; (80027ec <HAL_UART_MspInit+0x148>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d12c      	bne.n	80027d2 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_UART_MspInit+0x13c>)
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <HAL_UART_MspInit+0x13c>)
 8002782:	f043 0310 	orr.w	r3, r3, #16
 8002786:	6453      	str	r3, [r2, #68]	; 0x44
 8002788:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_UART_MspInit+0x13c>)
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_UART_MspInit+0x13c>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	4a10      	ldr	r2, [pc, #64]	; (80027e0 <HAL_UART_MspInit+0x13c>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6313      	str	r3, [r2, #48]	; 0x30
 80027a4:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <HAL_UART_MspInit+0x13c>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80027b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027c2:	2307      	movs	r3, #7
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c6:	f107 031c 	add.w	r3, r7, #28
 80027ca:	4619      	mov	r1, r3
 80027cc:	4808      	ldr	r0, [pc, #32]	; (80027f0 <HAL_UART_MspInit+0x14c>)
 80027ce:	f000 fccb 	bl	8003168 <HAL_GPIO_Init>
}
 80027d2:	bf00      	nop
 80027d4:	3730      	adds	r7, #48	; 0x30
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40005000 	.word	0x40005000
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020800 	.word	0x40020800
 80027e8:	40020c00 	.word	0x40020c00
 80027ec:	40011000 	.word	0x40011000
 80027f0:	40020000 	.word	0x40020000

080027f4 <HAL_UART_TxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);

	enQueue(&Ser_Queue, rec_buff[0]);
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <HAL_UART_RxCpltCallback+0x28>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	4619      	mov	r1, r3
 8002816:	4807      	ldr	r0, [pc, #28]	; (8002834 <HAL_UART_RxCpltCallback+0x2c>)
 8002818:	f7ff f968 	bl	8001aec <enQueue>
	HAL_UART_Receive_IT(&huart5, rec_buff, 1);
 800281c:	2201      	movs	r2, #1
 800281e:	4904      	ldr	r1, [pc, #16]	; (8002830 <HAL_UART_RxCpltCallback+0x28>)
 8002820:	4805      	ldr	r0, [pc, #20]	; (8002838 <HAL_UART_RxCpltCallback+0x30>)
 8002822:	f004 fc5f 	bl	80070e4 <HAL_UART_Receive_IT>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	200000cc 	.word	0x200000cc
 8002834:	20000254 	.word	0x20000254
 8002838:	2000048c 	.word	0x2000048c

0800283c <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002842:	4a13      	ldr	r2, [pc, #76]	; (8002890 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8002844:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002848:	220c      	movs	r2, #12
 800284a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <MX_USB_OTG_HS_HCD_Init+0x50>)
 800284e:	2201      	movs	r2, #1
 8002850:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <MX_USB_OTG_HS_HCD_Init+0x50>)
 800285a:	2202      	movs	r2, #2
 800285c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002860:	2200      	movs	r2, #0
 8002862:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002866:	2200      	movs	r2, #0
 8002868:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <MX_USB_OTG_HS_HCD_Init+0x50>)
 800286c:	2200      	movs	r2, #0
 800286e:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002872:	2200      	movs	r2, #0
 8002874:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8002876:	4805      	ldr	r0, [pc, #20]	; (800288c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002878:	f000 fe6e 	bl	8003558 <HAL_HCD_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8002882:	f7ff f8fb 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000514 	.word	0x20000514
 8002890:	40040000 	.word	0x40040000

08002894 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a24      	ldr	r2, [pc, #144]	; (8002944 <HAL_HCD_MspInit+0xb0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d141      	bne.n	800293a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	4b23      	ldr	r3, [pc, #140]	; (8002948 <HAL_HCD_MspInit+0xb4>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a22      	ldr	r2, [pc, #136]	; (8002948 <HAL_HCD_MspInit+0xb4>)
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <HAL_HCD_MspInit+0xb4>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80028d2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80028d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80028e4:	230c      	movs	r3, #12
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4619      	mov	r1, r3
 80028ee:	4817      	ldr	r0, [pc, #92]	; (800294c <HAL_HCD_MspInit+0xb8>)
 80028f0:	f000 fc3a 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80028f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	4619      	mov	r1, r3
 8002908:	4810      	ldr	r0, [pc, #64]	; (800294c <HAL_HCD_MspInit+0xb8>)
 800290a:	f000 fc2d 	bl	8003168 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <HAL_HCD_MspInit+0xb4>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a0c      	ldr	r2, [pc, #48]	; (8002948 <HAL_HCD_MspInit+0xb4>)
 8002918:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_HCD_MspInit+0xb4>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	204d      	movs	r0, #77	; 0x4d
 8002930:	f000 f956 	bl	8002be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8002934:	204d      	movs	r0, #77	; 0x4d
 8002936:	f000 f96f 	bl	8002c18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800293a:	bf00      	nop
 800293c:	3728      	adds	r7, #40	; 0x28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40040000 	.word	0x40040000
 8002948:	40023800 	.word	0x40023800
 800294c:	40020400 	.word	0x40020400

08002950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002988 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002954:	480d      	ldr	r0, [pc, #52]	; (800298c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002956:	490e      	ldr	r1, [pc, #56]	; (8002990 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002958:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800295a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800295c:	e002      	b.n	8002964 <LoopCopyDataInit>

0800295e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800295e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002962:	3304      	adds	r3, #4

08002964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002968:	d3f9      	bcc.n	800295e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800296a:	4a0b      	ldr	r2, [pc, #44]	; (8002998 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800296c:	4c0b      	ldr	r4, [pc, #44]	; (800299c <LoopFillZerobss+0x26>)
  movs r3, #0
 800296e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002970:	e001      	b.n	8002976 <LoopFillZerobss>

08002972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002974:	3204      	adds	r2, #4

08002976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002978:	d3fb      	bcc.n	8002972 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800297a:	f7ff fd6b 	bl	8002454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800297e:	f005 fde5 	bl	800854c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002982:	f7fe ff49 	bl	8001818 <main>
  bx  lr    
 8002986:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002988:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800298c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002990:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002994:	08009358 	.word	0x08009358
  ldr r2, =_sbss
 8002998:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800299c:	2000082c 	.word	0x2000082c

080029a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029a0:	e7fe      	b.n	80029a0 <ADC_IRQHandler>
	...

080029a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_Init+0x40>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <HAL_Init+0x40>)
 80029ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_Init+0x40>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <HAL_Init+0x40>)
 80029ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <HAL_Init+0x40>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <HAL_Init+0x40>)
 80029c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029cc:	2003      	movs	r0, #3
 80029ce:	f000 f8fc 	bl	8002bca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029d2:	2000      	movs	r0, #0
 80029d4:	f7ff fc40 	bl	8002258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029d8:	f7ff fc16 	bl	8002208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40023c00 	.word	0x40023c00

080029e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_IncTick+0x20>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	461a      	mov	r2, r3
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_IncTick+0x24>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4413      	add	r3, r2
 80029f8:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <HAL_IncTick+0x24>)
 80029fa:	6013      	str	r3, [r2, #0]
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	20000010 	.word	0x20000010
 8002a0c:	20000818 	.word	0x20000818

08002a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return uwTick;
 8002a14:	4b03      	ldr	r3, [pc, #12]	; (8002a24 <HAL_GetTick+0x14>)
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000818 	.word	0x20000818

08002a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f7ff ffee 	bl	8002a10 <HAL_GetTick>
 8002a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d005      	beq.n	8002a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <HAL_Delay+0x44>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a4e:	bf00      	nop
 8002a50:	f7ff ffde 	bl	8002a10 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d8f7      	bhi.n	8002a50 <HAL_Delay+0x28>
  {
  }
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000010 	.word	0x20000010

08002a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa2:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	60d3      	str	r3, [r2, #12]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	0a1b      	lsrs	r3, r3, #8
 8002ac2:	f003 0307 	and.w	r3, r3, #7
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	db0b      	blt.n	8002afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	f003 021f 	and.w	r2, r3, #31
 8002aec:	4907      	ldr	r1, [pc, #28]	; (8002b0c <__NVIC_EnableIRQ+0x38>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2001      	movs	r0, #1
 8002af6:	fa00 f202 	lsl.w	r2, r0, r2
 8002afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db0a      	blt.n	8002b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	490c      	ldr	r1, [pc, #48]	; (8002b5c <__NVIC_SetPriority+0x4c>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	0112      	lsls	r2, r2, #4
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	440b      	add	r3, r1
 8002b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b38:	e00a      	b.n	8002b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4908      	ldr	r1, [pc, #32]	; (8002b60 <__NVIC_SetPriority+0x50>)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	3b04      	subs	r3, #4
 8002b48:	0112      	lsls	r2, r2, #4
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	761a      	strb	r2, [r3, #24]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000e100 	.word	0xe000e100
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f1c3 0307 	rsb	r3, r3, #7
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	bf28      	it	cs
 8002b82:	2304      	movcs	r3, #4
 8002b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d902      	bls.n	8002b94 <NVIC_EncodePriority+0x30>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3b03      	subs	r3, #3
 8002b92:	e000      	b.n	8002b96 <NVIC_EncodePriority+0x32>
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	43d9      	mvns	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	4313      	orrs	r3, r2
         );
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff ff4c 	bl	8002a70 <__NVIC_SetPriorityGrouping>
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf2:	f7ff ff61 	bl	8002ab8 <__NVIC_GetPriorityGrouping>
 8002bf6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	6978      	ldr	r0, [r7, #20]
 8002bfe:	f7ff ffb1 	bl	8002b64 <NVIC_EncodePriority>
 8002c02:	4602      	mov	r2, r0
 8002c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff ff80 	bl	8002b10 <__NVIC_SetPriority>
}
 8002c10:	bf00      	nop
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff ff54 	bl	8002ad4 <__NVIC_EnableIRQ>
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e00e      	b.n	8002c64 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	795b      	ldrb	r3, [r3, #5]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d105      	bne.n	8002c5c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe f8e6 	bl	8000e28 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c7a:	f7ff fec9 	bl	8002a10 <HAL_GetTick>
 8002c7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d008      	beq.n	8002c9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2280      	movs	r2, #128	; 0x80
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e052      	b.n	8002d44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0216 	bic.w	r2, r2, #22
 8002cac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695a      	ldr	r2, [r3, #20]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cbc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d103      	bne.n	8002cce <HAL_DMA_Abort+0x62>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d007      	beq.n	8002cde <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0208 	bic.w	r2, r2, #8
 8002cdc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cee:	e013      	b.n	8002d18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cf0:	f7ff fe8e 	bl	8002a10 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b05      	cmp	r3, #5
 8002cfc:	d90c      	bls.n	8002d18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2220      	movs	r2, #32
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2203      	movs	r2, #3
 8002d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e015      	b.n	8002d44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1e4      	bne.n	8002cf0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2a:	223f      	movs	r2, #63	; 0x3f
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d004      	beq.n	8002d6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2280      	movs	r2, #128	; 0x80
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00c      	b.n	8002d84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2205      	movs	r2, #5
 8002d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0201 	bic.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e03b      	b.n	8002e1a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe f88a 	bl	8000ed0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de0:	f023 0107 	bic.w	r1, r3, #7
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002dfa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68d1      	ldr	r1, [r2, #12]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	430b      	orrs	r3, r1
 8002e08:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d026      	beq.n	8002e92 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d021      	beq.n	8002e92 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e5c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e62:	f043 0201 	orr.w	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2204      	movs	r2, #4
 8002e76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d026      	beq.n	8002eea <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d021      	beq.n	8002eea <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eb4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	f043 0202 	orr.w	r2, r3, #2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2204      	movs	r2, #4
 8002ece:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d026      	beq.n	8002f42 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d021      	beq.n	8002f42 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f0c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2208      	movs	r2, #8
 8002f14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1a:	f043 0204 	orr.w	r2, r3, #4
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2204      	movs	r2, #4
 8002f26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00e      	beq.n	8002f74 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f64:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f853 	bl	800301a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d024      	beq.n	8002fc8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01f      	beq.n	8002fc8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f96:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d01f      	beq.n	8003012 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01a      	beq.n	8003012 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fea:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f80e 	bl	800302e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_DMA2D_ConfigLayer+0x20>
 8003060:	2302      	movs	r3, #2
 8003062:	e079      	b.n	8003158 <HAL_DMA2D_ConfigLayer+0x114>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	3318      	adds	r3, #24
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	041b      	lsls	r3, r3, #16
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800308e:	4b35      	ldr	r3, [pc, #212]	; (8003164 <HAL_DMA2D_ConfigLayer+0x120>)
 8003090:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b0a      	cmp	r3, #10
 8003098:	d003      	beq.n	80030a2 <HAL_DMA2D_ConfigLayer+0x5e>
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b09      	cmp	r3, #9
 80030a0:	d107      	bne.n	80030b2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e005      	b.n	80030be <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	061b      	lsls	r3, r3, #24
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d120      	bne.n	8003106 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	ea02 0103 	and.w	r1, r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	430a      	orrs	r2, r1
 80030da:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b0a      	cmp	r3, #10
 80030ec:	d003      	beq.n	80030f6 <HAL_DMA2D_ConfigLayer+0xb2>
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b09      	cmp	r3, #9
 80030f4:	d127      	bne.n	8003146 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
 8003104:	e01f      	b.n	8003146 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	43db      	mvns	r3, r3
 8003110:	ea02 0103 	and.w	r1, r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	430a      	orrs	r2, r1
 800311c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b0a      	cmp	r3, #10
 800312e:	d003      	beq.n	8003138 <HAL_DMA2D_ConfigLayer+0xf4>
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b09      	cmp	r3, #9
 8003136:	d106      	bne.n	8003146 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003144:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	ff03000f 	.word	0xff03000f

08003168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	e177      	b.n	8003474 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003184:	2201      	movs	r2, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4013      	ands	r3, r2
 8003196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	429a      	cmp	r2, r3
 800319e:	f040 8166 	bne.w	800346e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d005      	beq.n	80031ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d130      	bne.n	800321c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	2203      	movs	r2, #3
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031f0:	2201      	movs	r2, #1
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 0201 	and.w	r2, r3, #1
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	2b03      	cmp	r3, #3
 8003226:	d017      	beq.n	8003258 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d123      	bne.n	80032ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	08da      	lsrs	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3208      	adds	r2, #8
 800326c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	220f      	movs	r2, #15
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	08da      	lsrs	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3208      	adds	r2, #8
 80032a6:	69b9      	ldr	r1, [r7, #24]
 80032a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2203      	movs	r2, #3
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0203 	and.w	r2, r3, #3
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80c0 	beq.w	800346e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	4b66      	ldr	r3, [pc, #408]	; (800348c <HAL_GPIO_Init+0x324>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	4a65      	ldr	r2, [pc, #404]	; (800348c <HAL_GPIO_Init+0x324>)
 80032f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032fc:	6453      	str	r3, [r2, #68]	; 0x44
 80032fe:	4b63      	ldr	r3, [pc, #396]	; (800348c <HAL_GPIO_Init+0x324>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800330a:	4a61      	ldr	r2, [pc, #388]	; (8003490 <HAL_GPIO_Init+0x328>)
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	3302      	adds	r3, #2
 8003312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	220f      	movs	r2, #15
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a58      	ldr	r2, [pc, #352]	; (8003494 <HAL_GPIO_Init+0x32c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d037      	beq.n	80033a6 <HAL_GPIO_Init+0x23e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a57      	ldr	r2, [pc, #348]	; (8003498 <HAL_GPIO_Init+0x330>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d031      	beq.n	80033a2 <HAL_GPIO_Init+0x23a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a56      	ldr	r2, [pc, #344]	; (800349c <HAL_GPIO_Init+0x334>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d02b      	beq.n	800339e <HAL_GPIO_Init+0x236>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a55      	ldr	r2, [pc, #340]	; (80034a0 <HAL_GPIO_Init+0x338>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d025      	beq.n	800339a <HAL_GPIO_Init+0x232>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a54      	ldr	r2, [pc, #336]	; (80034a4 <HAL_GPIO_Init+0x33c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d01f      	beq.n	8003396 <HAL_GPIO_Init+0x22e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a53      	ldr	r2, [pc, #332]	; (80034a8 <HAL_GPIO_Init+0x340>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d019      	beq.n	8003392 <HAL_GPIO_Init+0x22a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a52      	ldr	r2, [pc, #328]	; (80034ac <HAL_GPIO_Init+0x344>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_GPIO_Init+0x226>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a51      	ldr	r2, [pc, #324]	; (80034b0 <HAL_GPIO_Init+0x348>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00d      	beq.n	800338a <HAL_GPIO_Init+0x222>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a50      	ldr	r2, [pc, #320]	; (80034b4 <HAL_GPIO_Init+0x34c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d007      	beq.n	8003386 <HAL_GPIO_Init+0x21e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a4f      	ldr	r2, [pc, #316]	; (80034b8 <HAL_GPIO_Init+0x350>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d101      	bne.n	8003382 <HAL_GPIO_Init+0x21a>
 800337e:	2309      	movs	r3, #9
 8003380:	e012      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 8003382:	230a      	movs	r3, #10
 8003384:	e010      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 8003386:	2308      	movs	r3, #8
 8003388:	e00e      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 800338a:	2307      	movs	r3, #7
 800338c:	e00c      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 800338e:	2306      	movs	r3, #6
 8003390:	e00a      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 8003392:	2305      	movs	r3, #5
 8003394:	e008      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 8003396:	2304      	movs	r3, #4
 8003398:	e006      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 800339a:	2303      	movs	r3, #3
 800339c:	e004      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 800339e:	2302      	movs	r3, #2
 80033a0:	e002      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 80033a6:	2300      	movs	r3, #0
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	f002 0203 	and.w	r2, r2, #3
 80033ae:	0092      	lsls	r2, r2, #2
 80033b0:	4093      	lsls	r3, r2
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033b8:	4935      	ldr	r1, [pc, #212]	; (8003490 <HAL_GPIO_Init+0x328>)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	3302      	adds	r3, #2
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c6:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <HAL_GPIO_Init+0x354>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033ea:	4a34      	ldr	r2, [pc, #208]	; (80034bc <HAL_GPIO_Init+0x354>)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033f0:	4b32      	ldr	r3, [pc, #200]	; (80034bc <HAL_GPIO_Init+0x354>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003414:	4a29      	ldr	r2, [pc, #164]	; (80034bc <HAL_GPIO_Init+0x354>)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800341a:	4b28      	ldr	r3, [pc, #160]	; (80034bc <HAL_GPIO_Init+0x354>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800343e:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <HAL_GPIO_Init+0x354>)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003444:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_GPIO_Init+0x354>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003468:	4a14      	ldr	r2, [pc, #80]	; (80034bc <HAL_GPIO_Init+0x354>)
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3301      	adds	r3, #1
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2b0f      	cmp	r3, #15
 8003478:	f67f ae84 	bls.w	8003184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800347c:	bf00      	nop
 800347e:	bf00      	nop
 8003480:	3724      	adds	r7, #36	; 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	40013800 	.word	0x40013800
 8003494:	40020000 	.word	0x40020000
 8003498:	40020400 	.word	0x40020400
 800349c:	40020800 	.word	0x40020800
 80034a0:	40020c00 	.word	0x40020c00
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40021400 	.word	0x40021400
 80034ac:	40021800 	.word	0x40021800
 80034b0:	40021c00 	.word	0x40021c00
 80034b4:	40022000 	.word	0x40022000
 80034b8:	40022400 	.word	0x40022400
 80034bc:	40013c00 	.word	0x40013c00

080034c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
 80034cc:	4613      	mov	r3, r2
 80034ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034d0:	787b      	ldrb	r3, [r7, #1]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034d6:	887a      	ldrh	r2, [r7, #2]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034dc:	e003      	b.n	80034e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034de:	887b      	ldrh	r3, [r7, #2]
 80034e0:	041a      	lsls	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	619a      	str	r2, [r3, #24]
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	460b      	mov	r3, r1
 80034fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003504:	887a      	ldrh	r2, [r7, #2]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4013      	ands	r3, r2
 800350a:	041a      	lsls	r2, r3, #16
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	43d9      	mvns	r1, r3
 8003510:	887b      	ldrh	r3, [r7, #2]
 8003512:	400b      	ands	r3, r1
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	619a      	str	r2, [r3, #24]
}
 800351a:	bf00      	nop
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003532:	4b08      	ldr	r3, [pc, #32]	; (8003554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	4013      	ands	r3, r2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d006      	beq.n	800354c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800353e:	4a05      	ldr	r2, [pc, #20]	; (8003554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fd ff10 	bl	800136c <HAL_GPIO_EXTI_Callback>
  }
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40013c00 	.word	0x40013c00

08003558 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800355a:	b08f      	sub	sp, #60	; 0x3c
 800355c:	af0a      	add	r7, sp, #40	; 0x28
 800355e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e054      	b.n	8003614 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d106      	bne.n	800358a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff f985 	bl	8002894 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2203      	movs	r2, #3
 800358e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f004 fc6c 	bl	8007e86 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	687e      	ldr	r6, [r7, #4]
 80035b6:	466d      	mov	r5, sp
 80035b8:	f106 0410 	add.w	r4, r6, #16
 80035bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80035cc:	1d33      	adds	r3, r6, #4
 80035ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035d0:	6838      	ldr	r0, [r7, #0]
 80035d2:	f004 fbf7 	bl	8007dc4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2101      	movs	r1, #1
 80035dc:	4618      	mov	r0, r3
 80035de:	f004 fc63 	bl	8007ea8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	687e      	ldr	r6, [r7, #4]
 80035ea:	466d      	mov	r5, sp
 80035ec:	f106 0410 	add.w	r4, r6, #16
 80035f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003600:	1d33      	adds	r3, r6, #4
 8003602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003604:	6838      	ldr	r0, [r7, #0]
 8003606:	f004 fd3f 	bl	8008088 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800361c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f004 fce6 	bl	8008004 <USB_GetMode>
 8003638:	4603      	mov	r3, r0
 800363a:	2b01      	cmp	r3, #1
 800363c:	f040 80ef 	bne.w	800381e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f004 fcca 	bl	8007fde <USB_ReadInterrupts>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80e5 	beq.w	800381c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f004 fcc1 	bl	8007fde <USB_ReadInterrupts>
 800365c:	4603      	mov	r3, r0
 800365e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003666:	d104      	bne.n	8003672 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003670:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f004 fcb1 	bl	8007fde <USB_ReadInterrupts>
 800367c:	4603      	mov	r3, r0
 800367e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003686:	d104      	bne.n	8003692 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003690:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f004 fca1 	bl	8007fde <USB_ReadInterrupts>
 800369c:	4603      	mov	r3, r0
 800369e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036a6:	d104      	bne.n	80036b2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80036b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f004 fc91 	bl	8007fde <USB_ReadInterrupts>
 80036bc:	4603      	mov	r3, r0
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d103      	bne.n	80036ce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2202      	movs	r2, #2
 80036cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f004 fc83 	bl	8007fde <USB_ReadInterrupts>
 80036d8:	4603      	mov	r3, r0
 80036da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e2:	d115      	bne.n	8003710 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80036ec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d108      	bne.n	8003710 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f8a4 	bl	800384c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2101      	movs	r1, #1
 800370a:	4618      	mov	r0, r3
 800370c:	f004 fd78 	bl	8008200 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f004 fc62 	bl	8007fde <USB_ReadInterrupts>
 800371a:	4603      	mov	r3, r0
 800371c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003724:	d102      	bne.n	800372c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f001 f9ad 	bl	8004a86 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f004 fc54 	bl	8007fde <USB_ReadInterrupts>
 8003736:	4603      	mov	r3, r0
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b08      	cmp	r3, #8
 800373e:	d106      	bne.n	800374e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f86f 	bl	8003824 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2208      	movs	r2, #8
 800374c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f004 fc43 	bl	8007fde <USB_ReadInterrupts>
 8003758:	4603      	mov	r3, r0
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b10      	cmp	r3, #16
 8003760:	d101      	bne.n	8003766 <HAL_HCD_IRQHandler+0x14a>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_HCD_IRQHandler+0x14c>
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d012      	beq.n	8003792 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0210 	bic.w	r2, r2, #16
 800377a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f001 f8b0 	bl	80048e2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699a      	ldr	r2, [r3, #24]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0210 	orr.w	r2, r2, #16
 8003790:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f004 fc21 	bl	8007fde <USB_ReadInterrupts>
 800379c:	4603      	mov	r3, r0
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037a6:	d13a      	bne.n	800381e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f004 fd9a 	bl	80082e6 <USB_HC_ReadInterrupt>
 80037b2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	e025      	b.n	8003806 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	fa22 f303 	lsr.w	r3, r2, r3
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d018      	beq.n	8003800 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e4:	d106      	bne.n	80037f4 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	4619      	mov	r1, r3
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f859 	bl	80038a4 <HCD_HC_IN_IRQHandler>
 80037f2:	e005      	b.n	8003800 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	4619      	mov	r1, r3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fc74 	bl	80040e8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	3301      	adds	r3, #1
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	429a      	cmp	r2, r3
 800380e:	d3d4      	bcc.n	80037ba <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003818:	615a      	str	r2, [r3, #20]
 800381a:	e000      	b.n	800381e <HAL_HCD_IRQHandler+0x202>
      return;
 800381c:	bf00      	nop
    }
  }
}
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
 8003894:	4613      	mov	r3, r2
 8003896:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d119      	bne.n	8003908 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e0:	461a      	mov	r2, r3
 80038e2:	2304      	movs	r3, #4
 80038e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	0151      	lsls	r1, r2, #5
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	440a      	add	r2, r1
 80038fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003900:	f043 0302 	orr.w	r3, r3, #2
 8003904:	60d3      	str	r3, [r2, #12]
 8003906:	e101      	b.n	8003b0c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4413      	add	r3, r2
 8003910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800391e:	d12b      	bne.n	8003978 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392c:	461a      	mov	r2, r3
 800392e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003932:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	212c      	movs	r1, #44	; 0x2c
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	4413      	add	r3, r2
 8003940:	3361      	adds	r3, #97	; 0x61
 8003942:	2207      	movs	r2, #7
 8003944:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4413      	add	r3, r2
 800394e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	0151      	lsls	r1, r2, #5
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	440a      	add	r2, r1
 800395c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003960:	f043 0302 	orr.w	r3, r3, #2
 8003964:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f004 fcc9 	bl	8008308 <USB_HC_Halt>
 8003976:	e0c9      	b.n	8003b0c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b20      	cmp	r3, #32
 800398c:	d109      	bne.n	80039a2 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4413      	add	r3, r2
 8003996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399a:	461a      	mov	r2, r3
 800399c:	2320      	movs	r3, #32
 800399e:	6093      	str	r3, [r2, #8]
 80039a0:	e0b4      	b.n	8003b0c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d133      	bne.n	8003a20 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	0151      	lsls	r1, r2, #5
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	440a      	add	r2, r1
 80039ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039d2:	f043 0302 	orr.w	r3, r3, #2
 80039d6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	212c      	movs	r1, #44	; 0x2c
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	4413      	add	r3, r2
 80039e4:	3361      	adds	r3, #97	; 0x61
 80039e6:	2205      	movs	r2, #5
 80039e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f6:	461a      	mov	r2, r3
 80039f8:	2310      	movs	r3, #16
 80039fa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f004 fc75 	bl	8008308 <USB_HC_Halt>
 8003a1e:	e075      	b.n	8003b0c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a36:	d134      	bne.n	8003aa2 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	0151      	lsls	r1, r2, #5
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	440a      	add	r2, r1
 8003a4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a52:	f043 0302 	orr.w	r3, r3, #2
 8003a56:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	212c      	movs	r1, #44	; 0x2c
 8003a5e:	fb01 f303 	mul.w	r3, r1, r3
 8003a62:	4413      	add	r3, r2
 8003a64:	3361      	adds	r3, #97	; 0x61
 8003a66:	2208      	movs	r2, #8
 8003a68:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a76:	461a      	mov	r2, r3
 8003a78:	2310      	movs	r3, #16
 8003a7a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a8e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f004 fc34 	bl	8008308 <USB_HC_Halt>
 8003aa0:	e034      	b.n	8003b0c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab4:	2b80      	cmp	r3, #128	; 0x80
 8003ab6:	d129      	bne.n	8003b0c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	0151      	lsls	r1, r2, #5
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	440a      	add	r2, r1
 8003ace:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ad2:	f043 0302 	orr.w	r3, r3, #2
 8003ad6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	212c      	movs	r1, #44	; 0x2c
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3361      	adds	r3, #97	; 0x61
 8003ae6:	2206      	movs	r2, #6
 8003ae8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	4611      	mov	r1, r2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f004 fc07 	bl	8008308 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b06:	461a      	mov	r2, r3
 8003b08:	2380      	movs	r3, #128	; 0x80
 8003b0a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b22:	d122      	bne.n	8003b6a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	0151      	lsls	r1, r2, #5
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	440a      	add	r2, r1
 8003b3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b3e:	f043 0302 	orr.w	r3, r3, #2
 8003b42:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f004 fbda 	bl	8008308 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b60:	461a      	mov	r2, r3
 8003b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b66:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003b68:	e2ba      	b.n	80040e0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	f040 811b 	bne.w	8003db8 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d019      	beq.n	8003bbe <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	212c      	movs	r1, #44	; 0x2c
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	4413      	add	r3, r2
 8003b96:	3348      	adds	r3, #72	; 0x48
 8003b98:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	0159      	lsls	r1, r3, #5
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	440b      	add	r3, r1
 8003ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003bac:	1ad2      	subs	r2, r2, r3
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	202c      	movs	r0, #44	; 0x2c
 8003bb4:	fb00 f303 	mul.w	r3, r0, r3
 8003bb8:	440b      	add	r3, r1
 8003bba:	3350      	adds	r3, #80	; 0x50
 8003bbc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	212c      	movs	r1, #44	; 0x2c
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	3361      	adds	r3, #97	; 0x61
 8003bcc:	2201      	movs	r2, #1
 8003bce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	212c      	movs	r1, #44	; 0x2c
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	4413      	add	r3, r2
 8003bdc:	335c      	adds	r3, #92	; 0x5c
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	212c      	movs	r1, #44	; 0x2c
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	333f      	adds	r3, #63	; 0x3f
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d009      	beq.n	8003c1c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	212c      	movs	r1, #44	; 0x2c
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	333f      	adds	r3, #63	; 0x3f
 8003c16:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d121      	bne.n	8003c60 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	0151      	lsls	r1, r2, #5
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	440a      	add	r2, r1
 8003c32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c36:	f043 0302 	orr.w	r3, r3, #2
 8003c3a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	4611      	mov	r1, r2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f004 fb5e 	bl	8008308 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2310      	movs	r3, #16
 8003c5c:	6093      	str	r3, [r2, #8]
 8003c5e:	e066      	b.n	8003d2e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	212c      	movs	r1, #44	; 0x2c
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	333f      	adds	r3, #63	; 0x3f
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d127      	bne.n	8003cc4 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	0151      	lsls	r1, r2, #5
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	440a      	add	r2, r1
 8003c8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c92:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	212c      	movs	r1, #44	; 0x2c
 8003c9a:	fb01 f303 	mul.w	r3, r1, r3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3360      	adds	r3, #96	; 0x60
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	b2d9      	uxtb	r1, r3
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	202c      	movs	r0, #44	; 0x2c
 8003cb0:	fb00 f303 	mul.w	r3, r0, r3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3360      	adds	r3, #96	; 0x60
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff fde3 	bl	8003888 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003cc2:	e034      	b.n	8003d2e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	212c      	movs	r1, #44	; 0x2c
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	4413      	add	r3, r2
 8003cd0:	333f      	adds	r3, #63	; 0x3f
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d12a      	bne.n	8003d2e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	212c      	movs	r1, #44	; 0x2c
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3360      	adds	r3, #96	; 0x60
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3354      	adds	r3, #84	; 0x54
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	f083 0301 	eor.w	r3, r3, #1
 8003cfe:	b2d8      	uxtb	r0, r3
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	212c      	movs	r1, #44	; 0x2c
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3354      	adds	r3, #84	; 0x54
 8003d0e:	4602      	mov	r2, r0
 8003d10:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	b2d9      	uxtb	r1, r3
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	202c      	movs	r0, #44	; 0x2c
 8003d1c:	fb00 f303 	mul.w	r3, r0, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	3360      	adds	r3, #96	; 0x60
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff fdad 	bl	8003888 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d12b      	bne.n	8003d8e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	212c      	movs	r1, #44	; 0x2c
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	4413      	add	r3, r2
 8003d42:	3348      	adds	r3, #72	; 0x48
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	202c      	movs	r0, #44	; 0x2c
 8003d4c:	fb00 f202 	mul.w	r2, r0, r2
 8003d50:	440a      	add	r2, r1
 8003d52:	3240      	adds	r2, #64	; 0x40
 8003d54:	8812      	ldrh	r2, [r2, #0]
 8003d56:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 81be 	beq.w	80040e0 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	212c      	movs	r1, #44	; 0x2c
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	3354      	adds	r3, #84	; 0x54
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	f083 0301 	eor.w	r3, r3, #1
 8003d78:	b2d8      	uxtb	r0, r3
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	212c      	movs	r1, #44	; 0x2c
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	4413      	add	r3, r2
 8003d86:	3354      	adds	r3, #84	; 0x54
 8003d88:	4602      	mov	r2, r0
 8003d8a:	701a      	strb	r2, [r3, #0]
}
 8003d8c:	e1a8      	b.n	80040e0 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	212c      	movs	r1, #44	; 0x2c
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	4413      	add	r3, r2
 8003d9a:	3354      	adds	r3, #84	; 0x54
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	f083 0301 	eor.w	r3, r3, #1
 8003da2:	b2d8      	uxtb	r0, r3
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	212c      	movs	r1, #44	; 0x2c
 8003daa:	fb01 f303 	mul.w	r3, r1, r3
 8003dae:	4413      	add	r3, r2
 8003db0:	3354      	adds	r3, #84	; 0x54
 8003db2:	4602      	mov	r2, r0
 8003db4:	701a      	strb	r2, [r3, #0]
}
 8003db6:	e193      	b.n	80040e0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	f040 8106 	bne.w	8003fdc <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	0151      	lsls	r1, r2, #5
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	440a      	add	r2, r1
 8003de6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dea:	f023 0302 	bic.w	r3, r3, #2
 8003dee:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	212c      	movs	r1, #44	; 0x2c
 8003df6:	fb01 f303 	mul.w	r3, r1, r3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3361      	adds	r3, #97	; 0x61
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d109      	bne.n	8003e18 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	212c      	movs	r1, #44	; 0x2c
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	3360      	adds	r3, #96	; 0x60
 8003e12:	2201      	movs	r2, #1
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	e0c9      	b.n	8003fac <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	3361      	adds	r3, #97	; 0x61
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b05      	cmp	r3, #5
 8003e2a:	d109      	bne.n	8003e40 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	212c      	movs	r1, #44	; 0x2c
 8003e32:	fb01 f303 	mul.w	r3, r1, r3
 8003e36:	4413      	add	r3, r2
 8003e38:	3360      	adds	r3, #96	; 0x60
 8003e3a:	2205      	movs	r2, #5
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	e0b5      	b.n	8003fac <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	212c      	movs	r1, #44	; 0x2c
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3361      	adds	r3, #97	; 0x61
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b06      	cmp	r3, #6
 8003e52:	d009      	beq.n	8003e68 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	212c      	movs	r1, #44	; 0x2c
 8003e5a:	fb01 f303 	mul.w	r3, r1, r3
 8003e5e:	4413      	add	r3, r2
 8003e60:	3361      	adds	r3, #97	; 0x61
 8003e62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d150      	bne.n	8003f0a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	212c      	movs	r1, #44	; 0x2c
 8003e6e:	fb01 f303 	mul.w	r3, r1, r3
 8003e72:	4413      	add	r3, r2
 8003e74:	335c      	adds	r3, #92	; 0x5c
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	202c      	movs	r0, #44	; 0x2c
 8003e80:	fb00 f303 	mul.w	r3, r0, r3
 8003e84:	440b      	add	r3, r1
 8003e86:	335c      	adds	r3, #92	; 0x5c
 8003e88:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	212c      	movs	r1, #44	; 0x2c
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	335c      	adds	r3, #92	; 0x5c
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d912      	bls.n	8003ec4 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	212c      	movs	r1, #44	; 0x2c
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	335c      	adds	r3, #92	; 0x5c
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	212c      	movs	r1, #44	; 0x2c
 8003eb6:	fb01 f303 	mul.w	r3, r1, r3
 8003eba:	4413      	add	r3, r2
 8003ebc:	3360      	adds	r3, #96	; 0x60
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ec2:	e073      	b.n	8003fac <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	212c      	movs	r1, #44	; 0x2c
 8003eca:	fb01 f303 	mul.w	r3, r1, r3
 8003ece:	4413      	add	r3, r2
 8003ed0:	3360      	adds	r3, #96	; 0x60
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003eec:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ef4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f02:	461a      	mov	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f08:	e050      	b.n	8003fac <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	212c      	movs	r1, #44	; 0x2c
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	4413      	add	r3, r2
 8003f16:	3361      	adds	r3, #97	; 0x61
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d122      	bne.n	8003f64 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	212c      	movs	r1, #44	; 0x2c
 8003f24:	fb01 f303 	mul.w	r3, r1, r3
 8003f28:	4413      	add	r3, r2
 8003f2a:	3360      	adds	r3, #96	; 0x60
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f46:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f4e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e023      	b.n	8003fac <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	212c      	movs	r1, #44	; 0x2c
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	4413      	add	r3, r2
 8003f70:	3361      	adds	r3, #97	; 0x61
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b07      	cmp	r3, #7
 8003f76:	d119      	bne.n	8003fac <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	212c      	movs	r1, #44	; 0x2c
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	4413      	add	r3, r2
 8003f84:	335c      	adds	r3, #92	; 0x5c
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	202c      	movs	r0, #44	; 0x2c
 8003f90:	fb00 f303 	mul.w	r3, r0, r3
 8003f94:	440b      	add	r3, r1
 8003f96:	335c      	adds	r3, #92	; 0x5c
 8003f98:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	212c      	movs	r1, #44	; 0x2c
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3360      	adds	r3, #96	; 0x60
 8003fa8:	2204      	movs	r2, #4
 8003faa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2302      	movs	r3, #2
 8003fbc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	b2d9      	uxtb	r1, r3
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	202c      	movs	r0, #44	; 0x2c
 8003fc8:	fb00 f303 	mul.w	r3, r0, r3
 8003fcc:	4413      	add	r3, r2
 8003fce:	3360      	adds	r3, #96	; 0x60
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff fc57 	bl	8003888 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003fda:	e081      	b.n	80040e0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 0310 	and.w	r3, r3, #16
 8003fee:	2b10      	cmp	r3, #16
 8003ff0:	d176      	bne.n	80040e0 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	212c      	movs	r1, #44	; 0x2c
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	333f      	adds	r3, #63	; 0x3f
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b03      	cmp	r3, #3
 8004004:	d121      	bne.n	800404a <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	212c      	movs	r1, #44	; 0x2c
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	4413      	add	r3, r2
 8004012:	335c      	adds	r3, #92	; 0x5c
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4413      	add	r3, r2
 8004020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	0151      	lsls	r1, r2, #5
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	440a      	add	r2, r1
 800402e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004032:	f043 0302 	orr.w	r3, r3, #2
 8004036:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	4611      	mov	r1, r2
 8004042:	4618      	mov	r0, r3
 8004044:	f004 f960 	bl	8008308 <USB_HC_Halt>
 8004048:	e041      	b.n	80040ce <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	212c      	movs	r1, #44	; 0x2c
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	4413      	add	r3, r2
 8004056:	333f      	adds	r3, #63	; 0x3f
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	212c      	movs	r1, #44	; 0x2c
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	4413      	add	r3, r2
 800406a:	333f      	adds	r3, #63	; 0x3f
 800406c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800406e:	2b02      	cmp	r3, #2
 8004070:	d12d      	bne.n	80040ce <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	212c      	movs	r1, #44	; 0x2c
 8004078:	fb01 f303 	mul.w	r3, r1, r3
 800407c:	4413      	add	r3, r2
 800407e:	335c      	adds	r3, #92	; 0x5c
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d120      	bne.n	80040ce <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	212c      	movs	r1, #44	; 0x2c
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	4413      	add	r3, r2
 8004098:	3361      	adds	r3, #97	; 0x61
 800409a:	2203      	movs	r2, #3
 800409c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	0151      	lsls	r1, r2, #5
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	440a      	add	r2, r1
 80040b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b8:	f043 0302 	orr.w	r3, r3, #2
 80040bc:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	4611      	mov	r1, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f004 f91d 	bl	8008308 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040da:	461a      	mov	r2, r3
 80040dc:	2310      	movs	r3, #16
 80040de:	6093      	str	r3, [r2, #8]
}
 80040e0:	bf00      	nop
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	4413      	add	r3, r2
 800410a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b04      	cmp	r3, #4
 8004116:	d119      	bne.n	800414c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	4413      	add	r3, r2
 8004120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004124:	461a      	mov	r2, r3
 8004126:	2304      	movs	r3, #4
 8004128:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	4413      	add	r3, r2
 8004132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	0151      	lsls	r1, r2, #5
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	440a      	add	r2, r1
 8004140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004144:	f043 0302 	orr.w	r3, r3, #2
 8004148:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800414a:	e3c6      	b.n	80048da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	4413      	add	r3, r2
 8004154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b20      	cmp	r3, #32
 8004160:	d13e      	bne.n	80041e0 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	4413      	add	r3, r2
 800416a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416e:	461a      	mov	r2, r3
 8004170:	2320      	movs	r3, #32
 8004172:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	212c      	movs	r1, #44	; 0x2c
 800417a:	fb01 f303 	mul.w	r3, r1, r3
 800417e:	4413      	add	r3, r2
 8004180:	333d      	adds	r3, #61	; 0x3d
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	f040 83a8 	bne.w	80048da <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	212c      	movs	r1, #44	; 0x2c
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	4413      	add	r3, r2
 8004196:	333d      	adds	r3, #61	; 0x3d
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	212c      	movs	r1, #44	; 0x2c
 80041a2:	fb01 f303 	mul.w	r3, r1, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	3360      	adds	r3, #96	; 0x60
 80041aa:	2202      	movs	r2, #2
 80041ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	0151      	lsls	r1, r2, #5
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	440a      	add	r2, r1
 80041c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041c8:	f043 0302 	orr.w	r3, r3, #2
 80041cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	4611      	mov	r1, r2
 80041d8:	4618      	mov	r0, r3
 80041da:	f004 f895 	bl	8008308 <USB_HC_Halt>
}
 80041de:	e37c      	b.n	80048da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f6:	d122      	bne.n	800423e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	0151      	lsls	r1, r2, #5
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	440a      	add	r2, r1
 800420e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004212:	f043 0302 	orr.w	r3, r3, #2
 8004216:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	4611      	mov	r1, r2
 8004222:	4618      	mov	r0, r3
 8004224:	f004 f870 	bl	8008308 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	4413      	add	r3, r2
 8004230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004234:	461a      	mov	r2, r3
 8004236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800423a:	6093      	str	r3, [r2, #8]
}
 800423c:	e34d      	b.n	80048da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	4413      	add	r3, r2
 8004246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b01      	cmp	r3, #1
 8004252:	d150      	bne.n	80042f6 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	212c      	movs	r1, #44	; 0x2c
 800425a:	fb01 f303 	mul.w	r3, r1, r3
 800425e:	4413      	add	r3, r2
 8004260:	335c      	adds	r3, #92	; 0x5c
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	4413      	add	r3, r2
 800426e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d111      	bne.n	80042a0 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	212c      	movs	r1, #44	; 0x2c
 8004282:	fb01 f303 	mul.w	r3, r1, r3
 8004286:	4413      	add	r3, r2
 8004288:	333d      	adds	r3, #61	; 0x3d
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	4413      	add	r3, r2
 8004296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429a:	461a      	mov	r2, r3
 800429c:	2340      	movs	r3, #64	; 0x40
 800429e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	0151      	lsls	r1, r2, #5
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	440a      	add	r2, r1
 80042b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ba:	f043 0302 	orr.w	r3, r3, #2
 80042be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	4611      	mov	r1, r2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f004 f81c 	bl	8008308 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042dc:	461a      	mov	r2, r3
 80042de:	2301      	movs	r3, #1
 80042e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	212c      	movs	r1, #44	; 0x2c
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	4413      	add	r3, r2
 80042ee:	3361      	adds	r3, #97	; 0x61
 80042f0:	2201      	movs	r2, #1
 80042f2:	701a      	strb	r2, [r3, #0]
}
 80042f4:	e2f1      	b.n	80048da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004308:	2b40      	cmp	r3, #64	; 0x40
 800430a:	d13c      	bne.n	8004386 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	212c      	movs	r1, #44	; 0x2c
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4413      	add	r3, r2
 8004318:	3361      	adds	r3, #97	; 0x61
 800431a:	2204      	movs	r2, #4
 800431c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	212c      	movs	r1, #44	; 0x2c
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	4413      	add	r3, r2
 800432a:	333d      	adds	r3, #61	; 0x3d
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	212c      	movs	r1, #44	; 0x2c
 8004336:	fb01 f303 	mul.w	r3, r1, r3
 800433a:	4413      	add	r3, r2
 800433c:	335c      	adds	r3, #92	; 0x5c
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	4413      	add	r3, r2
 800434a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	0151      	lsls	r1, r2, #5
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	440a      	add	r2, r1
 8004358:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800435c:	f043 0302 	orr.w	r3, r3, #2
 8004360:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	4611      	mov	r1, r2
 800436c:	4618      	mov	r0, r3
 800436e:	f003 ffcb 	bl	8008308 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	4413      	add	r3, r2
 800437a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437e:	461a      	mov	r2, r3
 8004380:	2340      	movs	r3, #64	; 0x40
 8004382:	6093      	str	r3, [r2, #8]
}
 8004384:	e2a9      	b.n	80048da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	4413      	add	r3, r2
 800438e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b08      	cmp	r3, #8
 800439a:	d12a      	bne.n	80043f2 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a8:	461a      	mov	r2, r3
 80043aa:	2308      	movs	r3, #8
 80043ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	0151      	lsls	r1, r2, #5
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	440a      	add	r2, r1
 80043c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043c8:	f043 0302 	orr.w	r3, r3, #2
 80043cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f003 ff95 	bl	8008308 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	212c      	movs	r1, #44	; 0x2c
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	4413      	add	r3, r2
 80043ea:	3361      	adds	r3, #97	; 0x61
 80043ec:	2205      	movs	r2, #5
 80043ee:	701a      	strb	r2, [r3, #0]
}
 80043f0:	e273      	b.n	80048da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	2b10      	cmp	r3, #16
 8004406:	d150      	bne.n	80044aa <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	212c      	movs	r1, #44	; 0x2c
 800440e:	fb01 f303 	mul.w	r3, r1, r3
 8004412:	4413      	add	r3, r2
 8004414:	335c      	adds	r3, #92	; 0x5c
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	212c      	movs	r1, #44	; 0x2c
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	4413      	add	r3, r2
 8004426:	3361      	adds	r3, #97	; 0x61
 8004428:	2203      	movs	r2, #3
 800442a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	212c      	movs	r1, #44	; 0x2c
 8004432:	fb01 f303 	mul.w	r3, r1, r3
 8004436:	4413      	add	r3, r2
 8004438:	333d      	adds	r3, #61	; 0x3d
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d112      	bne.n	8004466 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	212c      	movs	r1, #44	; 0x2c
 8004446:	fb01 f303 	mul.w	r3, r1, r3
 800444a:	4413      	add	r3, r2
 800444c:	333c      	adds	r3, #60	; 0x3c
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d108      	bne.n	8004466 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	212c      	movs	r1, #44	; 0x2c
 800445a:	fb01 f303 	mul.w	r3, r1, r3
 800445e:	4413      	add	r3, r2
 8004460:	333d      	adds	r3, #61	; 0x3d
 8004462:	2201      	movs	r2, #1
 8004464:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	4413      	add	r3, r2
 800446e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	0151      	lsls	r1, r2, #5
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	440a      	add	r2, r1
 800447c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004480:	f043 0302 	orr.w	r3, r3, #2
 8004484:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	4611      	mov	r1, r2
 8004490:	4618      	mov	r0, r3
 8004492:	f003 ff39 	bl	8008308 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	4413      	add	r3, r2
 800449e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a2:	461a      	mov	r2, r3
 80044a4:	2310      	movs	r3, #16
 80044a6:	6093      	str	r3, [r2, #8]
}
 80044a8:	e217      	b.n	80048da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044bc:	2b80      	cmp	r3, #128	; 0x80
 80044be:	d174      	bne.n	80045aa <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d121      	bne.n	800450c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	212c      	movs	r1, #44	; 0x2c
 80044ce:	fb01 f303 	mul.w	r3, r1, r3
 80044d2:	4413      	add	r3, r2
 80044d4:	3361      	adds	r3, #97	; 0x61
 80044d6:	2206      	movs	r2, #6
 80044d8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	0151      	lsls	r1, r2, #5
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	440a      	add	r2, r1
 80044f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044f4:	f043 0302 	orr.w	r3, r3, #2
 80044f8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	4611      	mov	r1, r2
 8004504:	4618      	mov	r0, r3
 8004506:	f003 feff 	bl	8008308 <USB_HC_Halt>
 800450a:	e044      	b.n	8004596 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	212c      	movs	r1, #44	; 0x2c
 8004512:	fb01 f303 	mul.w	r3, r1, r3
 8004516:	4413      	add	r3, r2
 8004518:	335c      	adds	r3, #92	; 0x5c
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	202c      	movs	r0, #44	; 0x2c
 8004524:	fb00 f303 	mul.w	r3, r0, r3
 8004528:	440b      	add	r3, r1
 800452a:	335c      	adds	r3, #92	; 0x5c
 800452c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	212c      	movs	r1, #44	; 0x2c
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	335c      	adds	r3, #92	; 0x5c
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d920      	bls.n	8004584 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	212c      	movs	r1, #44	; 0x2c
 8004548:	fb01 f303 	mul.w	r3, r1, r3
 800454c:	4413      	add	r3, r2
 800454e:	335c      	adds	r3, #92	; 0x5c
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	212c      	movs	r1, #44	; 0x2c
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	4413      	add	r3, r2
 8004560:	3360      	adds	r3, #96	; 0x60
 8004562:	2204      	movs	r2, #4
 8004564:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	b2d9      	uxtb	r1, r3
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	202c      	movs	r0, #44	; 0x2c
 8004570:	fb00 f303 	mul.w	r3, r0, r3
 8004574:	4413      	add	r3, r2
 8004576:	3360      	adds	r3, #96	; 0x60
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff f983 	bl	8003888 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004582:	e008      	b.n	8004596 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	212c      	movs	r1, #44	; 0x2c
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	4413      	add	r3, r2
 8004590:	3360      	adds	r3, #96	; 0x60
 8004592:	2202      	movs	r2, #2
 8004594:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	4413      	add	r3, r2
 800459e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a2:	461a      	mov	r2, r3
 80045a4:	2380      	movs	r3, #128	; 0x80
 80045a6:	6093      	str	r3, [r2, #8]
}
 80045a8:	e197      	b.n	80048da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c0:	d134      	bne.n	800462c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	0151      	lsls	r1, r2, #5
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	440a      	add	r2, r1
 80045d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045dc:	f043 0302 	orr.w	r3, r3, #2
 80045e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	4611      	mov	r1, r2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f003 fe8b 	bl	8008308 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045fe:	461a      	mov	r2, r3
 8004600:	2310      	movs	r3, #16
 8004602:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	4413      	add	r3, r2
 800460c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004610:	461a      	mov	r2, r3
 8004612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004616:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	212c      	movs	r1, #44	; 0x2c
 800461e:	fb01 f303 	mul.w	r3, r1, r3
 8004622:	4413      	add	r3, r2
 8004624:	3361      	adds	r3, #97	; 0x61
 8004626:	2208      	movs	r2, #8
 8004628:	701a      	strb	r2, [r3, #0]
}
 800462a:	e156      	b.n	80048da <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	4413      	add	r3, r2
 8004634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b02      	cmp	r3, #2
 8004640:	f040 814b 	bne.w	80048da <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	4413      	add	r3, r2
 800464c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	0151      	lsls	r1, r2, #5
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	440a      	add	r2, r1
 800465a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800465e:	f023 0302 	bic.w	r3, r3, #2
 8004662:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	212c      	movs	r1, #44	; 0x2c
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	3361      	adds	r3, #97	; 0x61
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d179      	bne.n	800476c <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	212c      	movs	r1, #44	; 0x2c
 800467e:	fb01 f303 	mul.w	r3, r1, r3
 8004682:	4413      	add	r3, r2
 8004684:	3360      	adds	r3, #96	; 0x60
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	212c      	movs	r1, #44	; 0x2c
 8004690:	fb01 f303 	mul.w	r3, r1, r3
 8004694:	4413      	add	r3, r2
 8004696:	333f      	adds	r3, #63	; 0x3f
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d00a      	beq.n	80046b4 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	212c      	movs	r1, #44	; 0x2c
 80046a4:	fb01 f303 	mul.w	r3, r1, r3
 80046a8:	4413      	add	r3, r2
 80046aa:	333f      	adds	r3, #63	; 0x3f
 80046ac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	f040 80fc 	bne.w	80048ac <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d142      	bne.n	8004742 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	212c      	movs	r1, #44	; 0x2c
 80046c2:	fb01 f303 	mul.w	r3, r1, r3
 80046c6:	4413      	add	r3, r2
 80046c8:	334c      	adds	r3, #76	; 0x4c
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80ed 	beq.w	80048ac <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	212c      	movs	r1, #44	; 0x2c
 80046d8:	fb01 f303 	mul.w	r3, r1, r3
 80046dc:	4413      	add	r3, r2
 80046de:	334c      	adds	r3, #76	; 0x4c
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	202c      	movs	r0, #44	; 0x2c
 80046e8:	fb00 f202 	mul.w	r2, r0, r2
 80046ec:	440a      	add	r2, r1
 80046ee:	3240      	adds	r2, #64	; 0x40
 80046f0:	8812      	ldrh	r2, [r2, #0]
 80046f2:	4413      	add	r3, r2
 80046f4:	3b01      	subs	r3, #1
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	202c      	movs	r0, #44	; 0x2c
 80046fc:	fb00 f202 	mul.w	r2, r0, r2
 8004700:	440a      	add	r2, r1
 8004702:	3240      	adds	r2, #64	; 0x40
 8004704:	8812      	ldrh	r2, [r2, #0]
 8004706:	fbb3 f3f2 	udiv	r3, r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 80ca 	beq.w	80048ac <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	212c      	movs	r1, #44	; 0x2c
 800471e:	fb01 f303 	mul.w	r3, r1, r3
 8004722:	4413      	add	r3, r2
 8004724:	3355      	adds	r3, #85	; 0x55
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	f083 0301 	eor.w	r3, r3, #1
 800472c:	b2d8      	uxtb	r0, r3
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	212c      	movs	r1, #44	; 0x2c
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	4413      	add	r3, r2
 800473a:	3355      	adds	r3, #85	; 0x55
 800473c:	4602      	mov	r2, r0
 800473e:	701a      	strb	r2, [r3, #0]
 8004740:	e0b4      	b.n	80048ac <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	212c      	movs	r1, #44	; 0x2c
 8004748:	fb01 f303 	mul.w	r3, r1, r3
 800474c:	4413      	add	r3, r2
 800474e:	3355      	adds	r3, #85	; 0x55
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	f083 0301 	eor.w	r3, r3, #1
 8004756:	b2d8      	uxtb	r0, r3
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	212c      	movs	r1, #44	; 0x2c
 800475e:	fb01 f303 	mul.w	r3, r1, r3
 8004762:	4413      	add	r3, r2
 8004764:	3355      	adds	r3, #85	; 0x55
 8004766:	4602      	mov	r2, r0
 8004768:	701a      	strb	r2, [r3, #0]
 800476a:	e09f      	b.n	80048ac <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	212c      	movs	r1, #44	; 0x2c
 8004772:	fb01 f303 	mul.w	r3, r1, r3
 8004776:	4413      	add	r3, r2
 8004778:	3361      	adds	r3, #97	; 0x61
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b03      	cmp	r3, #3
 800477e:	d109      	bne.n	8004794 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	212c      	movs	r1, #44	; 0x2c
 8004786:	fb01 f303 	mul.w	r3, r1, r3
 800478a:	4413      	add	r3, r2
 800478c:	3360      	adds	r3, #96	; 0x60
 800478e:	2202      	movs	r2, #2
 8004790:	701a      	strb	r2, [r3, #0]
 8004792:	e08b      	b.n	80048ac <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	212c      	movs	r1, #44	; 0x2c
 800479a:	fb01 f303 	mul.w	r3, r1, r3
 800479e:	4413      	add	r3, r2
 80047a0:	3361      	adds	r3, #97	; 0x61
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d109      	bne.n	80047bc <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	212c      	movs	r1, #44	; 0x2c
 80047ae:	fb01 f303 	mul.w	r3, r1, r3
 80047b2:	4413      	add	r3, r2
 80047b4:	3360      	adds	r3, #96	; 0x60
 80047b6:	2202      	movs	r2, #2
 80047b8:	701a      	strb	r2, [r3, #0]
 80047ba:	e077      	b.n	80048ac <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	212c      	movs	r1, #44	; 0x2c
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	4413      	add	r3, r2
 80047c8:	3361      	adds	r3, #97	; 0x61
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b05      	cmp	r3, #5
 80047ce:	d109      	bne.n	80047e4 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	212c      	movs	r1, #44	; 0x2c
 80047d6:	fb01 f303 	mul.w	r3, r1, r3
 80047da:	4413      	add	r3, r2
 80047dc:	3360      	adds	r3, #96	; 0x60
 80047de:	2205      	movs	r2, #5
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	e063      	b.n	80048ac <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	212c      	movs	r1, #44	; 0x2c
 80047ea:	fb01 f303 	mul.w	r3, r1, r3
 80047ee:	4413      	add	r3, r2
 80047f0:	3361      	adds	r3, #97	; 0x61
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b06      	cmp	r3, #6
 80047f6:	d009      	beq.n	800480c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	212c      	movs	r1, #44	; 0x2c
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	4413      	add	r3, r2
 8004804:	3361      	adds	r3, #97	; 0x61
 8004806:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004808:	2b08      	cmp	r3, #8
 800480a:	d14f      	bne.n	80048ac <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	212c      	movs	r1, #44	; 0x2c
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	4413      	add	r3, r2
 8004818:	335c      	adds	r3, #92	; 0x5c
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	202c      	movs	r0, #44	; 0x2c
 8004824:	fb00 f303 	mul.w	r3, r0, r3
 8004828:	440b      	add	r3, r1
 800482a:	335c      	adds	r3, #92	; 0x5c
 800482c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	212c      	movs	r1, #44	; 0x2c
 8004834:	fb01 f303 	mul.w	r3, r1, r3
 8004838:	4413      	add	r3, r2
 800483a:	335c      	adds	r3, #92	; 0x5c
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d912      	bls.n	8004868 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	212c      	movs	r1, #44	; 0x2c
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	4413      	add	r3, r2
 800484e:	335c      	adds	r3, #92	; 0x5c
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	212c      	movs	r1, #44	; 0x2c
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	4413      	add	r3, r2
 8004860:	3360      	adds	r3, #96	; 0x60
 8004862:	2204      	movs	r2, #4
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	e021      	b.n	80048ac <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	212c      	movs	r1, #44	; 0x2c
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	4413      	add	r3, r2
 8004874:	3360      	adds	r3, #96	; 0x60
 8004876:	2202      	movs	r2, #2
 8004878:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	4413      	add	r3, r2
 8004882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004890:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004898:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a6:	461a      	mov	r2, r3
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b8:	461a      	mov	r2, r3
 80048ba:	2302      	movs	r3, #2
 80048bc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	b2d9      	uxtb	r1, r3
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	202c      	movs	r0, #44	; 0x2c
 80048c8:	fb00 f303 	mul.w	r3, r0, r3
 80048cc:	4413      	add	r3, r2
 80048ce:	3360      	adds	r3, #96	; 0x60
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7fe ffd7 	bl	8003888 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80048da:	bf00      	nop
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b08a      	sub	sp, #40	; 0x28
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	0c5b      	lsrs	r3, r3, #17
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	091b      	lsrs	r3, r3, #4
 8004912:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004916:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d004      	beq.n	8004928 <HCD_RXQLVL_IRQHandler+0x46>
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b05      	cmp	r3, #5
 8004922:	f000 80a9 	beq.w	8004a78 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004926:	e0aa      	b.n	8004a7e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 80a6 	beq.w	8004a7c <HCD_RXQLVL_IRQHandler+0x19a>
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	212c      	movs	r1, #44	; 0x2c
 8004936:	fb01 f303 	mul.w	r3, r1, r3
 800493a:	4413      	add	r3, r2
 800493c:	3344      	adds	r3, #68	; 0x44
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 809b 	beq.w	8004a7c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	212c      	movs	r1, #44	; 0x2c
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	4413      	add	r3, r2
 8004952:	3350      	adds	r3, #80	; 0x50
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	441a      	add	r2, r3
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	202c      	movs	r0, #44	; 0x2c
 8004960:	fb00 f303 	mul.w	r3, r0, r3
 8004964:	440b      	add	r3, r1
 8004966:	334c      	adds	r3, #76	; 0x4c
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d87a      	bhi.n	8004a64 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	212c      	movs	r1, #44	; 0x2c
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	4413      	add	r3, r2
 800497e:	3344      	adds	r3, #68	; 0x44
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	b292      	uxth	r2, r2
 8004986:	4619      	mov	r1, r3
 8004988:	f003 fb00 	bl	8007f8c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	212c      	movs	r1, #44	; 0x2c
 8004992:	fb01 f303 	mul.w	r3, r1, r3
 8004996:	4413      	add	r3, r2
 8004998:	3344      	adds	r3, #68	; 0x44
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	441a      	add	r2, r3
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	202c      	movs	r0, #44	; 0x2c
 80049a6:	fb00 f303 	mul.w	r3, r0, r3
 80049aa:	440b      	add	r3, r1
 80049ac:	3344      	adds	r3, #68	; 0x44
 80049ae:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	212c      	movs	r1, #44	; 0x2c
 80049b6:	fb01 f303 	mul.w	r3, r1, r3
 80049ba:	4413      	add	r3, r2
 80049bc:	3350      	adds	r3, #80	; 0x50
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	441a      	add	r2, r3
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	202c      	movs	r0, #44	; 0x2c
 80049ca:	fb00 f303 	mul.w	r3, r0, r3
 80049ce:	440b      	add	r3, r1
 80049d0:	3350      	adds	r3, #80	; 0x50
 80049d2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	0cdb      	lsrs	r3, r3, #19
 80049e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049e8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	212c      	movs	r1, #44	; 0x2c
 80049f0:	fb01 f303 	mul.w	r3, r1, r3
 80049f4:	4413      	add	r3, r2
 80049f6:	3340      	adds	r3, #64	; 0x40
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d13c      	bne.n	8004a7c <HCD_RXQLVL_IRQHandler+0x19a>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d039      	beq.n	8004a7c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a1e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a26:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a34:	461a      	mov	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	212c      	movs	r1, #44	; 0x2c
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	3354      	adds	r3, #84	; 0x54
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	f083 0301 	eor.w	r3, r3, #1
 8004a4e:	b2d8      	uxtb	r0, r3
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	212c      	movs	r1, #44	; 0x2c
 8004a56:	fb01 f303 	mul.w	r3, r1, r3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3354      	adds	r3, #84	; 0x54
 8004a5e:	4602      	mov	r2, r0
 8004a60:	701a      	strb	r2, [r3, #0]
      break;
 8004a62:	e00b      	b.n	8004a7c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	212c      	movs	r1, #44	; 0x2c
 8004a6a:	fb01 f303 	mul.w	r3, r1, r3
 8004a6e:	4413      	add	r3, r2
 8004a70:	3360      	adds	r3, #96	; 0x60
 8004a72:	2204      	movs	r2, #4
 8004a74:	701a      	strb	r2, [r3, #0]
      break;
 8004a76:	e001      	b.n	8004a7c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004a78:	bf00      	nop
 8004a7a:	e000      	b.n	8004a7e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004a7c:	bf00      	nop
  }
}
 8004a7e:	bf00      	nop
 8004a80:	3728      	adds	r7, #40	; 0x28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ab2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d10b      	bne.n	8004ad6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d102      	bne.n	8004ace <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7fe feb5 	bl	8003838 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f043 0302 	orr.w	r3, r3, #2
 8004ad4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d132      	bne.n	8004b46 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f043 0308 	orr.w	r3, r3, #8
 8004ae6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 0304 	and.w	r3, r3, #4
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d126      	bne.n	8004b40 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d113      	bne.n	8004b22 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004b00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b04:	d106      	bne.n	8004b14 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f003 fb77 	bl	8008200 <USB_InitFSLSPClkSel>
 8004b12:	e011      	b.n	8004b38 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2101      	movs	r1, #1
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f003 fb70 	bl	8008200 <USB_InitFSLSPClkSel>
 8004b20:	e00a      	b.n	8004b38 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d106      	bne.n	8004b38 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b30:	461a      	mov	r2, r3
 8004b32:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004b36:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7fe fe91 	bl	8003860 <HAL_HCD_PortEnabled_Callback>
 8004b3e:	e002      	b.n	8004b46 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7fe fe97 	bl	8003874 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d103      	bne.n	8004b58 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f043 0320 	orr.w	r3, r3, #32
 8004b56:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b5e:	461a      	mov	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	6013      	str	r3, [r2, #0]
}
 8004b64:	bf00      	nop
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e12b      	b.n	8004dd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fc fc40 	bl	8001418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2224      	movs	r2, #36	; 0x24
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0201 	bic.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bd0:	f001 f940 	bl	8005e54 <HAL_RCC_GetPCLK1Freq>
 8004bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	4a81      	ldr	r2, [pc, #516]	; (8004de0 <HAL_I2C_Init+0x274>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d807      	bhi.n	8004bf0 <HAL_I2C_Init+0x84>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a80      	ldr	r2, [pc, #512]	; (8004de4 <HAL_I2C_Init+0x278>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	bf94      	ite	ls
 8004be8:	2301      	movls	r3, #1
 8004bea:	2300      	movhi	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	e006      	b.n	8004bfe <HAL_I2C_Init+0x92>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4a7d      	ldr	r2, [pc, #500]	; (8004de8 <HAL_I2C_Init+0x27c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	bf94      	ite	ls
 8004bf8:	2301      	movls	r3, #1
 8004bfa:	2300      	movhi	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e0e7      	b.n	8004dd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4a78      	ldr	r2, [pc, #480]	; (8004dec <HAL_I2C_Init+0x280>)
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	0c9b      	lsrs	r3, r3, #18
 8004c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a6a      	ldr	r2, [pc, #424]	; (8004de0 <HAL_I2C_Init+0x274>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d802      	bhi.n	8004c40 <HAL_I2C_Init+0xd4>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	e009      	b.n	8004c54 <HAL_I2C_Init+0xe8>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c46:	fb02 f303 	mul.w	r3, r2, r3
 8004c4a:	4a69      	ldr	r2, [pc, #420]	; (8004df0 <HAL_I2C_Init+0x284>)
 8004c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c50:	099b      	lsrs	r3, r3, #6
 8004c52:	3301      	adds	r3, #1
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	495c      	ldr	r1, [pc, #368]	; (8004de0 <HAL_I2C_Init+0x274>)
 8004c70:	428b      	cmp	r3, r1
 8004c72:	d819      	bhi.n	8004ca8 <HAL_I2C_Init+0x13c>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	1e59      	subs	r1, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c82:	1c59      	adds	r1, r3, #1
 8004c84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c88:	400b      	ands	r3, r1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_I2C_Init+0x138>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1e59      	subs	r1, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca2:	e051      	b.n	8004d48 <HAL_I2C_Init+0x1dc>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	e04f      	b.n	8004d48 <HAL_I2C_Init+0x1dc>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d111      	bne.n	8004cd4 <HAL_I2C_Init+0x168>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	1e58      	subs	r0, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6859      	ldr	r1, [r3, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	440b      	add	r3, r1
 8004cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bf0c      	ite	eq
 8004ccc:	2301      	moveq	r3, #1
 8004cce:	2300      	movne	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	e012      	b.n	8004cfa <HAL_I2C_Init+0x18e>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1e58      	subs	r0, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6859      	ldr	r1, [r3, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	0099      	lsls	r1, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cea:	3301      	adds	r3, #1
 8004cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	bf0c      	ite	eq
 8004cf4:	2301      	moveq	r3, #1
 8004cf6:	2300      	movne	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_I2C_Init+0x196>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e022      	b.n	8004d48 <HAL_I2C_Init+0x1dc>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10e      	bne.n	8004d28 <HAL_I2C_Init+0x1bc>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1e58      	subs	r0, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6859      	ldr	r1, [r3, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	440b      	add	r3, r1
 8004d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d26:	e00f      	b.n	8004d48 <HAL_I2C_Init+0x1dc>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	1e58      	subs	r0, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6859      	ldr	r1, [r3, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	0099      	lsls	r1, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d3e:	3301      	adds	r3, #1
 8004d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	6809      	ldr	r1, [r1, #0]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69da      	ldr	r2, [r3, #28]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6911      	ldr	r1, [r2, #16]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	68d2      	ldr	r2, [r2, #12]
 8004d82:	4311      	orrs	r1, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	000186a0 	.word	0x000186a0
 8004de4:	001e847f 	.word	0x001e847f
 8004de8:	003d08ff 	.word	0x003d08ff
 8004dec:	431bde83 	.word	0x431bde83
 8004df0:	10624dd3 	.word	0x10624dd3

08004df4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b20      	cmp	r3, #32
 8004e08:	d129      	bne.n	8004e5e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2224      	movs	r2, #36	; 0x24
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0201 	bic.w	r2, r2, #1
 8004e20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0210 	bic.w	r2, r2, #16
 8004e30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 0201 	orr.w	r2, r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e000      	b.n	8004e60 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004e5e:	2302      	movs	r3, #2
  }
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	d12a      	bne.n	8004edc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2224      	movs	r2, #36	; 0x24
 8004e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0201 	bic.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004ea6:	89fb      	ldrh	r3, [r7, #14]
 8004ea8:	f023 030f 	bic.w	r3, r3, #15
 8004eac:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	89fb      	ldrh	r3, [r7, #14]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	89fa      	ldrh	r2, [r7, #14]
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e000      	b.n	8004ede <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004edc:	2302      	movs	r3, #2
  }
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
	...

08004eec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e0bf      	b.n	800507e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fc fb6a 	bl	80015ec <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004f2e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6999      	ldr	r1, [r3, #24]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f44:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6899      	ldr	r1, [r3, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	4b4a      	ldr	r3, [pc, #296]	; (8005088 <HAL_LTDC_Init+0x19c>)
 8004f60:	400b      	ands	r3, r1
 8004f62:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	041b      	lsls	r3, r3, #16
 8004f6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6899      	ldr	r1, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68d9      	ldr	r1, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	4b3e      	ldr	r3, [pc, #248]	; (8005088 <HAL_LTDC_Init+0x19c>)
 8004f8e:	400b      	ands	r3, r1
 8004f90:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	041b      	lsls	r3, r3, #16
 8004f98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68d9      	ldr	r1, [r3, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1a      	ldr	r2, [r3, #32]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6919      	ldr	r1, [r3, #16]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b33      	ldr	r3, [pc, #204]	; (8005088 <HAL_LTDC_Init+0x19c>)
 8004fbc:	400b      	ands	r3, r1
 8004fbe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	041b      	lsls	r3, r3, #16
 8004fc6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6919      	ldr	r1, [r3, #16]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6959      	ldr	r1, [r3, #20]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	4b27      	ldr	r3, [pc, #156]	; (8005088 <HAL_LTDC_Init+0x19c>)
 8004fea:	400b      	ands	r3, r1
 8004fec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	041b      	lsls	r3, r3, #16
 8004ff4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6959      	ldr	r1, [r3, #20]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005012:	021b      	lsls	r3, r3, #8
 8005014:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800501c:	041b      	lsls	r3, r3, #16
 800501e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800502e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0206 	orr.w	r2, r2, #6
 800505a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	f000f800 	.word	0xf000f800

0800508c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f003 0304 	and.w	r3, r3, #4
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d023      	beq.n	80050f6 <HAL_LTDC_IRQHandler+0x6a>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01e      	beq.n	80050f6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0204 	bic.w	r2, r2, #4
 80050c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2204      	movs	r2, #4
 80050ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050d6:	f043 0201 	orr.w	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2204      	movs	r2, #4
 80050e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f86f 	bl	80051d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d023      	beq.n	8005148 <HAL_LTDC_IRQHandler+0xbc>
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d01e      	beq.n	8005148 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0202 	bic.w	r2, r2, #2
 8005118:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2202      	movs	r2, #2
 8005120:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005128:	f043 0202 	orr.w	r2, r3, #2
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2204      	movs	r2, #4
 8005136:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f846 	bl	80051d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d01b      	beq.n	800518a <HAL_LTDC_IRQHandler+0xfe>
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d016      	beq.n	800518a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0201 	bic.w	r2, r2, #1
 800516a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2201      	movs	r2, #1
 8005172:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f82f 	bl	80051e8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01b      	beq.n	80051cc <HAL_LTDC_IRQHandler+0x140>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0208 	bic.w	r2, r2, #8
 80051ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2208      	movs	r2, #8
 80051b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f818 	bl	80051fc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80051cc:	bf00      	nop
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005210:	b5b0      	push	{r4, r5, r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <HAL_LTDC_ConfigLayer+0x1a>
 8005226:	2302      	movs	r3, #2
 8005228:	e02c      	b.n	8005284 <HAL_LTDC_ConfigLayer+0x74>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2202      	movs	r2, #2
 8005236:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2134      	movs	r1, #52	; 0x34
 8005240:	fb01 f303 	mul.w	r3, r1, r3
 8005244:	4413      	add	r3, r2
 8005246:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	4614      	mov	r4, r2
 800524e:	461d      	mov	r5, r3
 8005250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800525a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	68b9      	ldr	r1, [r7, #8]
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 f811 	bl	800528c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2201      	movs	r2, #1
 8005270:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bdb0      	pop	{r4, r5, r7, pc}

0800528c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800528c:	b480      	push	{r7}
 800528e:	b089      	sub	sp, #36	; 0x24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	0c1b      	lsrs	r3, r3, #16
 80052a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052a8:	4413      	add	r3, r2
 80052aa:	041b      	lsls	r3, r3, #16
 80052ac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	01db      	lsls	r3, r3, #7
 80052b8:	4413      	add	r3, r2
 80052ba:	3384      	adds	r3, #132	; 0x84
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	4611      	mov	r1, r2
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	01d2      	lsls	r2, r2, #7
 80052c8:	440a      	add	r2, r1
 80052ca:	3284      	adds	r2, #132	; 0x84
 80052cc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80052d0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	0c1b      	lsrs	r3, r3, #16
 80052de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e2:	4413      	add	r3, r2
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4619      	mov	r1, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	01db      	lsls	r3, r3, #7
 80052f0:	440b      	add	r3, r1
 80052f2:	3384      	adds	r3, #132	; 0x84
 80052f4:	4619      	mov	r1, r3
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800530a:	4413      	add	r3, r2
 800530c:	041b      	lsls	r3, r3, #16
 800530e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	461a      	mov	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	01db      	lsls	r3, r3, #7
 800531a:	4413      	add	r3, r2
 800531c:	3384      	adds	r3, #132	; 0x84
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	4611      	mov	r1, r2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	01d2      	lsls	r2, r2, #7
 800532a:	440a      	add	r2, r1
 800532c:	3284      	adds	r2, #132	; 0x84
 800532e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005332:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005342:	4413      	add	r3, r2
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4619      	mov	r1, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	01db      	lsls	r3, r3, #7
 8005350:	440b      	add	r3, r1
 8005352:	3384      	adds	r3, #132	; 0x84
 8005354:	4619      	mov	r1, r3
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	4313      	orrs	r3, r2
 800535a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	01db      	lsls	r3, r3, #7
 8005366:	4413      	add	r3, r2
 8005368:	3384      	adds	r3, #132	; 0x84
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	4611      	mov	r1, r2
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	01d2      	lsls	r2, r2, #7
 8005376:	440a      	add	r2, r1
 8005378:	3284      	adds	r2, #132	; 0x84
 800537a:	f023 0307 	bic.w	r3, r3, #7
 800537e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	01db      	lsls	r3, r3, #7
 800538a:	4413      	add	r3, r2
 800538c:	3384      	adds	r3, #132	; 0x84
 800538e:	461a      	mov	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800539c:	021b      	lsls	r3, r3, #8
 800539e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80053a6:	041b      	lsls	r3, r3, #16
 80053a8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	061b      	lsls	r3, r3, #24
 80053b0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	01db      	lsls	r3, r3, #7
 80053bc:	4413      	add	r3, r2
 80053be:	3384      	adds	r3, #132	; 0x84
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	01db      	lsls	r3, r3, #7
 80053cc:	4413      	add	r3, r2
 80053ce:	3384      	adds	r3, #132	; 0x84
 80053d0:	461a      	mov	r2, r3
 80053d2:	2300      	movs	r3, #0
 80053d4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053dc:	461a      	mov	r2, r3
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	431a      	orrs	r2, r3
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	431a      	orrs	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4619      	mov	r1, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	01db      	lsls	r3, r3, #7
 80053f0:	440b      	add	r3, r1
 80053f2:	3384      	adds	r3, #132	; 0x84
 80053f4:	4619      	mov	r1, r3
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	461a      	mov	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	01db      	lsls	r3, r3, #7
 8005406:	4413      	add	r3, r2
 8005408:	3384      	adds	r3, #132	; 0x84
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	4611      	mov	r1, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	01d2      	lsls	r2, r2, #7
 8005416:	440a      	add	r2, r1
 8005418:	3284      	adds	r2, #132	; 0x84
 800541a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800541e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	01db      	lsls	r3, r3, #7
 800542a:	4413      	add	r3, r2
 800542c:	3384      	adds	r3, #132	; 0x84
 800542e:	461a      	mov	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	01db      	lsls	r3, r3, #7
 8005440:	4413      	add	r3, r2
 8005442:	3384      	adds	r3, #132	; 0x84
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	4611      	mov	r1, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	01d2      	lsls	r2, r2, #7
 8005450:	440a      	add	r2, r1
 8005452:	3284      	adds	r2, #132	; 0x84
 8005454:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005458:	f023 0307 	bic.w	r3, r3, #7
 800545c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	68f9      	ldr	r1, [r7, #12]
 8005468:	6809      	ldr	r1, [r1, #0]
 800546a:	4608      	mov	r0, r1
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	01c9      	lsls	r1, r1, #7
 8005470:	4401      	add	r1, r0
 8005472:	3184      	adds	r1, #132	; 0x84
 8005474:	4313      	orrs	r3, r2
 8005476:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	01db      	lsls	r3, r3, #7
 8005482:	4413      	add	r3, r2
 8005484:	3384      	adds	r3, #132	; 0x84
 8005486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	461a      	mov	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	01db      	lsls	r3, r3, #7
 8005492:	4413      	add	r3, r2
 8005494:	3384      	adds	r3, #132	; 0x84
 8005496:	461a      	mov	r2, r3
 8005498:	2300      	movs	r3, #0
 800549a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	01db      	lsls	r3, r3, #7
 80054a6:	4413      	add	r3, r2
 80054a8:	3384      	adds	r3, #132	; 0x84
 80054aa:	461a      	mov	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d102      	bne.n	80054c0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80054ba:	2304      	movs	r3, #4
 80054bc:	61fb      	str	r3, [r7, #28]
 80054be:	e01b      	b.n	80054f8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d102      	bne.n	80054ce <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80054c8:	2303      	movs	r3, #3
 80054ca:	61fb      	str	r3, [r7, #28]
 80054cc:	e014      	b.n	80054f8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d00b      	beq.n	80054ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d007      	beq.n	80054ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d003      	beq.n	80054ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80054ea:	2b07      	cmp	r3, #7
 80054ec:	d102      	bne.n	80054f4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80054ee:	2302      	movs	r3, #2
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	e001      	b.n	80054f8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80054f4:	2301      	movs	r3, #1
 80054f6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	461a      	mov	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	01db      	lsls	r3, r3, #7
 8005502:	4413      	add	r3, r2
 8005504:	3384      	adds	r3, #132	; 0x84
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	4611      	mov	r1, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	01d2      	lsls	r2, r2, #7
 8005512:	440a      	add	r2, r1
 8005514:	3284      	adds	r2, #132	; 0x84
 8005516:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800551a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	fb02 f303 	mul.w	r3, r2, r3
 8005526:	041a      	lsls	r2, r3, #16
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	6859      	ldr	r1, [r3, #4]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	1acb      	subs	r3, r1, r3
 8005532:	69f9      	ldr	r1, [r7, #28]
 8005534:	fb01 f303 	mul.w	r3, r1, r3
 8005538:	3303      	adds	r3, #3
 800553a:	68f9      	ldr	r1, [r7, #12]
 800553c:	6809      	ldr	r1, [r1, #0]
 800553e:	4608      	mov	r0, r1
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	01c9      	lsls	r1, r1, #7
 8005544:	4401      	add	r1, r0
 8005546:	3184      	adds	r1, #132	; 0x84
 8005548:	4313      	orrs	r3, r2
 800554a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	461a      	mov	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	01db      	lsls	r3, r3, #7
 8005556:	4413      	add	r3, r2
 8005558:	3384      	adds	r3, #132	; 0x84
 800555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	6812      	ldr	r2, [r2, #0]
 8005560:	4611      	mov	r1, r2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	01d2      	lsls	r2, r2, #7
 8005566:	440a      	add	r2, r1
 8005568:	3284      	adds	r2, #132	; 0x84
 800556a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800556e:	f023 0307 	bic.w	r3, r3, #7
 8005572:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	461a      	mov	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	01db      	lsls	r3, r3, #7
 800557e:	4413      	add	r3, r2
 8005580:	3384      	adds	r3, #132	; 0x84
 8005582:	461a      	mov	r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	01db      	lsls	r3, r3, #7
 8005594:	4413      	add	r3, r2
 8005596:	3384      	adds	r3, #132	; 0x84
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	6812      	ldr	r2, [r2, #0]
 800559e:	4611      	mov	r1, r2
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	01d2      	lsls	r2, r2, #7
 80055a4:	440a      	add	r2, r1
 80055a6:	3284      	adds	r2, #132	; 0x84
 80055a8:	f043 0301 	orr.w	r3, r3, #1
 80055ac:	6013      	str	r3, [r2, #0]
}
 80055ae:	bf00      	nop
 80055b0:	3724      	adds	r7, #36	; 0x24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
	...

080055bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e264      	b.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d075      	beq.n	80056c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055da:	4ba3      	ldr	r3, [pc, #652]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 030c 	and.w	r3, r3, #12
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d00c      	beq.n	8005600 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055e6:	4ba0      	ldr	r3, [pc, #640]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d112      	bne.n	8005618 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055f2:	4b9d      	ldr	r3, [pc, #628]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055fe:	d10b      	bne.n	8005618 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005600:	4b99      	ldr	r3, [pc, #612]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d05b      	beq.n	80056c4 <HAL_RCC_OscConfig+0x108>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d157      	bne.n	80056c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e23f      	b.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005620:	d106      	bne.n	8005630 <HAL_RCC_OscConfig+0x74>
 8005622:	4b91      	ldr	r3, [pc, #580]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a90      	ldr	r2, [pc, #576]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 8005628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	e01d      	b.n	800566c <HAL_RCC_OscConfig+0xb0>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005638:	d10c      	bne.n	8005654 <HAL_RCC_OscConfig+0x98>
 800563a:	4b8b      	ldr	r3, [pc, #556]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a8a      	ldr	r2, [pc, #552]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 8005640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	4b88      	ldr	r3, [pc, #544]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a87      	ldr	r2, [pc, #540]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 800564c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	e00b      	b.n	800566c <HAL_RCC_OscConfig+0xb0>
 8005654:	4b84      	ldr	r3, [pc, #528]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a83      	ldr	r2, [pc, #524]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 800565a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	4b81      	ldr	r3, [pc, #516]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a80      	ldr	r2, [pc, #512]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 8005666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800566a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d013      	beq.n	800569c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005674:	f7fd f9cc 	bl	8002a10 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800567c:	f7fd f9c8 	bl	8002a10 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b64      	cmp	r3, #100	; 0x64
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e204      	b.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568e:	4b76      	ldr	r3, [pc, #472]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0f0      	beq.n	800567c <HAL_RCC_OscConfig+0xc0>
 800569a:	e014      	b.n	80056c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800569c:	f7fd f9b8 	bl	8002a10 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056a4:	f7fd f9b4 	bl	8002a10 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b64      	cmp	r3, #100	; 0x64
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e1f0      	b.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056b6:	4b6c      	ldr	r3, [pc, #432]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f0      	bne.n	80056a4 <HAL_RCC_OscConfig+0xe8>
 80056c2:	e000      	b.n	80056c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d063      	beq.n	800579a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056d2:	4b65      	ldr	r3, [pc, #404]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 030c 	and.w	r3, r3, #12
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00b      	beq.n	80056f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056de:	4b62      	ldr	r3, [pc, #392]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d11c      	bne.n	8005724 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ea:	4b5f      	ldr	r3, [pc, #380]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d116      	bne.n	8005724 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056f6:	4b5c      	ldr	r3, [pc, #368]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <HAL_RCC_OscConfig+0x152>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d001      	beq.n	800570e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e1c4      	b.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800570e:	4b56      	ldr	r3, [pc, #344]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4952      	ldr	r1, [pc, #328]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 800571e:	4313      	orrs	r3, r2
 8005720:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005722:	e03a      	b.n	800579a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d020      	beq.n	800576e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800572c:	4b4f      	ldr	r3, [pc, #316]	; (800586c <HAL_RCC_OscConfig+0x2b0>)
 800572e:	2201      	movs	r2, #1
 8005730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005732:	f7fd f96d 	bl	8002a10 <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800573a:	f7fd f969 	bl	8002a10 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e1a5      	b.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800574c:	4b46      	ldr	r3, [pc, #280]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0f0      	beq.n	800573a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005758:	4b43      	ldr	r3, [pc, #268]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	4940      	ldr	r1, [pc, #256]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 8005768:	4313      	orrs	r3, r2
 800576a:	600b      	str	r3, [r1, #0]
 800576c:	e015      	b.n	800579a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800576e:	4b3f      	ldr	r3, [pc, #252]	; (800586c <HAL_RCC_OscConfig+0x2b0>)
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005774:	f7fd f94c 	bl	8002a10 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800577c:	f7fd f948 	bl	8002a10 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e184      	b.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800578e:	4b36      	ldr	r3, [pc, #216]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f0      	bne.n	800577c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0308 	and.w	r3, r3, #8
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d030      	beq.n	8005808 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d016      	beq.n	80057dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ae:	4b30      	ldr	r3, [pc, #192]	; (8005870 <HAL_RCC_OscConfig+0x2b4>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b4:	f7fd f92c 	bl	8002a10 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057bc:	f7fd f928 	bl	8002a10 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e164      	b.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ce:	4b26      	ldr	r3, [pc, #152]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 80057d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f0      	beq.n	80057bc <HAL_RCC_OscConfig+0x200>
 80057da:	e015      	b.n	8005808 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057dc:	4b24      	ldr	r3, [pc, #144]	; (8005870 <HAL_RCC_OscConfig+0x2b4>)
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e2:	f7fd f915 	bl	8002a10 <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057e8:	e008      	b.n	80057fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057ea:	f7fd f911 	bl	8002a10 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e14d      	b.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057fc:	4b1a      	ldr	r3, [pc, #104]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 80057fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1f0      	bne.n	80057ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 80a0 	beq.w	8005956 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005816:	2300      	movs	r3, #0
 8005818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800581a:	4b13      	ldr	r3, [pc, #76]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10f      	bne.n	8005846 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005826:	2300      	movs	r3, #0
 8005828:	60bb      	str	r3, [r7, #8]
 800582a:	4b0f      	ldr	r3, [pc, #60]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	4a0e      	ldr	r2, [pc, #56]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 8005830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005834:	6413      	str	r3, [r2, #64]	; 0x40
 8005836:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <HAL_RCC_OscConfig+0x2ac>)
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583e:	60bb      	str	r3, [r7, #8]
 8005840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005842:	2301      	movs	r3, #1
 8005844:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005846:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <HAL_RCC_OscConfig+0x2b8>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584e:	2b00      	cmp	r3, #0
 8005850:	d121      	bne.n	8005896 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005852:	4b08      	ldr	r3, [pc, #32]	; (8005874 <HAL_RCC_OscConfig+0x2b8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a07      	ldr	r2, [pc, #28]	; (8005874 <HAL_RCC_OscConfig+0x2b8>)
 8005858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800585e:	f7fd f8d7 	bl	8002a10 <HAL_GetTick>
 8005862:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005864:	e011      	b.n	800588a <HAL_RCC_OscConfig+0x2ce>
 8005866:	bf00      	nop
 8005868:	40023800 	.word	0x40023800
 800586c:	42470000 	.word	0x42470000
 8005870:	42470e80 	.word	0x42470e80
 8005874:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005878:	f7fd f8ca 	bl	8002a10 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e106      	b.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800588a:	4b85      	ldr	r3, [pc, #532]	; (8005aa0 <HAL_RCC_OscConfig+0x4e4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0f0      	beq.n	8005878 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d106      	bne.n	80058ac <HAL_RCC_OscConfig+0x2f0>
 800589e:	4b81      	ldr	r3, [pc, #516]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a2:	4a80      	ldr	r2, [pc, #512]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	6713      	str	r3, [r2, #112]	; 0x70
 80058aa:	e01c      	b.n	80058e6 <HAL_RCC_OscConfig+0x32a>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2b05      	cmp	r3, #5
 80058b2:	d10c      	bne.n	80058ce <HAL_RCC_OscConfig+0x312>
 80058b4:	4b7b      	ldr	r3, [pc, #492]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b8:	4a7a      	ldr	r2, [pc, #488]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058ba:	f043 0304 	orr.w	r3, r3, #4
 80058be:	6713      	str	r3, [r2, #112]	; 0x70
 80058c0:	4b78      	ldr	r3, [pc, #480]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c4:	4a77      	ldr	r2, [pc, #476]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	6713      	str	r3, [r2, #112]	; 0x70
 80058cc:	e00b      	b.n	80058e6 <HAL_RCC_OscConfig+0x32a>
 80058ce:	4b75      	ldr	r3, [pc, #468]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d2:	4a74      	ldr	r2, [pc, #464]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058d4:	f023 0301 	bic.w	r3, r3, #1
 80058d8:	6713      	str	r3, [r2, #112]	; 0x70
 80058da:	4b72      	ldr	r3, [pc, #456]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058de:	4a71      	ldr	r2, [pc, #452]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80058e0:	f023 0304 	bic.w	r3, r3, #4
 80058e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d015      	beq.n	800591a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ee:	f7fd f88f 	bl	8002a10 <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f4:	e00a      	b.n	800590c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058f6:	f7fd f88b 	bl	8002a10 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	f241 3288 	movw	r2, #5000	; 0x1388
 8005904:	4293      	cmp	r3, r2
 8005906:	d901      	bls.n	800590c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e0c5      	b.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800590c:	4b65      	ldr	r3, [pc, #404]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 800590e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0ee      	beq.n	80058f6 <HAL_RCC_OscConfig+0x33a>
 8005918:	e014      	b.n	8005944 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800591a:	f7fd f879 	bl	8002a10 <HAL_GetTick>
 800591e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005920:	e00a      	b.n	8005938 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005922:	f7fd f875 	bl	8002a10 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005930:	4293      	cmp	r3, r2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e0af      	b.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005938:	4b5a      	ldr	r3, [pc, #360]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 800593a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1ee      	bne.n	8005922 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005944:	7dfb      	ldrb	r3, [r7, #23]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d105      	bne.n	8005956 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800594a:	4b56      	ldr	r3, [pc, #344]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	4a55      	ldr	r2, [pc, #340]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005954:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 809b 	beq.w	8005a96 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005960:	4b50      	ldr	r3, [pc, #320]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 030c 	and.w	r3, r3, #12
 8005968:	2b08      	cmp	r3, #8
 800596a:	d05c      	beq.n	8005a26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d141      	bne.n	80059f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005974:	4b4c      	ldr	r3, [pc, #304]	; (8005aa8 <HAL_RCC_OscConfig+0x4ec>)
 8005976:	2200      	movs	r2, #0
 8005978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597a:	f7fd f849 	bl	8002a10 <HAL_GetTick>
 800597e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005980:	e008      	b.n	8005994 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005982:	f7fd f845 	bl	8002a10 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e081      	b.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005994:	4b43      	ldr	r3, [pc, #268]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1f0      	bne.n	8005982 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	019b      	lsls	r3, r3, #6
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	3b01      	subs	r3, #1
 80059ba:	041b      	lsls	r3, r3, #16
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c2:	061b      	lsls	r3, r3, #24
 80059c4:	4937      	ldr	r1, [pc, #220]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059ca:	4b37      	ldr	r3, [pc, #220]	; (8005aa8 <HAL_RCC_OscConfig+0x4ec>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d0:	f7fd f81e 	bl	8002a10 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059d8:	f7fd f81a 	bl	8002a10 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e056      	b.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ea:	4b2e      	ldr	r3, [pc, #184]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0x41c>
 80059f6:	e04e      	b.n	8005a96 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f8:	4b2b      	ldr	r3, [pc, #172]	; (8005aa8 <HAL_RCC_OscConfig+0x4ec>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fe:	f7fd f807 	bl	8002a10 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a06:	f7fd f803 	bl	8002a10 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e03f      	b.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a18:	4b22      	ldr	r3, [pc, #136]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1f0      	bne.n	8005a06 <HAL_RCC_OscConfig+0x44a>
 8005a24:	e037      	b.n	8005a96 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e032      	b.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a32:	4b1c      	ldr	r3, [pc, #112]	; (8005aa4 <HAL_RCC_OscConfig+0x4e8>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d028      	beq.n	8005a92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d121      	bne.n	8005a92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d11a      	bne.n	8005a92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a62:	4013      	ands	r3, r2
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a68:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d111      	bne.n	8005a92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a78:	085b      	lsrs	r3, r3, #1
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d107      	bne.n	8005a92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d001      	beq.n	8005a96 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40007000 	.word	0x40007000
 8005aa4:	40023800 	.word	0x40023800
 8005aa8:	42470060 	.word	0x42470060

08005aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e0cc      	b.n	8005c5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ac0:	4b68      	ldr	r3, [pc, #416]	; (8005c64 <HAL_RCC_ClockConfig+0x1b8>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d90c      	bls.n	8005ae8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ace:	4b65      	ldr	r3, [pc, #404]	; (8005c64 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad6:	4b63      	ldr	r3, [pc, #396]	; (8005c64 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d001      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e0b8      	b.n	8005c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d020      	beq.n	8005b36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d005      	beq.n	8005b0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b00:	4b59      	ldr	r3, [pc, #356]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	4a58      	ldr	r2, [pc, #352]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0308 	and.w	r3, r3, #8
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b18:	4b53      	ldr	r3, [pc, #332]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	4a52      	ldr	r2, [pc, #328]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b24:	4b50      	ldr	r3, [pc, #320]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	494d      	ldr	r1, [pc, #308]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d044      	beq.n	8005bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d107      	bne.n	8005b5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b4a:	4b47      	ldr	r3, [pc, #284]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d119      	bne.n	8005b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e07f      	b.n	8005c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d003      	beq.n	8005b6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d107      	bne.n	8005b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b6a:	4b3f      	ldr	r3, [pc, #252]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d109      	bne.n	8005b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e06f      	b.n	8005c5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b7a:	4b3b      	ldr	r3, [pc, #236]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e067      	b.n	8005c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b8a:	4b37      	ldr	r3, [pc, #220]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f023 0203 	bic.w	r2, r3, #3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	4934      	ldr	r1, [pc, #208]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b9c:	f7fc ff38 	bl	8002a10 <HAL_GetTick>
 8005ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba2:	e00a      	b.n	8005bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba4:	f7fc ff34 	bl	8002a10 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e04f      	b.n	8005c5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bba:	4b2b      	ldr	r3, [pc, #172]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 020c 	and.w	r2, r3, #12
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d1eb      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bcc:	4b25      	ldr	r3, [pc, #148]	; (8005c64 <HAL_RCC_ClockConfig+0x1b8>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 030f 	and.w	r3, r3, #15
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d20c      	bcs.n	8005bf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bda:	4b22      	ldr	r3, [pc, #136]	; (8005c64 <HAL_RCC_ClockConfig+0x1b8>)
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005be2:	4b20      	ldr	r3, [pc, #128]	; (8005c64 <HAL_RCC_ClockConfig+0x1b8>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d001      	beq.n	8005bf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e032      	b.n	8005c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d008      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c00:	4b19      	ldr	r3, [pc, #100]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	4916      	ldr	r1, [pc, #88]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c1e:	4b12      	ldr	r3, [pc, #72]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	490e      	ldr	r1, [pc, #56]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c32:	f000 f821 	bl	8005c78 <HAL_RCC_GetSysClockFreq>
 8005c36:	4602      	mov	r2, r0
 8005c38:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	091b      	lsrs	r3, r3, #4
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	490a      	ldr	r1, [pc, #40]	; (8005c6c <HAL_RCC_ClockConfig+0x1c0>)
 8005c44:	5ccb      	ldrb	r3, [r1, r3]
 8005c46:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4a:	4a09      	ldr	r2, [pc, #36]	; (8005c70 <HAL_RCC_ClockConfig+0x1c4>)
 8005c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c4e:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <HAL_RCC_ClockConfig+0x1c8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fc fb00 	bl	8002258 <HAL_InitTick>

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	40023c00 	.word	0x40023c00
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	080092cc 	.word	0x080092cc
 8005c70:	20000008 	.word	0x20000008
 8005c74:	2000000c 	.word	0x2000000c

08005c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	607b      	str	r3, [r7, #4]
 8005c84:	2300      	movs	r3, #0
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	2300      	movs	r3, #0
 8005c8a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c90:	4b67      	ldr	r3, [pc, #412]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f003 030c 	and.w	r3, r3, #12
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d00d      	beq.n	8005cb8 <HAL_RCC_GetSysClockFreq+0x40>
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	f200 80bd 	bhi.w	8005e1c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <HAL_RCC_GetSysClockFreq+0x34>
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d003      	beq.n	8005cb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005caa:	e0b7      	b.n	8005e1c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cac:	4b61      	ldr	r3, [pc, #388]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005cae:	60bb      	str	r3, [r7, #8]
       break;
 8005cb0:	e0b7      	b.n	8005e22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cb2:	4b61      	ldr	r3, [pc, #388]	; (8005e38 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005cb4:	60bb      	str	r3, [r7, #8]
      break;
 8005cb6:	e0b4      	b.n	8005e22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cb8:	4b5d      	ldr	r3, [pc, #372]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cc0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cc2:	4b5b      	ldr	r3, [pc, #364]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d04d      	beq.n	8005d6a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cce:	4b58      	ldr	r3, [pc, #352]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	099b      	lsrs	r3, r3, #6
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f04f 0300 	mov.w	r3, #0
 8005cda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005cde:	f04f 0100 	mov.w	r1, #0
 8005ce2:	ea02 0800 	and.w	r8, r2, r0
 8005ce6:	ea03 0901 	and.w	r9, r3, r1
 8005cea:	4640      	mov	r0, r8
 8005cec:	4649      	mov	r1, r9
 8005cee:	f04f 0200 	mov.w	r2, #0
 8005cf2:	f04f 0300 	mov.w	r3, #0
 8005cf6:	014b      	lsls	r3, r1, #5
 8005cf8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005cfc:	0142      	lsls	r2, r0, #5
 8005cfe:	4610      	mov	r0, r2
 8005d00:	4619      	mov	r1, r3
 8005d02:	ebb0 0008 	subs.w	r0, r0, r8
 8005d06:	eb61 0109 	sbc.w	r1, r1, r9
 8005d0a:	f04f 0200 	mov.w	r2, #0
 8005d0e:	f04f 0300 	mov.w	r3, #0
 8005d12:	018b      	lsls	r3, r1, #6
 8005d14:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d18:	0182      	lsls	r2, r0, #6
 8005d1a:	1a12      	subs	r2, r2, r0
 8005d1c:	eb63 0301 	sbc.w	r3, r3, r1
 8005d20:	f04f 0000 	mov.w	r0, #0
 8005d24:	f04f 0100 	mov.w	r1, #0
 8005d28:	00d9      	lsls	r1, r3, #3
 8005d2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d2e:	00d0      	lsls	r0, r2, #3
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	eb12 0208 	adds.w	r2, r2, r8
 8005d38:	eb43 0309 	adc.w	r3, r3, r9
 8005d3c:	f04f 0000 	mov.w	r0, #0
 8005d40:	f04f 0100 	mov.w	r1, #0
 8005d44:	0259      	lsls	r1, r3, #9
 8005d46:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005d4a:	0250      	lsls	r0, r2, #9
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4610      	mov	r0, r2
 8005d52:	4619      	mov	r1, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	461a      	mov	r2, r3
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	f7fa fed4 	bl	8000b08 <__aeabi_uldivmod>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4613      	mov	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	e04a      	b.n	8005e00 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d6a:	4b31      	ldr	r3, [pc, #196]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	099b      	lsrs	r3, r3, #6
 8005d70:	461a      	mov	r2, r3
 8005d72:	f04f 0300 	mov.w	r3, #0
 8005d76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d7a:	f04f 0100 	mov.w	r1, #0
 8005d7e:	ea02 0400 	and.w	r4, r2, r0
 8005d82:	ea03 0501 	and.w	r5, r3, r1
 8005d86:	4620      	mov	r0, r4
 8005d88:	4629      	mov	r1, r5
 8005d8a:	f04f 0200 	mov.w	r2, #0
 8005d8e:	f04f 0300 	mov.w	r3, #0
 8005d92:	014b      	lsls	r3, r1, #5
 8005d94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d98:	0142      	lsls	r2, r0, #5
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	1b00      	subs	r0, r0, r4
 8005da0:	eb61 0105 	sbc.w	r1, r1, r5
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	f04f 0300 	mov.w	r3, #0
 8005dac:	018b      	lsls	r3, r1, #6
 8005dae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005db2:	0182      	lsls	r2, r0, #6
 8005db4:	1a12      	subs	r2, r2, r0
 8005db6:	eb63 0301 	sbc.w	r3, r3, r1
 8005dba:	f04f 0000 	mov.w	r0, #0
 8005dbe:	f04f 0100 	mov.w	r1, #0
 8005dc2:	00d9      	lsls	r1, r3, #3
 8005dc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dc8:	00d0      	lsls	r0, r2, #3
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	1912      	adds	r2, r2, r4
 8005dd0:	eb45 0303 	adc.w	r3, r5, r3
 8005dd4:	f04f 0000 	mov.w	r0, #0
 8005dd8:	f04f 0100 	mov.w	r1, #0
 8005ddc:	0299      	lsls	r1, r3, #10
 8005dde:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005de2:	0290      	lsls	r0, r2, #10
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	4610      	mov	r0, r2
 8005dea:	4619      	mov	r1, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	f7fa fe88 	bl	8000b08 <__aeabi_uldivmod>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e00:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	0c1b      	lsrs	r3, r3, #16
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e18:	60bb      	str	r3, [r7, #8]
      break;
 8005e1a:	e002      	b.n	8005e22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e1c:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e1e:	60bb      	str	r3, [r7, #8]
      break;
 8005e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e22:	68bb      	ldr	r3, [r7, #8]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005e2e:	bf00      	nop
 8005e30:	40023800 	.word	0x40023800
 8005e34:	00f42400 	.word	0x00f42400
 8005e38:	007a1200 	.word	0x007a1200

08005e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e40:	4b03      	ldr	r3, [pc, #12]	; (8005e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e42:	681b      	ldr	r3, [r3, #0]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	20000008 	.word	0x20000008

08005e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e58:	f7ff fff0 	bl	8005e3c <HAL_RCC_GetHCLKFreq>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	0a9b      	lsrs	r3, r3, #10
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	4903      	ldr	r1, [pc, #12]	; (8005e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e6a:	5ccb      	ldrb	r3, [r1, r3]
 8005e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40023800 	.word	0x40023800
 8005e78:	080092dc 	.word	0x080092dc

08005e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e80:	f7ff ffdc 	bl	8005e3c <HAL_RCC_GetHCLKFreq>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	0b5b      	lsrs	r3, r3, #13
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	4903      	ldr	r1, [pc, #12]	; (8005ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e92:	5ccb      	ldrb	r3, [r1, r3]
 8005e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	40023800 	.word	0x40023800
 8005ea0:	080092dc 	.word	0x080092dc

08005ea4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	220f      	movs	r2, #15
 8005eb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005eb4:	4b12      	ldr	r3, [pc, #72]	; (8005f00 <HAL_RCC_GetClockConfig+0x5c>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 0203 	and.w	r2, r3, #3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ec0:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <HAL_RCC_GetClockConfig+0x5c>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ecc:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <HAL_RCC_GetClockConfig+0x5c>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ed8:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <HAL_RCC_GetClockConfig+0x5c>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	08db      	lsrs	r3, r3, #3
 8005ede:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ee6:	4b07      	ldr	r3, [pc, #28]	; (8005f04 <HAL_RCC_GetClockConfig+0x60>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 020f 	and.w	r2, r3, #15
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	601a      	str	r2, [r3, #0]
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	40023800 	.word	0x40023800
 8005f04:	40023c00 	.word	0x40023c00

08005f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10b      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d105      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d075      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f3c:	4bad      	ldr	r3, [pc, #692]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f42:	f7fc fd65 	bl	8002a10 <HAL_GetTick>
 8005f46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f48:	e008      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f4a:	f7fc fd61 	bl	8002a10 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e18b      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f5c:	4ba6      	ldr	r3, [pc, #664]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1f0      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d009      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	019a      	lsls	r2, r3, #6
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	071b      	lsls	r3, r3, #28
 8005f80:	499d      	ldr	r1, [pc, #628]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01f      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f94:	4b98      	ldr	r3, [pc, #608]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f9a:	0f1b      	lsrs	r3, r3, #28
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	019a      	lsls	r2, r3, #6
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	061b      	lsls	r3, r3, #24
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	071b      	lsls	r3, r3, #28
 8005fb4:	4990      	ldr	r1, [pc, #576]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005fbc:	4b8e      	ldr	r3, [pc, #568]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fc2:	f023 021f 	bic.w	r2, r3, #31
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	498a      	ldr	r1, [pc, #552]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00d      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	019a      	lsls	r2, r3, #6
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	061b      	lsls	r3, r3, #24
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	071b      	lsls	r3, r3, #28
 8005ff4:	4980      	ldr	r1, [pc, #512]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ffc:	4b7d      	ldr	r3, [pc, #500]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006002:	f7fc fd05 	bl	8002a10 <HAL_GetTick>
 8006006:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006008:	e008      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800600a:	f7fc fd01 	bl	8002a10 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d901      	bls.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e12b      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800601c:	4b76      	ldr	r3, [pc, #472]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0f0      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	d105      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800603c:	2b00      	cmp	r3, #0
 800603e:	d079      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006040:	4b6e      	ldr	r3, [pc, #440]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006046:	f7fc fce3 	bl	8002a10 <HAL_GetTick>
 800604a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800604c:	e008      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800604e:	f7fc fcdf 	bl	8002a10 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d901      	bls.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e109      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006060:	4b65      	ldr	r3, [pc, #404]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800606c:	d0ef      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b00      	cmp	r3, #0
 8006078:	d020      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800607a:	4b5f      	ldr	r3, [pc, #380]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800607c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006080:	0f1b      	lsrs	r3, r3, #28
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	019a      	lsls	r2, r3, #6
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	061b      	lsls	r3, r3, #24
 8006094:	431a      	orrs	r2, r3
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	071b      	lsls	r3, r3, #28
 800609a:	4957      	ldr	r1, [pc, #348]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800609c:	4313      	orrs	r3, r2
 800609e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80060a2:	4b55      	ldr	r3, [pc, #340]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	4950      	ldr	r1, [pc, #320]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01e      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060c8:	4b4b      	ldr	r3, [pc, #300]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ce:	0e1b      	lsrs	r3, r3, #24
 80060d0:	f003 030f 	and.w	r3, r3, #15
 80060d4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	019a      	lsls	r2, r3, #6
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	061b      	lsls	r3, r3, #24
 80060e0:	431a      	orrs	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	071b      	lsls	r3, r3, #28
 80060e8:	4943      	ldr	r1, [pc, #268]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80060f0:	4b41      	ldr	r3, [pc, #260]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	493e      	ldr	r1, [pc, #248]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006100:	4313      	orrs	r3, r2
 8006102:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006106:	4b3d      	ldr	r3, [pc, #244]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006108:	2201      	movs	r2, #1
 800610a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800610c:	f7fc fc80 	bl	8002a10 <HAL_GetTick>
 8006110:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006112:	e008      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006114:	f7fc fc7c 	bl	8002a10 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d901      	bls.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e0a6      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006126:	4b34      	ldr	r3, [pc, #208]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800612e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006132:	d1ef      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0320 	and.w	r3, r3, #32
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 808d 	beq.w	800625c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	4b2c      	ldr	r3, [pc, #176]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	4a2b      	ldr	r2, [pc, #172]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800614c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006150:	6413      	str	r3, [r2, #64]	; 0x40
 8006152:	4b29      	ldr	r3, [pc, #164]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800615e:	4b28      	ldr	r3, [pc, #160]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a27      	ldr	r2, [pc, #156]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006168:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800616a:	f7fc fc51 	bl	8002a10 <HAL_GetTick>
 800616e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006170:	e008      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006172:	f7fc fc4d 	bl	8002a10 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d901      	bls.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e077      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006184:	4b1e      	ldr	r3, [pc, #120]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0f0      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006190:	4b19      	ldr	r3, [pc, #100]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006198:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d039      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d032      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061ae:	4b12      	ldr	r3, [pc, #72]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061b8:	4b12      	ldr	r3, [pc, #72]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80061ba:	2201      	movs	r2, #1
 80061bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061be:	4b11      	ldr	r3, [pc, #68]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80061c4:	4a0c      	ldr	r2, [pc, #48]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061ca:	4b0b      	ldr	r3, [pc, #44]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d11e      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80061d6:	f7fc fc1b 	bl	8002a10 <HAL_GetTick>
 80061da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061dc:	e014      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061de:	f7fc fc17 	bl	8002a10 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d90b      	bls.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e03f      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80061f4:	42470068 	.word	0x42470068
 80061f8:	40023800 	.word	0x40023800
 80061fc:	42470070 	.word	0x42470070
 8006200:	40007000 	.word	0x40007000
 8006204:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006208:	4b1c      	ldr	r3, [pc, #112]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800620a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0e4      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800621c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006220:	d10d      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006222:	4b16      	ldr	r3, [pc, #88]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006236:	4911      	ldr	r1, [pc, #68]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006238:	4313      	orrs	r3, r2
 800623a:	608b      	str	r3, [r1, #8]
 800623c:	e005      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800623e:	4b0f      	ldr	r3, [pc, #60]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	4a0e      	ldr	r2, [pc, #56]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006244:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006248:	6093      	str	r3, [r2, #8]
 800624a:	4b0c      	ldr	r3, [pc, #48]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800624c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006256:	4909      	ldr	r1, [pc, #36]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006258:	4313      	orrs	r3, r2
 800625a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b00      	cmp	r3, #0
 8006266:	d004      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800626e:	4b04      	ldr	r3, [pc, #16]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006270:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40023800 	.word	0x40023800
 8006280:	424711e0 	.word	0x424711e0

08006284 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e025      	b.n	80062e4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d106      	bne.n	80062b2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7fa ff19 	bl	80010e4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2202      	movs	r2, #2
 80062b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	3304      	adds	r3, #4
 80062c2:	4619      	mov	r1, r3
 80062c4:	4610      	mov	r0, r2
 80062c6:	f001 fc8b 	bl	8007be0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	461a      	mov	r2, r3
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	f001 fcf6 	bl	8007cc6 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e07b      	b.n	80063f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	2b00      	cmp	r3, #0
 8006304:	d108      	bne.n	8006318 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800630e:	d009      	beq.n	8006324 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	61da      	str	r2, [r3, #28]
 8006316:	e005      	b.n	8006324 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fb fcfe 	bl	8001d40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800635a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800636c:	431a      	orrs	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a8:	ea42 0103 	orr.w	r1, r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	0c1b      	lsrs	r3, r3, #16
 80063c2:	f003 0104 	and.w	r1, r3, #4
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	f003 0210 	and.w	r2, r3, #16
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69da      	ldr	r2, [r3, #28]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b082      	sub	sp, #8
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e041      	b.n	8006494 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d106      	bne.n	800642a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7fc f8ab 	bl	8002580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2202      	movs	r2, #2
 800642e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3304      	adds	r3, #4
 800643a:	4619      	mov	r1, r3
 800643c:	4610      	mov	r0, r2
 800643e:	f000 fac1 	bl	80069c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d001      	beq.n	80064b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e04e      	b.n	8006552 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a23      	ldr	r2, [pc, #140]	; (8006560 <HAL_TIM_Base_Start_IT+0xc4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d022      	beq.n	800651c <HAL_TIM_Base_Start_IT+0x80>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064de:	d01d      	beq.n	800651c <HAL_TIM_Base_Start_IT+0x80>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1f      	ldr	r2, [pc, #124]	; (8006564 <HAL_TIM_Base_Start_IT+0xc8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d018      	beq.n	800651c <HAL_TIM_Base_Start_IT+0x80>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a1e      	ldr	r2, [pc, #120]	; (8006568 <HAL_TIM_Base_Start_IT+0xcc>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d013      	beq.n	800651c <HAL_TIM_Base_Start_IT+0x80>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1c      	ldr	r2, [pc, #112]	; (800656c <HAL_TIM_Base_Start_IT+0xd0>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00e      	beq.n	800651c <HAL_TIM_Base_Start_IT+0x80>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1b      	ldr	r2, [pc, #108]	; (8006570 <HAL_TIM_Base_Start_IT+0xd4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d009      	beq.n	800651c <HAL_TIM_Base_Start_IT+0x80>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a19      	ldr	r2, [pc, #100]	; (8006574 <HAL_TIM_Base_Start_IT+0xd8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d004      	beq.n	800651c <HAL_TIM_Base_Start_IT+0x80>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a18      	ldr	r2, [pc, #96]	; (8006578 <HAL_TIM_Base_Start_IT+0xdc>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d111      	bne.n	8006540 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b06      	cmp	r3, #6
 800652c:	d010      	beq.n	8006550 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 0201 	orr.w	r2, r2, #1
 800653c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653e:	e007      	b.n	8006550 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f042 0201 	orr.w	r2, r2, #1
 800654e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40010000 	.word	0x40010000
 8006564:	40000400 	.word	0x40000400
 8006568:	40000800 	.word	0x40000800
 800656c:	40000c00 	.word	0x40000c00
 8006570:	40010400 	.word	0x40010400
 8006574:	40014000 	.word	0x40014000
 8006578:	40001800 	.word	0x40001800

0800657c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 0201 	bic.w	r2, r2, #1
 8006592:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6a1a      	ldr	r2, [r3, #32]
 800659a:	f241 1311 	movw	r3, #4369	; 0x1111
 800659e:	4013      	ands	r3, r2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10f      	bne.n	80065c4 <HAL_TIM_Base_Stop_IT+0x48>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6a1a      	ldr	r2, [r3, #32]
 80065aa:	f240 4344 	movw	r3, #1092	; 0x444
 80065ae:	4013      	ands	r3, r2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d107      	bne.n	80065c4 <HAL_TIM_Base_Stop_IT+0x48>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0201 	bic.w	r2, r2, #1
 80065c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b082      	sub	sp, #8
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d122      	bne.n	8006636 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d11b      	bne.n	8006636 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f06f 0202 	mvn.w	r2, #2
 8006606:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	f003 0303 	and.w	r3, r3, #3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f9b2 	bl	8006986 <HAL_TIM_IC_CaptureCallback>
 8006622:	e005      	b.n	8006630 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f9a4 	bl	8006972 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f9b5 	bl	800699a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b04      	cmp	r3, #4
 8006642:	d122      	bne.n	800668a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f003 0304 	and.w	r3, r3, #4
 800664e:	2b04      	cmp	r3, #4
 8006650:	d11b      	bne.n	800668a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f06f 0204 	mvn.w	r2, #4
 800665a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f988 	bl	8006986 <HAL_TIM_IC_CaptureCallback>
 8006676:	e005      	b.n	8006684 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f97a 	bl	8006972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f98b 	bl	800699a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f003 0308 	and.w	r3, r3, #8
 8006694:	2b08      	cmp	r3, #8
 8006696:	d122      	bne.n	80066de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f003 0308 	and.w	r3, r3, #8
 80066a2:	2b08      	cmp	r3, #8
 80066a4:	d11b      	bne.n	80066de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f06f 0208 	mvn.w	r2, #8
 80066ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2204      	movs	r2, #4
 80066b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	f003 0303 	and.w	r3, r3, #3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f95e 	bl	8006986 <HAL_TIM_IC_CaptureCallback>
 80066ca:	e005      	b.n	80066d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f950 	bl	8006972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f961 	bl	800699a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	f003 0310 	and.w	r3, r3, #16
 80066e8:	2b10      	cmp	r3, #16
 80066ea:	d122      	bne.n	8006732 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f003 0310 	and.w	r3, r3, #16
 80066f6:	2b10      	cmp	r3, #16
 80066f8:	d11b      	bne.n	8006732 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f06f 0210 	mvn.w	r2, #16
 8006702:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2208      	movs	r2, #8
 8006708:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f934 	bl	8006986 <HAL_TIM_IC_CaptureCallback>
 800671e:	e005      	b.n	800672c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f926 	bl	8006972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f937 	bl	800699a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b01      	cmp	r3, #1
 800673e:	d10e      	bne.n	800675e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b01      	cmp	r3, #1
 800674c:	d107      	bne.n	800675e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f06f 0201 	mvn.w	r2, #1
 8006756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7fb f971 	bl	8001a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006768:	2b80      	cmp	r3, #128	; 0x80
 800676a:	d10e      	bne.n	800678a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006776:	2b80      	cmp	r3, #128	; 0x80
 8006778:	d107      	bne.n	800678a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fadd 	bl	8006d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006794:	2b40      	cmp	r3, #64	; 0x40
 8006796:	d10e      	bne.n	80067b6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	2b40      	cmp	r3, #64	; 0x40
 80067a4:	d107      	bne.n	80067b6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f8fc 	bl	80069ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	d10e      	bne.n	80067e2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f003 0320 	and.w	r3, r3, #32
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	d107      	bne.n	80067e2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f06f 0220 	mvn.w	r2, #32
 80067da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 faa7 	bl	8006d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067e2:	bf00      	nop
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d101      	bne.n	8006802 <HAL_TIM_ConfigClockSource+0x18>
 80067fe:	2302      	movs	r3, #2
 8006800:	e0b3      	b.n	800696a <HAL_TIM_ConfigClockSource+0x180>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2202      	movs	r2, #2
 800680e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006820:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006828:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800683a:	d03e      	beq.n	80068ba <HAL_TIM_ConfigClockSource+0xd0>
 800683c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006840:	f200 8087 	bhi.w	8006952 <HAL_TIM_ConfigClockSource+0x168>
 8006844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006848:	f000 8085 	beq.w	8006956 <HAL_TIM_ConfigClockSource+0x16c>
 800684c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006850:	d87f      	bhi.n	8006952 <HAL_TIM_ConfigClockSource+0x168>
 8006852:	2b70      	cmp	r3, #112	; 0x70
 8006854:	d01a      	beq.n	800688c <HAL_TIM_ConfigClockSource+0xa2>
 8006856:	2b70      	cmp	r3, #112	; 0x70
 8006858:	d87b      	bhi.n	8006952 <HAL_TIM_ConfigClockSource+0x168>
 800685a:	2b60      	cmp	r3, #96	; 0x60
 800685c:	d050      	beq.n	8006900 <HAL_TIM_ConfigClockSource+0x116>
 800685e:	2b60      	cmp	r3, #96	; 0x60
 8006860:	d877      	bhi.n	8006952 <HAL_TIM_ConfigClockSource+0x168>
 8006862:	2b50      	cmp	r3, #80	; 0x50
 8006864:	d03c      	beq.n	80068e0 <HAL_TIM_ConfigClockSource+0xf6>
 8006866:	2b50      	cmp	r3, #80	; 0x50
 8006868:	d873      	bhi.n	8006952 <HAL_TIM_ConfigClockSource+0x168>
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d058      	beq.n	8006920 <HAL_TIM_ConfigClockSource+0x136>
 800686e:	2b40      	cmp	r3, #64	; 0x40
 8006870:	d86f      	bhi.n	8006952 <HAL_TIM_ConfigClockSource+0x168>
 8006872:	2b30      	cmp	r3, #48	; 0x30
 8006874:	d064      	beq.n	8006940 <HAL_TIM_ConfigClockSource+0x156>
 8006876:	2b30      	cmp	r3, #48	; 0x30
 8006878:	d86b      	bhi.n	8006952 <HAL_TIM_ConfigClockSource+0x168>
 800687a:	2b20      	cmp	r3, #32
 800687c:	d060      	beq.n	8006940 <HAL_TIM_ConfigClockSource+0x156>
 800687e:	2b20      	cmp	r3, #32
 8006880:	d867      	bhi.n	8006952 <HAL_TIM_ConfigClockSource+0x168>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d05c      	beq.n	8006940 <HAL_TIM_ConfigClockSource+0x156>
 8006886:	2b10      	cmp	r3, #16
 8006888:	d05a      	beq.n	8006940 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800688a:	e062      	b.n	8006952 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6818      	ldr	r0, [r3, #0]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	6899      	ldr	r1, [r3, #8]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f000 f9ac 	bl	8006bf8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	609a      	str	r2, [r3, #8]
      break;
 80068b8:	e04e      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	6899      	ldr	r1, [r3, #8]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f000 f995 	bl	8006bf8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068dc:	609a      	str	r2, [r3, #8]
      break;
 80068de:	e03b      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6818      	ldr	r0, [r3, #0]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	6859      	ldr	r1, [r3, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	461a      	mov	r2, r3
 80068ee:	f000 f909 	bl	8006b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2150      	movs	r1, #80	; 0x50
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 f962 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 80068fe:	e02b      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6818      	ldr	r0, [r3, #0]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	6859      	ldr	r1, [r3, #4]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	461a      	mov	r2, r3
 800690e:	f000 f928 	bl	8006b62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2160      	movs	r1, #96	; 0x60
 8006918:	4618      	mov	r0, r3
 800691a:	f000 f952 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 800691e:	e01b      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6818      	ldr	r0, [r3, #0]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	6859      	ldr	r1, [r3, #4]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	461a      	mov	r2, r3
 800692e:	f000 f8e9 	bl	8006b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2140      	movs	r1, #64	; 0x40
 8006938:	4618      	mov	r0, r3
 800693a:	f000 f942 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 800693e:	e00b      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4619      	mov	r1, r3
 800694a:	4610      	mov	r0, r2
 800694c:	f000 f939 	bl	8006bc2 <TIM_ITRx_SetConfig>
        break;
 8006950:	e002      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006952:	bf00      	nop
 8006954:	e000      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800697a:	bf00      	nop
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069b6:	bf00      	nop
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
	...

080069c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a40      	ldr	r2, [pc, #256]	; (8006ad8 <TIM_Base_SetConfig+0x114>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d013      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e2:	d00f      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a3d      	ldr	r2, [pc, #244]	; (8006adc <TIM_Base_SetConfig+0x118>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00b      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a3c      	ldr	r2, [pc, #240]	; (8006ae0 <TIM_Base_SetConfig+0x11c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d007      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a3b      	ldr	r2, [pc, #236]	; (8006ae4 <TIM_Base_SetConfig+0x120>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d003      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a3a      	ldr	r2, [pc, #232]	; (8006ae8 <TIM_Base_SetConfig+0x124>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d108      	bne.n	8006a16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a2f      	ldr	r2, [pc, #188]	; (8006ad8 <TIM_Base_SetConfig+0x114>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d02b      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a24:	d027      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a2c      	ldr	r2, [pc, #176]	; (8006adc <TIM_Base_SetConfig+0x118>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d023      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a2b      	ldr	r2, [pc, #172]	; (8006ae0 <TIM_Base_SetConfig+0x11c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d01f      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2a      	ldr	r2, [pc, #168]	; (8006ae4 <TIM_Base_SetConfig+0x120>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d01b      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a29      	ldr	r2, [pc, #164]	; (8006ae8 <TIM_Base_SetConfig+0x124>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d017      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a28      	ldr	r2, [pc, #160]	; (8006aec <TIM_Base_SetConfig+0x128>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d013      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a27      	ldr	r2, [pc, #156]	; (8006af0 <TIM_Base_SetConfig+0x12c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00f      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a26      	ldr	r2, [pc, #152]	; (8006af4 <TIM_Base_SetConfig+0x130>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00b      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a25      	ldr	r2, [pc, #148]	; (8006af8 <TIM_Base_SetConfig+0x134>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d007      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a24      	ldr	r2, [pc, #144]	; (8006afc <TIM_Base_SetConfig+0x138>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d003      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a23      	ldr	r2, [pc, #140]	; (8006b00 <TIM_Base_SetConfig+0x13c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d108      	bne.n	8006a88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a0a      	ldr	r2, [pc, #40]	; (8006ad8 <TIM_Base_SetConfig+0x114>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d003      	beq.n	8006abc <TIM_Base_SetConfig+0xf8>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a0c      	ldr	r2, [pc, #48]	; (8006ae8 <TIM_Base_SetConfig+0x124>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d103      	bne.n	8006ac4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	691a      	ldr	r2, [r3, #16]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	615a      	str	r2, [r3, #20]
}
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40010000 	.word	0x40010000
 8006adc:	40000400 	.word	0x40000400
 8006ae0:	40000800 	.word	0x40000800
 8006ae4:	40000c00 	.word	0x40000c00
 8006ae8:	40010400 	.word	0x40010400
 8006aec:	40014000 	.word	0x40014000
 8006af0:	40014400 	.word	0x40014400
 8006af4:	40014800 	.word	0x40014800
 8006af8:	40001800 	.word	0x40001800
 8006afc:	40001c00 	.word	0x40001c00
 8006b00:	40002000 	.word	0x40002000

08006b04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f023 0201 	bic.w	r2, r3, #1
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f023 030a 	bic.w	r3, r3, #10
 8006b40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	621a      	str	r2, [r3, #32]
}
 8006b56:	bf00      	nop
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b087      	sub	sp, #28
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f023 0210 	bic.w	r2, r3, #16
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	031b      	lsls	r3, r3, #12
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	621a      	str	r2, [r3, #32]
}
 8006bb6:	bf00      	nop
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b085      	sub	sp, #20
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	f043 0307 	orr.w	r3, r3, #7
 8006be4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	609a      	str	r2, [r3, #8]
}
 8006bec:	bf00      	nop
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	021a      	lsls	r2, r3, #8
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	609a      	str	r2, [r3, #8]
}
 8006c2c:	bf00      	nop
 8006c2e:	371c      	adds	r7, #28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d101      	bne.n	8006c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e05a      	b.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a21      	ldr	r2, [pc, #132]	; (8006d14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d022      	beq.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c9c:	d01d      	beq.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a1d      	ldr	r2, [pc, #116]	; (8006d18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d018      	beq.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a1b      	ldr	r2, [pc, #108]	; (8006d1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d013      	beq.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1a      	ldr	r2, [pc, #104]	; (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00e      	beq.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a18      	ldr	r2, [pc, #96]	; (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d009      	beq.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a17      	ldr	r2, [pc, #92]	; (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d004      	beq.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a15      	ldr	r2, [pc, #84]	; (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d10c      	bne.n	8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ce0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	40010000 	.word	0x40010000
 8006d18:	40000400 	.word	0x40000400
 8006d1c:	40000800 	.word	0x40000800
 8006d20:	40000c00 	.word	0x40000c00
 8006d24:	40010400 	.word	0x40010400
 8006d28:	40014000 	.word	0x40014000
 8006d2c:	40001800 	.word	0x40001800

08006d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e03f      	b.n	8006dea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d106      	bne.n	8006d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7fb fc90 	bl	80026a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2224      	movs	r2, #36	; 0x24
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fd57 	bl	8007850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	695a      	ldr	r2, [r3, #20]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b08a      	sub	sp, #40	; 0x28
 8006df6:	af02      	add	r7, sp, #8
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	60b9      	str	r1, [r7, #8]
 8006dfc:	603b      	str	r3, [r7, #0]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	d17c      	bne.n	8006f0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <HAL_UART_Transmit+0x2c>
 8006e18:	88fb      	ldrh	r3, [r7, #6]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e075      	b.n	8006f0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <HAL_UART_Transmit+0x3e>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	e06e      	b.n	8006f0e <HAL_UART_Transmit+0x11c>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2221      	movs	r2, #33	; 0x21
 8006e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e46:	f7fb fde3 	bl	8002a10 <HAL_GetTick>
 8006e4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	88fa      	ldrh	r2, [r7, #6]
 8006e50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	88fa      	ldrh	r2, [r7, #6]
 8006e56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e60:	d108      	bne.n	8006e74 <HAL_UART_Transmit+0x82>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d104      	bne.n	8006e74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	e003      	b.n	8006e7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006e84:	e02a      	b.n	8006edc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2180      	movs	r1, #128	; 0x80
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 fb19 	bl	80074c8 <UART_WaitOnFlagUntilTimeout>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e036      	b.n	8006f0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10b      	bne.n	8006ebe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	3302      	adds	r3, #2
 8006eba:	61bb      	str	r3, [r7, #24]
 8006ebc:	e007      	b.n	8006ece <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	781a      	ldrb	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1cf      	bne.n	8006e86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2200      	movs	r2, #0
 8006eee:	2140      	movs	r1, #64	; 0x40
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 fae9 	bl	80074c8 <UART_WaitOnFlagUntilTimeout>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e006      	b.n	8006f0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e000      	b.n	8006f0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006f0c:	2302      	movs	r3, #2
  }
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3720      	adds	r7, #32
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b08a      	sub	sp, #40	; 0x28
 8006f1a:	af02      	add	r7, sp, #8
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	603b      	str	r3, [r7, #0]
 8006f22:	4613      	mov	r3, r2
 8006f24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	f040 808c 	bne.w	8007050 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <HAL_UART_Receive+0x2e>
 8006f3e:	88fb      	ldrh	r3, [r7, #6]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e084      	b.n	8007052 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d101      	bne.n	8006f56 <HAL_UART_Receive+0x40>
 8006f52:	2302      	movs	r3, #2
 8006f54:	e07d      	b.n	8007052 <HAL_UART_Receive+0x13c>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2222      	movs	r2, #34	; 0x22
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f72:	f7fb fd4d 	bl	8002a10 <HAL_GetTick>
 8006f76:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	88fa      	ldrh	r2, [r7, #6]
 8006f7c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	88fa      	ldrh	r2, [r7, #6]
 8006f82:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f8c:	d108      	bne.n	8006fa0 <HAL_UART_Receive+0x8a>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d104      	bne.n	8006fa0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	61bb      	str	r3, [r7, #24]
 8006f9e:	e003      	b.n	8006fa8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006fb0:	e043      	b.n	800703a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	2120      	movs	r1, #32
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 fa83 	bl	80074c8 <UART_WaitOnFlagUntilTimeout>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e042      	b.n	8007052 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10c      	bne.n	8006fec <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	3302      	adds	r3, #2
 8006fe8:	61bb      	str	r3, [r7, #24]
 8006fea:	e01f      	b.n	800702c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff4:	d007      	beq.n	8007006 <HAL_UART_Receive+0xf0>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <HAL_UART_Receive+0xfe>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d106      	bne.n	8007014 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	b2da      	uxtb	r2, r3
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	e008      	b.n	8007026 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007020:	b2da      	uxtb	r2, r3
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	3301      	adds	r3, #1
 800702a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007030:	b29b      	uxth	r3, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1b6      	bne.n	8006fb2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2220      	movs	r2, #32
 8007048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	e000      	b.n	8007052 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007050:	2302      	movs	r3, #2
  }
}
 8007052:	4618      	mov	r0, r3
 8007054:	3720      	adds	r7, #32
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800705a:	b480      	push	{r7}
 800705c:	b085      	sub	sp, #20
 800705e:	af00      	add	r7, sp, #0
 8007060:	60f8      	str	r0, [r7, #12]
 8007062:	60b9      	str	r1, [r7, #8]
 8007064:	4613      	mov	r3, r2
 8007066:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b20      	cmp	r3, #32
 8007072:	d130      	bne.n	80070d6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <HAL_UART_Transmit_IT+0x26>
 800707a:	88fb      	ldrh	r3, [r7, #6]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e029      	b.n	80070d8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800708a:	2b01      	cmp	r3, #1
 800708c:	d101      	bne.n	8007092 <HAL_UART_Transmit_IT+0x38>
 800708e:	2302      	movs	r3, #2
 8007090:	e022      	b.n	80070d8 <HAL_UART_Transmit_IT+0x7e>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	88fa      	ldrh	r2, [r7, #6]
 80070a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	88fa      	ldrh	r2, [r7, #6]
 80070aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2221      	movs	r2, #33	; 0x21
 80070b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68da      	ldr	r2, [r3, #12]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	e000      	b.n	80070d8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80070d6:	2302      	movs	r3, #2
  }
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	4613      	mov	r3, r2
 80070f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b20      	cmp	r3, #32
 80070fc:	d11d      	bne.n	800713a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <HAL_UART_Receive_IT+0x26>
 8007104:	88fb      	ldrh	r3, [r7, #6]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e016      	b.n	800713c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007114:	2b01      	cmp	r3, #1
 8007116:	d101      	bne.n	800711c <HAL_UART_Receive_IT+0x38>
 8007118:	2302      	movs	r3, #2
 800711a:	e00f      	b.n	800713c <HAL_UART_Receive_IT+0x58>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800712a:	88fb      	ldrh	r3, [r7, #6]
 800712c:	461a      	mov	r2, r3
 800712e:	68b9      	ldr	r1, [r7, #8]
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f000 fa13 	bl	800755c <UART_Start_Receive_IT>
 8007136:	4603      	mov	r3, r0
 8007138:	e000      	b.n	800713c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800713a:	2302      	movs	r3, #2
  }
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b08a      	sub	sp, #40	; 0x28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007164:	2300      	movs	r3, #0
 8007166:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007168:	2300      	movs	r3, #0
 800716a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	f003 030f 	and.w	r3, r3, #15
 8007172:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10d      	bne.n	8007196 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b00      	cmp	r3, #0
 8007182:	d008      	beq.n	8007196 <HAL_UART_IRQHandler+0x52>
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fac7 	bl	8007722 <UART_Receive_IT>
      return;
 8007194:	e17c      	b.n	8007490 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 80b1 	beq.w	8007300 <HAL_UART_IRQHandler+0x1bc>
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d105      	bne.n	80071b4 <HAL_UART_IRQHandler+0x70>
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 80a6 	beq.w	8007300 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <HAL_UART_IRQHandler+0x90>
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071cc:	f043 0201 	orr.w	r2, r3, #1
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	f003 0304 	and.w	r3, r3, #4
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <HAL_UART_IRQHandler+0xb0>
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d005      	beq.n	80071f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ec:	f043 0202 	orr.w	r2, r3, #2
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <HAL_UART_IRQHandler+0xd0>
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d005      	beq.n	8007214 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720c:	f043 0204 	orr.w	r2, r3, #4
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	f003 0308 	and.w	r3, r3, #8
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00f      	beq.n	800723e <HAL_UART_IRQHandler+0xfa>
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b00      	cmp	r3, #0
 8007226:	d104      	bne.n	8007232 <HAL_UART_IRQHandler+0xee>
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d005      	beq.n	800723e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007236:	f043 0208 	orr.w	r2, r3, #8
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 811f 	beq.w	8007486 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	f003 0320 	and.w	r3, r3, #32
 800724e:	2b00      	cmp	r3, #0
 8007250:	d007      	beq.n	8007262 <HAL_UART_IRQHandler+0x11e>
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	f003 0320 	and.w	r3, r3, #32
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fa60 	bl	8007722 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726c:	2b40      	cmp	r3, #64	; 0x40
 800726e:	bf0c      	ite	eq
 8007270:	2301      	moveq	r3, #1
 8007272:	2300      	movne	r3, #0
 8007274:	b2db      	uxtb	r3, r3
 8007276:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727c:	f003 0308 	and.w	r3, r3, #8
 8007280:	2b00      	cmp	r3, #0
 8007282:	d102      	bne.n	800728a <HAL_UART_IRQHandler+0x146>
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d031      	beq.n	80072ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f9a0 	bl	80075d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729a:	2b40      	cmp	r3, #64	; 0x40
 800729c:	d123      	bne.n	80072e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	695a      	ldr	r2, [r3, #20]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d013      	beq.n	80072de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ba:	4a77      	ldr	r2, [pc, #476]	; (8007498 <HAL_UART_IRQHandler+0x354>)
 80072bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fb fd42 	bl	8002d4c <HAL_DMA_Abort_IT>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d016      	beq.n	80072fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072d8:	4610      	mov	r0, r2
 80072da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072dc:	e00e      	b.n	80072fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f8dc 	bl	800749c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e4:	e00a      	b.n	80072fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f8d8 	bl	800749c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ec:	e006      	b.n	80072fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f8d4 	bl	800749c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80072fa:	e0c4      	b.n	8007486 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072fc:	bf00      	nop
    return;
 80072fe:	e0c2      	b.n	8007486 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007304:	2b01      	cmp	r3, #1
 8007306:	f040 80a2 	bne.w	800744e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	f003 0310 	and.w	r3, r3, #16
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 809c 	beq.w	800744e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	f003 0310 	and.w	r3, r3, #16
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 8096 	beq.w	800744e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	60fb      	str	r3, [r7, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	60fb      	str	r3, [r7, #12]
 8007336:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007342:	2b40      	cmp	r3, #64	; 0x40
 8007344:	d14f      	bne.n	80073e6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007350:	8a3b      	ldrh	r3, [r7, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 8099 	beq.w	800748a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800735c:	8a3a      	ldrh	r2, [r7, #16]
 800735e:	429a      	cmp	r2, r3
 8007360:	f080 8093 	bcs.w	800748a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	8a3a      	ldrh	r2, [r7, #16]
 8007368:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007374:	d02b      	beq.n	80073ce <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007384:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	695a      	ldr	r2, [r3, #20]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0201 	bic.w	r2, r2, #1
 8007394:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	695a      	ldr	r2, [r3, #20]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073a4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0210 	bic.w	r2, r2, #16
 80073c2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fb fc4f 	bl	8002c6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	b29b      	uxth	r3, r3
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f866 	bl	80074b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80073e4:	e051      	b.n	800748a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d047      	beq.n	800748e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80073fe:	8a7b      	ldrh	r3, [r7, #18]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d044      	beq.n	800748e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68da      	ldr	r2, [r3, #12]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007412:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	695a      	ldr	r2, [r3, #20]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0201 	bic.w	r2, r2, #1
 8007422:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2220      	movs	r2, #32
 8007428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68da      	ldr	r2, [r3, #12]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0210 	bic.w	r2, r2, #16
 8007440:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007442:	8a7b      	ldrh	r3, [r7, #18]
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f832 	bl	80074b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800744c:	e01f      	b.n	800748e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007454:	2b00      	cmp	r3, #0
 8007456:	d008      	beq.n	800746a <HAL_UART_IRQHandler+0x326>
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f8f5 	bl	8007652 <UART_Transmit_IT>
    return;
 8007468:	e012      	b.n	8007490 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00d      	beq.n	8007490 <HAL_UART_IRQHandler+0x34c>
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747a:	2b00      	cmp	r3, #0
 800747c:	d008      	beq.n	8007490 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f937 	bl	80076f2 <UART_EndTransmit_IT>
    return;
 8007484:	e004      	b.n	8007490 <HAL_UART_IRQHandler+0x34c>
    return;
 8007486:	bf00      	nop
 8007488:	e002      	b.n	8007490 <HAL_UART_IRQHandler+0x34c>
      return;
 800748a:	bf00      	nop
 800748c:	e000      	b.n	8007490 <HAL_UART_IRQHandler+0x34c>
      return;
 800748e:	bf00      	nop
  }
}
 8007490:	3728      	adds	r7, #40	; 0x28
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	0800762b 	.word	0x0800762b

0800749c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	4613      	mov	r3, r2
 80074d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d8:	e02c      	b.n	8007534 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e0:	d028      	beq.n	8007534 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d007      	beq.n	80074f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80074e8:	f7fb fa92 	bl	8002a10 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d21d      	bcs.n	8007534 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007506:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	695a      	ldr	r2, [r3, #20]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0201 	bic.w	r2, r2, #1
 8007516:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2220      	movs	r2, #32
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2220      	movs	r2, #32
 8007524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e00f      	b.n	8007554 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4013      	ands	r3, r2
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	429a      	cmp	r2, r3
 8007542:	bf0c      	ite	eq
 8007544:	2301      	moveq	r3, #1
 8007546:	2300      	movne	r3, #0
 8007548:	b2db      	uxtb	r3, r3
 800754a:	461a      	mov	r2, r3
 800754c:	79fb      	ldrb	r3, [r7, #7]
 800754e:	429a      	cmp	r2, r3
 8007550:	d0c3      	beq.n	80074da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	4613      	mov	r3, r2
 8007568:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	88fa      	ldrh	r2, [r7, #6]
 8007574:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	88fa      	ldrh	r2, [r7, #6]
 800757a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2222      	movs	r2, #34	; 0x22
 8007586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075a0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695a      	ldr	r2, [r3, #20]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f042 0201 	orr.w	r2, r2, #1
 80075b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f042 0220 	orr.w	r2, r2, #32
 80075c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80075e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	695a      	ldr	r2, [r3, #20]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0201 	bic.w	r2, r2, #1
 80075f6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d107      	bne.n	8007610 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68da      	ldr	r2, [r3, #12]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f022 0210 	bic.w	r2, r2, #16
 800760e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2220      	movs	r2, #32
 8007614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f7ff ff29 	bl	800749c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800764a:	bf00      	nop
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007652:	b480      	push	{r7}
 8007654:	b085      	sub	sp, #20
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b21      	cmp	r3, #33	; 0x21
 8007664:	d13e      	bne.n	80076e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766e:	d114      	bne.n	800769a <UART_Transmit_IT+0x48>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d110      	bne.n	800769a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800768c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	1c9a      	adds	r2, r3, #2
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	621a      	str	r2, [r3, #32]
 8007698:	e008      	b.n	80076ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	1c59      	adds	r1, r3, #1
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	6211      	str	r1, [r2, #32]
 80076a4:	781a      	ldrb	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	3b01      	subs	r3, #1
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	4619      	mov	r1, r3
 80076ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10f      	bne.n	80076e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68da      	ldr	r2, [r3, #12]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	e000      	b.n	80076e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076e4:	2302      	movs	r3, #2
  }
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b082      	sub	sp, #8
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68da      	ldr	r2, [r3, #12]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007708:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2220      	movs	r2, #32
 800770e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7fb f86e 	bl	80027f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b22      	cmp	r3, #34	; 0x22
 8007734:	f040 8087 	bne.w	8007846 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007740:	d117      	bne.n	8007772 <UART_Receive_IT+0x50>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d113      	bne.n	8007772 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007752:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	b29b      	uxth	r3, r3
 800775c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007760:	b29a      	uxth	r2, r3
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776a:	1c9a      	adds	r2, r3, #2
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	629a      	str	r2, [r3, #40]	; 0x28
 8007770:	e026      	b.n	80077c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007776:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007778:	2300      	movs	r3, #0
 800777a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007784:	d007      	beq.n	8007796 <UART_Receive_IT+0x74>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10a      	bne.n	80077a4 <UART_Receive_IT+0x82>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d106      	bne.n	80077a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	b2da      	uxtb	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	701a      	strb	r2, [r3, #0]
 80077a2:	e008      	b.n	80077b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ba:	1c5a      	adds	r2, r3, #1
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	4619      	mov	r1, r3
 80077ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d136      	bne.n	8007842 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0220 	bic.w	r2, r2, #32
 80077e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	695a      	ldr	r2, [r3, #20]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0201 	bic.w	r2, r2, #1
 8007802:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2220      	movs	r2, #32
 8007808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007810:	2b01      	cmp	r3, #1
 8007812:	d10e      	bne.n	8007832 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68da      	ldr	r2, [r3, #12]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 0210 	bic.w	r2, r2, #16
 8007822:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7ff fe40 	bl	80074b0 <HAL_UARTEx_RxEventCallback>
 8007830:	e002      	b.n	8007838 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7fa ffe8 	bl	8002808 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	e002      	b.n	8007848 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	e000      	b.n	8007848 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007846:	2302      	movs	r3, #2
  }
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007854:	b09f      	sub	sp, #124	; 0x7c
 8007856:	af00      	add	r7, sp, #0
 8007858:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800785a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007866:	68d9      	ldr	r1, [r3, #12]
 8007868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	ea40 0301 	orr.w	r3, r0, r1
 8007870:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	431a      	orrs	r2, r3
 800787c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	431a      	orrs	r2, r3
 8007882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	4313      	orrs	r3, r2
 8007888:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800788a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007894:	f021 010c 	bic.w	r1, r1, #12
 8007898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800789e:	430b      	orrs	r3, r1
 80078a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80078ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ae:	6999      	ldr	r1, [r3, #24]
 80078b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	ea40 0301 	orr.w	r3, r0, r1
 80078b8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4bc5      	ldr	r3, [pc, #788]	; (8007bd4 <UART_SetConfig+0x384>)
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d004      	beq.n	80078ce <UART_SetConfig+0x7e>
 80078c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	4bc3      	ldr	r3, [pc, #780]	; (8007bd8 <UART_SetConfig+0x388>)
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d103      	bne.n	80078d6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078ce:	f7fe fad5 	bl	8005e7c <HAL_RCC_GetPCLK2Freq>
 80078d2:	6778      	str	r0, [r7, #116]	; 0x74
 80078d4:	e002      	b.n	80078dc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078d6:	f7fe fabd 	bl	8005e54 <HAL_RCC_GetPCLK1Freq>
 80078da:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078e4:	f040 80b6 	bne.w	8007a54 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078ea:	461c      	mov	r4, r3
 80078ec:	f04f 0500 	mov.w	r5, #0
 80078f0:	4622      	mov	r2, r4
 80078f2:	462b      	mov	r3, r5
 80078f4:	1891      	adds	r1, r2, r2
 80078f6:	6439      	str	r1, [r7, #64]	; 0x40
 80078f8:	415b      	adcs	r3, r3
 80078fa:	647b      	str	r3, [r7, #68]	; 0x44
 80078fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007900:	1912      	adds	r2, r2, r4
 8007902:	eb45 0303 	adc.w	r3, r5, r3
 8007906:	f04f 0000 	mov.w	r0, #0
 800790a:	f04f 0100 	mov.w	r1, #0
 800790e:	00d9      	lsls	r1, r3, #3
 8007910:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007914:	00d0      	lsls	r0, r2, #3
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	1911      	adds	r1, r2, r4
 800791c:	6639      	str	r1, [r7, #96]	; 0x60
 800791e:	416b      	adcs	r3, r5
 8007920:	667b      	str	r3, [r7, #100]	; 0x64
 8007922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	461a      	mov	r2, r3
 8007928:	f04f 0300 	mov.w	r3, #0
 800792c:	1891      	adds	r1, r2, r2
 800792e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007930:	415b      	adcs	r3, r3
 8007932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007934:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007938:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800793c:	f7f9 f8e4 	bl	8000b08 <__aeabi_uldivmod>
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	4ba5      	ldr	r3, [pc, #660]	; (8007bdc <UART_SetConfig+0x38c>)
 8007946:	fba3 2302 	umull	r2, r3, r3, r2
 800794a:	095b      	lsrs	r3, r3, #5
 800794c:	011e      	lsls	r6, r3, #4
 800794e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007950:	461c      	mov	r4, r3
 8007952:	f04f 0500 	mov.w	r5, #0
 8007956:	4622      	mov	r2, r4
 8007958:	462b      	mov	r3, r5
 800795a:	1891      	adds	r1, r2, r2
 800795c:	6339      	str	r1, [r7, #48]	; 0x30
 800795e:	415b      	adcs	r3, r3
 8007960:	637b      	str	r3, [r7, #52]	; 0x34
 8007962:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007966:	1912      	adds	r2, r2, r4
 8007968:	eb45 0303 	adc.w	r3, r5, r3
 800796c:	f04f 0000 	mov.w	r0, #0
 8007970:	f04f 0100 	mov.w	r1, #0
 8007974:	00d9      	lsls	r1, r3, #3
 8007976:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800797a:	00d0      	lsls	r0, r2, #3
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	1911      	adds	r1, r2, r4
 8007982:	65b9      	str	r1, [r7, #88]	; 0x58
 8007984:	416b      	adcs	r3, r5
 8007986:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	461a      	mov	r2, r3
 800798e:	f04f 0300 	mov.w	r3, #0
 8007992:	1891      	adds	r1, r2, r2
 8007994:	62b9      	str	r1, [r7, #40]	; 0x28
 8007996:	415b      	adcs	r3, r3
 8007998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800799a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800799e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80079a2:	f7f9 f8b1 	bl	8000b08 <__aeabi_uldivmod>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	4b8c      	ldr	r3, [pc, #560]	; (8007bdc <UART_SetConfig+0x38c>)
 80079ac:	fba3 1302 	umull	r1, r3, r3, r2
 80079b0:	095b      	lsrs	r3, r3, #5
 80079b2:	2164      	movs	r1, #100	; 0x64
 80079b4:	fb01 f303 	mul.w	r3, r1, r3
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	3332      	adds	r3, #50	; 0x32
 80079be:	4a87      	ldr	r2, [pc, #540]	; (8007bdc <UART_SetConfig+0x38c>)
 80079c0:	fba2 2303 	umull	r2, r3, r2, r3
 80079c4:	095b      	lsrs	r3, r3, #5
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079cc:	441e      	add	r6, r3
 80079ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079d0:	4618      	mov	r0, r3
 80079d2:	f04f 0100 	mov.w	r1, #0
 80079d6:	4602      	mov	r2, r0
 80079d8:	460b      	mov	r3, r1
 80079da:	1894      	adds	r4, r2, r2
 80079dc:	623c      	str	r4, [r7, #32]
 80079de:	415b      	adcs	r3, r3
 80079e0:	627b      	str	r3, [r7, #36]	; 0x24
 80079e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079e6:	1812      	adds	r2, r2, r0
 80079e8:	eb41 0303 	adc.w	r3, r1, r3
 80079ec:	f04f 0400 	mov.w	r4, #0
 80079f0:	f04f 0500 	mov.w	r5, #0
 80079f4:	00dd      	lsls	r5, r3, #3
 80079f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80079fa:	00d4      	lsls	r4, r2, #3
 80079fc:	4622      	mov	r2, r4
 80079fe:	462b      	mov	r3, r5
 8007a00:	1814      	adds	r4, r2, r0
 8007a02:	653c      	str	r4, [r7, #80]	; 0x50
 8007a04:	414b      	adcs	r3, r1
 8007a06:	657b      	str	r3, [r7, #84]	; 0x54
 8007a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	f04f 0300 	mov.w	r3, #0
 8007a12:	1891      	adds	r1, r2, r2
 8007a14:	61b9      	str	r1, [r7, #24]
 8007a16:	415b      	adcs	r3, r3
 8007a18:	61fb      	str	r3, [r7, #28]
 8007a1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a1e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007a22:	f7f9 f871 	bl	8000b08 <__aeabi_uldivmod>
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4b6c      	ldr	r3, [pc, #432]	; (8007bdc <UART_SetConfig+0x38c>)
 8007a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a30:	095b      	lsrs	r3, r3, #5
 8007a32:	2164      	movs	r1, #100	; 0x64
 8007a34:	fb01 f303 	mul.w	r3, r1, r3
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	3332      	adds	r3, #50	; 0x32
 8007a3e:	4a67      	ldr	r2, [pc, #412]	; (8007bdc <UART_SetConfig+0x38c>)
 8007a40:	fba2 2303 	umull	r2, r3, r2, r3
 8007a44:	095b      	lsrs	r3, r3, #5
 8007a46:	f003 0207 	and.w	r2, r3, #7
 8007a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4432      	add	r2, r6
 8007a50:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a52:	e0b9      	b.n	8007bc8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a56:	461c      	mov	r4, r3
 8007a58:	f04f 0500 	mov.w	r5, #0
 8007a5c:	4622      	mov	r2, r4
 8007a5e:	462b      	mov	r3, r5
 8007a60:	1891      	adds	r1, r2, r2
 8007a62:	6139      	str	r1, [r7, #16]
 8007a64:	415b      	adcs	r3, r3
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007a6c:	1912      	adds	r2, r2, r4
 8007a6e:	eb45 0303 	adc.w	r3, r5, r3
 8007a72:	f04f 0000 	mov.w	r0, #0
 8007a76:	f04f 0100 	mov.w	r1, #0
 8007a7a:	00d9      	lsls	r1, r3, #3
 8007a7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a80:	00d0      	lsls	r0, r2, #3
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	eb12 0804 	adds.w	r8, r2, r4
 8007a8a:	eb43 0905 	adc.w	r9, r3, r5
 8007a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f04f 0100 	mov.w	r1, #0
 8007a98:	f04f 0200 	mov.w	r2, #0
 8007a9c:	f04f 0300 	mov.w	r3, #0
 8007aa0:	008b      	lsls	r3, r1, #2
 8007aa2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007aa6:	0082      	lsls	r2, r0, #2
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	4649      	mov	r1, r9
 8007aac:	f7f9 f82c 	bl	8000b08 <__aeabi_uldivmod>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4b49      	ldr	r3, [pc, #292]	; (8007bdc <UART_SetConfig+0x38c>)
 8007ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8007aba:	095b      	lsrs	r3, r3, #5
 8007abc:	011e      	lsls	r6, r3, #4
 8007abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f04f 0100 	mov.w	r1, #0
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	460b      	mov	r3, r1
 8007aca:	1894      	adds	r4, r2, r2
 8007acc:	60bc      	str	r4, [r7, #8]
 8007ace:	415b      	adcs	r3, r3
 8007ad0:	60fb      	str	r3, [r7, #12]
 8007ad2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ad6:	1812      	adds	r2, r2, r0
 8007ad8:	eb41 0303 	adc.w	r3, r1, r3
 8007adc:	f04f 0400 	mov.w	r4, #0
 8007ae0:	f04f 0500 	mov.w	r5, #0
 8007ae4:	00dd      	lsls	r5, r3, #3
 8007ae6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007aea:	00d4      	lsls	r4, r2, #3
 8007aec:	4622      	mov	r2, r4
 8007aee:	462b      	mov	r3, r5
 8007af0:	1814      	adds	r4, r2, r0
 8007af2:	64bc      	str	r4, [r7, #72]	; 0x48
 8007af4:	414b      	adcs	r3, r1
 8007af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f04f 0100 	mov.w	r1, #0
 8007b02:	f04f 0200 	mov.w	r2, #0
 8007b06:	f04f 0300 	mov.w	r3, #0
 8007b0a:	008b      	lsls	r3, r1, #2
 8007b0c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b10:	0082      	lsls	r2, r0, #2
 8007b12:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007b16:	f7f8 fff7 	bl	8000b08 <__aeabi_uldivmod>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4b2f      	ldr	r3, [pc, #188]	; (8007bdc <UART_SetConfig+0x38c>)
 8007b20:	fba3 1302 	umull	r1, r3, r3, r2
 8007b24:	095b      	lsrs	r3, r3, #5
 8007b26:	2164      	movs	r1, #100	; 0x64
 8007b28:	fb01 f303 	mul.w	r3, r1, r3
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	011b      	lsls	r3, r3, #4
 8007b30:	3332      	adds	r3, #50	; 0x32
 8007b32:	4a2a      	ldr	r2, [pc, #168]	; (8007bdc <UART_SetConfig+0x38c>)
 8007b34:	fba2 2303 	umull	r2, r3, r2, r3
 8007b38:	095b      	lsrs	r3, r3, #5
 8007b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b3e:	441e      	add	r6, r3
 8007b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b42:	4618      	mov	r0, r3
 8007b44:	f04f 0100 	mov.w	r1, #0
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	1894      	adds	r4, r2, r2
 8007b4e:	603c      	str	r4, [r7, #0]
 8007b50:	415b      	adcs	r3, r3
 8007b52:	607b      	str	r3, [r7, #4]
 8007b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b58:	1812      	adds	r2, r2, r0
 8007b5a:	eb41 0303 	adc.w	r3, r1, r3
 8007b5e:	f04f 0400 	mov.w	r4, #0
 8007b62:	f04f 0500 	mov.w	r5, #0
 8007b66:	00dd      	lsls	r5, r3, #3
 8007b68:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b6c:	00d4      	lsls	r4, r2, #3
 8007b6e:	4622      	mov	r2, r4
 8007b70:	462b      	mov	r3, r5
 8007b72:	eb12 0a00 	adds.w	sl, r2, r0
 8007b76:	eb43 0b01 	adc.w	fp, r3, r1
 8007b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f04f 0100 	mov.w	r1, #0
 8007b84:	f04f 0200 	mov.w	r2, #0
 8007b88:	f04f 0300 	mov.w	r3, #0
 8007b8c:	008b      	lsls	r3, r1, #2
 8007b8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b92:	0082      	lsls	r2, r0, #2
 8007b94:	4650      	mov	r0, sl
 8007b96:	4659      	mov	r1, fp
 8007b98:	f7f8 ffb6 	bl	8000b08 <__aeabi_uldivmod>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4b0e      	ldr	r3, [pc, #56]	; (8007bdc <UART_SetConfig+0x38c>)
 8007ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	2164      	movs	r1, #100	; 0x64
 8007baa:	fb01 f303 	mul.w	r3, r1, r3
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	011b      	lsls	r3, r3, #4
 8007bb2:	3332      	adds	r3, #50	; 0x32
 8007bb4:	4a09      	ldr	r2, [pc, #36]	; (8007bdc <UART_SetConfig+0x38c>)
 8007bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bba:	095b      	lsrs	r3, r3, #5
 8007bbc:	f003 020f 	and.w	r2, r3, #15
 8007bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4432      	add	r2, r6
 8007bc6:	609a      	str	r2, [r3, #8]
}
 8007bc8:	bf00      	nop
 8007bca:	377c      	adds	r7, #124	; 0x7c
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd2:	bf00      	nop
 8007bd4:	40011000 	.word	0x40011000
 8007bd8:	40011400 	.word	0x40011400
 8007bdc:	51eb851f 	.word	0x51eb851f

08007be0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d029      	beq.n	8007c4e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007c06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c0a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c14:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007c1a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007c20:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007c26:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007c2c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007c32:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007c38:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007c3e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	e034      	b.n	8007cb8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c5a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007c64:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007c6a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007c7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c82:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c8c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007c92:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007c98:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007c9e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007ca4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b087      	sub	sp, #28
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d02e      	beq.n	8007d3e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007cec:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007cfc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007d06:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007d10:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007d1a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	695b      	ldr	r3, [r3, #20]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007d24:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	609a      	str	r2, [r3, #8]
 8007d3c:	e03b      	b.n	8007db6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d4e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007d60:	4313      	orrs	r3, r2
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007d74:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007d84:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007d8e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	3b01      	subs	r3, #1
 8007d96:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007d98:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007da2:	4313      	orrs	r3, r2
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	371c      	adds	r7, #28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dc4:	b084      	sub	sp, #16
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	f107 001c 	add.w	r0, r7, #28
 8007dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d122      	bne.n	8007e22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d105      	bne.n	8007e16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f902 	bl	8008020 <USB_CoreReset>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]
 8007e20:	e01a      	b.n	8007e58 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f8f6 	bl	8008020 <USB_CoreReset>
 8007e34:	4603      	mov	r3, r0
 8007e36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d106      	bne.n	8007e4c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	639a      	str	r2, [r3, #56]	; 0x38
 8007e4a:	e005      	b.n	8007e58 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d10b      	bne.n	8007e76 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f043 0206 	orr.w	r2, r3, #6
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f043 0220 	orr.w	r2, r3, #32
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e82:	b004      	add	sp, #16
 8007e84:	4770      	bx	lr

08007e86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f023 0201 	bic.w	r2, r3, #1
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d106      	bne.n	8007ed4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	60da      	str	r2, [r3, #12]
 8007ed2:	e00b      	b.n	8007eec <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ed4:	78fb      	ldrb	r3, [r7, #3]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d106      	bne.n	8007ee8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	60da      	str	r2, [r3, #12]
 8007ee6:	e001      	b.n	8007eec <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e003      	b.n	8007ef4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007eec:	2032      	movs	r0, #50	; 0x32
 8007eee:	f7fa fd9b 	bl	8002a28 <HAL_Delay>

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	019b      	lsls	r3, r3, #6
 8007f0e:	f043 0220 	orr.w	r2, r3, #32
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	60fb      	str	r3, [r7, #12]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4a09      	ldr	r2, [pc, #36]	; (8007f44 <USB_FlushTxFifo+0x48>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d901      	bls.n	8007f28 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e006      	b.n	8007f36 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	f003 0320 	and.w	r3, r3, #32
 8007f30:	2b20      	cmp	r3, #32
 8007f32:	d0f0      	beq.n	8007f16 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	00030d40 	.word	0x00030d40

08007f48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2210      	movs	r2, #16
 8007f58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4a09      	ldr	r2, [pc, #36]	; (8007f88 <USB_FlushRxFifo+0x40>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d901      	bls.n	8007f6c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e006      	b.n	8007f7a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	f003 0310 	and.w	r3, r3, #16
 8007f74:	2b10      	cmp	r3, #16
 8007f76:	d0f0      	beq.n	8007f5a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	00030d40 	.word	0x00030d40

08007f8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b089      	sub	sp, #36	; 0x24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	4613      	mov	r3, r2
 8007f98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007fa2:	88fb      	ldrh	r3, [r7, #6]
 8007fa4:	3303      	adds	r3, #3
 8007fa6:	089b      	lsrs	r3, r3, #2
 8007fa8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007faa:	2300      	movs	r3, #0
 8007fac:	61bb      	str	r3, [r7, #24]
 8007fae:	e00b      	b.n	8007fc8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	601a      	str	r2, [r3, #0]
    pDest++;
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	61bb      	str	r3, [r7, #24]
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d3ef      	bcc.n	8007fb0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007fd0:	69fb      	ldr	r3, [r7, #28]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3724      	adds	r7, #36	; 0x24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b085      	sub	sp, #20
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	f003 0301 	and.w	r3, r3, #1
}
 8008014:	4618      	mov	r0, r3
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	3301      	adds	r3, #1
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	4a13      	ldr	r2, [pc, #76]	; (8008084 <USB_CoreReset+0x64>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d901      	bls.n	800803e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e01b      	b.n	8008076 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	daf2      	bge.n	800802c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	f043 0201 	orr.w	r2, r3, #1
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3301      	adds	r3, #1
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4a09      	ldr	r2, [pc, #36]	; (8008084 <USB_CoreReset+0x64>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d901      	bls.n	8008068 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e006      	b.n	8008076 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	2b01      	cmp	r3, #1
 8008072:	d0f0      	beq.n	8008056 <USB_CoreReset+0x36>

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	00030d40 	.word	0x00030d40

08008088 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008088:	b084      	sub	sp, #16
 800808a:	b580      	push	{r7, lr}
 800808c:	b084      	sub	sp, #16
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	f107 001c 	add.w	r0, r7, #28
 8008096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080a4:	461a      	mov	r2, r3
 80080a6:	2300      	movs	r3, #0
 80080a8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ba:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d018      	beq.n	800810c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d10a      	bne.n	80080f6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080ee:	f043 0304 	orr.w	r3, r3, #4
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	e014      	b.n	8008120 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008104:	f023 0304 	bic.w	r3, r3, #4
 8008108:	6013      	str	r3, [r2, #0]
 800810a:	e009      	b.n	8008120 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800811a:	f023 0304 	bic.w	r3, r3, #4
 800811e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008120:	2110      	movs	r1, #16
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7ff feea 	bl	8007efc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7ff ff0d 	bl	8007f48 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800812e:	2300      	movs	r3, #0
 8008130:	60fb      	str	r3, [r7, #12]
 8008132:	e015      	b.n	8008160 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	015a      	lsls	r2, r3, #5
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	4413      	add	r3, r2
 800813c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008140:	461a      	mov	r2, r3
 8008142:	f04f 33ff 	mov.w	r3, #4294967295
 8008146:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4413      	add	r3, r2
 8008150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008154:	461a      	mov	r2, r3
 8008156:	2300      	movs	r3, #0
 8008158:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3301      	adds	r3, #1
 800815e:	60fb      	str	r3, [r7, #12]
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	429a      	cmp	r2, r3
 8008166:	d3e5      	bcc.n	8008134 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008168:	2101      	movs	r1, #1
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f882 	bl	8008274 <USB_DriveVbus>

  HAL_Delay(200U);
 8008170:	20c8      	movs	r0, #200	; 0xc8
 8008172:	f7fa fc59 	bl	8002a28 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f04f 32ff 	mov.w	r2, #4294967295
 8008182:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008196:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a14      	ldr	r2, [pc, #80]	; (80081ec <USB_HostInit+0x164>)
 800819c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a13      	ldr	r2, [pc, #76]	; (80081f0 <USB_HostInit+0x168>)
 80081a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80081a6:	e009      	b.n	80081bc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2280      	movs	r2, #128	; 0x80
 80081ac:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a10      	ldr	r2, [pc, #64]	; (80081f4 <USB_HostInit+0x16c>)
 80081b2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a10      	ldr	r2, [pc, #64]	; (80081f8 <USB_HostInit+0x170>)
 80081b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d105      	bne.n	80081ce <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	f043 0210 	orr.w	r2, r3, #16
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	699a      	ldr	r2, [r3, #24]
 80081d2:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <USB_HostInit+0x174>)
 80081d4:	4313      	orrs	r3, r2
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081e6:	b004      	add	sp, #16
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	01000200 	.word	0x01000200
 80081f0:	00e00300 	.word	0x00e00300
 80081f4:	00600080 	.word	0x00600080
 80081f8:	004000e0 	.word	0x004000e0
 80081fc:	a3200008 	.word	0xa3200008

08008200 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800821e:	f023 0303 	bic.w	r3, r3, #3
 8008222:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	f003 0303 	and.w	r3, r3, #3
 8008232:	68f9      	ldr	r1, [r7, #12]
 8008234:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008238:	4313      	orrs	r3, r2
 800823a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d107      	bne.n	8008252 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008248:	461a      	mov	r2, r3
 800824a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800824e:	6053      	str	r3, [r2, #4]
 8008250:	e009      	b.n	8008266 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008252:	78fb      	ldrb	r3, [r7, #3]
 8008254:	2b02      	cmp	r3, #2
 8008256:	d106      	bne.n	8008266 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800825e:	461a      	mov	r2, r3
 8008260:	f241 7370 	movw	r3, #6000	; 0x1770
 8008264:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008284:	2300      	movs	r3, #0
 8008286:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008298:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d109      	bne.n	80082b8 <USB_DriveVbus+0x44>
 80082a4:	78fb      	ldrb	r3, [r7, #3]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d106      	bne.n	80082b8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80082b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80082b6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c2:	d109      	bne.n	80082d8 <USB_DriveVbus+0x64>
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d106      	bne.n	80082d8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80082d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082d6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b085      	sub	sp, #20
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	b29b      	uxth	r3, r3
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008308:	b480      	push	{r7}
 800830a:	b089      	sub	sp, #36	; 0x24
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800831c:	2300      	movs	r3, #0
 800831e:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	4413      	add	r3, r2
 8008328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	0c9b      	lsrs	r3, r3, #18
 8008330:	f003 0303 	and.w	r3, r3, #3
 8008334:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	015a      	lsls	r2, r3, #5
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	4413      	add	r3, r2
 800833e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	0fdb      	lsrs	r3, r3, #31
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f003 0320 	and.w	r3, r3, #32
 8008354:	2b20      	cmp	r3, #32
 8008356:	d104      	bne.n	8008362 <USB_HC_Halt+0x5a>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800835e:	2300      	movs	r3, #0
 8008360:	e0e8      	b.n	8008534 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <USB_HC_Halt+0x66>
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	2b02      	cmp	r3, #2
 800836c:	d173      	bne.n	8008456 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	015a      	lsls	r2, r3, #5
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	4413      	add	r3, r2
 8008376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	0151      	lsls	r1, r2, #5
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	440a      	add	r2, r1
 8008384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800838c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f003 0320 	and.w	r3, r3, #32
 8008396:	2b00      	cmp	r3, #0
 8008398:	f040 80cb 	bne.w	8008532 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d143      	bne.n	8008430 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	0151      	lsls	r1, r2, #5
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	440a      	add	r2, r1
 80083be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083c6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	0151      	lsls	r1, r2, #5
 80083da:	69ba      	ldr	r2, [r7, #24]
 80083dc:	440a      	add	r2, r1
 80083de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083e6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	0151      	lsls	r1, r2, #5
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	440a      	add	r2, r1
 80083fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008402:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008406:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	3301      	adds	r3, #1
 800840c:	61fb      	str	r3, [r7, #28]
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008414:	d81d      	bhi.n	8008452 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	4413      	add	r3, r2
 800841e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800842c:	d0ec      	beq.n	8008408 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800842e:	e080      	b.n	8008532 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	4413      	add	r3, r2
 8008438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	0151      	lsls	r1, r2, #5
 8008442:	69ba      	ldr	r2, [r7, #24]
 8008444:	440a      	add	r2, r1
 8008446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800844a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800844e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008450:	e06f      	b.n	8008532 <USB_HC_Halt+0x22a>
            break;
 8008452:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008454:	e06d      	b.n	8008532 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	4413      	add	r3, r2
 800845e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	0151      	lsls	r1, r2, #5
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	440a      	add	r2, r1
 800846c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008470:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008474:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d143      	bne.n	800850e <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	4413      	add	r3, r2
 800848e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	0151      	lsls	r1, r2, #5
 8008498:	69ba      	ldr	r2, [r7, #24]
 800849a:	440a      	add	r2, r1
 800849c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084a4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	0151      	lsls	r1, r2, #5
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	440a      	add	r2, r1
 80084bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084c4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	0151      	lsls	r1, r2, #5
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	440a      	add	r2, r1
 80084dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084e4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	3301      	adds	r3, #1
 80084ea:	61fb      	str	r3, [r7, #28]
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084f2:	d81d      	bhi.n	8008530 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800850a:	d0ec      	beq.n	80084e6 <USB_HC_Halt+0x1de>
 800850c:	e011      	b.n	8008532 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	4413      	add	r3, r2
 8008516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	0151      	lsls	r1, r2, #5
 8008520:	69ba      	ldr	r2, [r7, #24]
 8008522:	440a      	add	r2, r1
 8008524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008528:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800852c:	6013      	str	r3, [r2, #0]
 800852e:	e000      	b.n	8008532 <USB_HC_Halt+0x22a>
          break;
 8008530:	bf00      	nop
    }
  }

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3724      	adds	r7, #36	; 0x24
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <__errno>:
 8008540:	4b01      	ldr	r3, [pc, #4]	; (8008548 <__errno+0x8>)
 8008542:	6818      	ldr	r0, [r3, #0]
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	20000014 	.word	0x20000014

0800854c <__libc_init_array>:
 800854c:	b570      	push	{r4, r5, r6, lr}
 800854e:	4d0d      	ldr	r5, [pc, #52]	; (8008584 <__libc_init_array+0x38>)
 8008550:	4c0d      	ldr	r4, [pc, #52]	; (8008588 <__libc_init_array+0x3c>)
 8008552:	1b64      	subs	r4, r4, r5
 8008554:	10a4      	asrs	r4, r4, #2
 8008556:	2600      	movs	r6, #0
 8008558:	42a6      	cmp	r6, r4
 800855a:	d109      	bne.n	8008570 <__libc_init_array+0x24>
 800855c:	4d0b      	ldr	r5, [pc, #44]	; (800858c <__libc_init_array+0x40>)
 800855e:	4c0c      	ldr	r4, [pc, #48]	; (8008590 <__libc_init_array+0x44>)
 8008560:	f000 fe9c 	bl	800929c <_init>
 8008564:	1b64      	subs	r4, r4, r5
 8008566:	10a4      	asrs	r4, r4, #2
 8008568:	2600      	movs	r6, #0
 800856a:	42a6      	cmp	r6, r4
 800856c:	d105      	bne.n	800857a <__libc_init_array+0x2e>
 800856e:	bd70      	pop	{r4, r5, r6, pc}
 8008570:	f855 3b04 	ldr.w	r3, [r5], #4
 8008574:	4798      	blx	r3
 8008576:	3601      	adds	r6, #1
 8008578:	e7ee      	b.n	8008558 <__libc_init_array+0xc>
 800857a:	f855 3b04 	ldr.w	r3, [r5], #4
 800857e:	4798      	blx	r3
 8008580:	3601      	adds	r6, #1
 8008582:	e7f2      	b.n	800856a <__libc_init_array+0x1e>
 8008584:	08009350 	.word	0x08009350
 8008588:	08009350 	.word	0x08009350
 800858c:	08009350 	.word	0x08009350
 8008590:	08009354 	.word	0x08009354

08008594 <memset>:
 8008594:	4402      	add	r2, r0
 8008596:	4603      	mov	r3, r0
 8008598:	4293      	cmp	r3, r2
 800859a:	d100      	bne.n	800859e <memset+0xa>
 800859c:	4770      	bx	lr
 800859e:	f803 1b01 	strb.w	r1, [r3], #1
 80085a2:	e7f9      	b.n	8008598 <memset+0x4>

080085a4 <_puts_r>:
 80085a4:	b570      	push	{r4, r5, r6, lr}
 80085a6:	460e      	mov	r6, r1
 80085a8:	4605      	mov	r5, r0
 80085aa:	b118      	cbz	r0, 80085b4 <_puts_r+0x10>
 80085ac:	6983      	ldr	r3, [r0, #24]
 80085ae:	b90b      	cbnz	r3, 80085b4 <_puts_r+0x10>
 80085b0:	f000 fb0e 	bl	8008bd0 <__sinit>
 80085b4:	69ab      	ldr	r3, [r5, #24]
 80085b6:	68ac      	ldr	r4, [r5, #8]
 80085b8:	b913      	cbnz	r3, 80085c0 <_puts_r+0x1c>
 80085ba:	4628      	mov	r0, r5
 80085bc:	f000 fb08 	bl	8008bd0 <__sinit>
 80085c0:	4b2c      	ldr	r3, [pc, #176]	; (8008674 <_puts_r+0xd0>)
 80085c2:	429c      	cmp	r4, r3
 80085c4:	d120      	bne.n	8008608 <_puts_r+0x64>
 80085c6:	686c      	ldr	r4, [r5, #4]
 80085c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085ca:	07db      	lsls	r3, r3, #31
 80085cc:	d405      	bmi.n	80085da <_puts_r+0x36>
 80085ce:	89a3      	ldrh	r3, [r4, #12]
 80085d0:	0598      	lsls	r0, r3, #22
 80085d2:	d402      	bmi.n	80085da <_puts_r+0x36>
 80085d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085d6:	f000 fb99 	bl	8008d0c <__retarget_lock_acquire_recursive>
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	0719      	lsls	r1, r3, #28
 80085de:	d51d      	bpl.n	800861c <_puts_r+0x78>
 80085e0:	6923      	ldr	r3, [r4, #16]
 80085e2:	b1db      	cbz	r3, 800861c <_puts_r+0x78>
 80085e4:	3e01      	subs	r6, #1
 80085e6:	68a3      	ldr	r3, [r4, #8]
 80085e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085ec:	3b01      	subs	r3, #1
 80085ee:	60a3      	str	r3, [r4, #8]
 80085f0:	bb39      	cbnz	r1, 8008642 <_puts_r+0x9e>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	da38      	bge.n	8008668 <_puts_r+0xc4>
 80085f6:	4622      	mov	r2, r4
 80085f8:	210a      	movs	r1, #10
 80085fa:	4628      	mov	r0, r5
 80085fc:	f000 f90e 	bl	800881c <__swbuf_r>
 8008600:	3001      	adds	r0, #1
 8008602:	d011      	beq.n	8008628 <_puts_r+0x84>
 8008604:	250a      	movs	r5, #10
 8008606:	e011      	b.n	800862c <_puts_r+0x88>
 8008608:	4b1b      	ldr	r3, [pc, #108]	; (8008678 <_puts_r+0xd4>)
 800860a:	429c      	cmp	r4, r3
 800860c:	d101      	bne.n	8008612 <_puts_r+0x6e>
 800860e:	68ac      	ldr	r4, [r5, #8]
 8008610:	e7da      	b.n	80085c8 <_puts_r+0x24>
 8008612:	4b1a      	ldr	r3, [pc, #104]	; (800867c <_puts_r+0xd8>)
 8008614:	429c      	cmp	r4, r3
 8008616:	bf08      	it	eq
 8008618:	68ec      	ldreq	r4, [r5, #12]
 800861a:	e7d5      	b.n	80085c8 <_puts_r+0x24>
 800861c:	4621      	mov	r1, r4
 800861e:	4628      	mov	r0, r5
 8008620:	f000 f94e 	bl	80088c0 <__swsetup_r>
 8008624:	2800      	cmp	r0, #0
 8008626:	d0dd      	beq.n	80085e4 <_puts_r+0x40>
 8008628:	f04f 35ff 	mov.w	r5, #4294967295
 800862c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800862e:	07da      	lsls	r2, r3, #31
 8008630:	d405      	bmi.n	800863e <_puts_r+0x9a>
 8008632:	89a3      	ldrh	r3, [r4, #12]
 8008634:	059b      	lsls	r3, r3, #22
 8008636:	d402      	bmi.n	800863e <_puts_r+0x9a>
 8008638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800863a:	f000 fb68 	bl	8008d0e <__retarget_lock_release_recursive>
 800863e:	4628      	mov	r0, r5
 8008640:	bd70      	pop	{r4, r5, r6, pc}
 8008642:	2b00      	cmp	r3, #0
 8008644:	da04      	bge.n	8008650 <_puts_r+0xac>
 8008646:	69a2      	ldr	r2, [r4, #24]
 8008648:	429a      	cmp	r2, r3
 800864a:	dc06      	bgt.n	800865a <_puts_r+0xb6>
 800864c:	290a      	cmp	r1, #10
 800864e:	d004      	beq.n	800865a <_puts_r+0xb6>
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	1c5a      	adds	r2, r3, #1
 8008654:	6022      	str	r2, [r4, #0]
 8008656:	7019      	strb	r1, [r3, #0]
 8008658:	e7c5      	b.n	80085e6 <_puts_r+0x42>
 800865a:	4622      	mov	r2, r4
 800865c:	4628      	mov	r0, r5
 800865e:	f000 f8dd 	bl	800881c <__swbuf_r>
 8008662:	3001      	adds	r0, #1
 8008664:	d1bf      	bne.n	80085e6 <_puts_r+0x42>
 8008666:	e7df      	b.n	8008628 <_puts_r+0x84>
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	250a      	movs	r5, #10
 800866c:	1c5a      	adds	r2, r3, #1
 800866e:	6022      	str	r2, [r4, #0]
 8008670:	701d      	strb	r5, [r3, #0]
 8008672:	e7db      	b.n	800862c <_puts_r+0x88>
 8008674:	08009308 	.word	0x08009308
 8008678:	08009328 	.word	0x08009328
 800867c:	080092e8 	.word	0x080092e8

08008680 <puts>:
 8008680:	4b02      	ldr	r3, [pc, #8]	; (800868c <puts+0xc>)
 8008682:	4601      	mov	r1, r0
 8008684:	6818      	ldr	r0, [r3, #0]
 8008686:	f7ff bf8d 	b.w	80085a4 <_puts_r>
 800868a:	bf00      	nop
 800868c:	20000014 	.word	0x20000014

08008690 <setvbuf>:
 8008690:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008694:	461d      	mov	r5, r3
 8008696:	4b5d      	ldr	r3, [pc, #372]	; (800880c <setvbuf+0x17c>)
 8008698:	681f      	ldr	r7, [r3, #0]
 800869a:	4604      	mov	r4, r0
 800869c:	460e      	mov	r6, r1
 800869e:	4690      	mov	r8, r2
 80086a0:	b127      	cbz	r7, 80086ac <setvbuf+0x1c>
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	b913      	cbnz	r3, 80086ac <setvbuf+0x1c>
 80086a6:	4638      	mov	r0, r7
 80086a8:	f000 fa92 	bl	8008bd0 <__sinit>
 80086ac:	4b58      	ldr	r3, [pc, #352]	; (8008810 <setvbuf+0x180>)
 80086ae:	429c      	cmp	r4, r3
 80086b0:	d167      	bne.n	8008782 <setvbuf+0xf2>
 80086b2:	687c      	ldr	r4, [r7, #4]
 80086b4:	f1b8 0f02 	cmp.w	r8, #2
 80086b8:	d006      	beq.n	80086c8 <setvbuf+0x38>
 80086ba:	f1b8 0f01 	cmp.w	r8, #1
 80086be:	f200 809f 	bhi.w	8008800 <setvbuf+0x170>
 80086c2:	2d00      	cmp	r5, #0
 80086c4:	f2c0 809c 	blt.w	8008800 <setvbuf+0x170>
 80086c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086ca:	07db      	lsls	r3, r3, #31
 80086cc:	d405      	bmi.n	80086da <setvbuf+0x4a>
 80086ce:	89a3      	ldrh	r3, [r4, #12]
 80086d0:	0598      	lsls	r0, r3, #22
 80086d2:	d402      	bmi.n	80086da <setvbuf+0x4a>
 80086d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086d6:	f000 fb19 	bl	8008d0c <__retarget_lock_acquire_recursive>
 80086da:	4621      	mov	r1, r4
 80086dc:	4638      	mov	r0, r7
 80086de:	f000 f9e3 	bl	8008aa8 <_fflush_r>
 80086e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086e4:	b141      	cbz	r1, 80086f8 <setvbuf+0x68>
 80086e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086ea:	4299      	cmp	r1, r3
 80086ec:	d002      	beq.n	80086f4 <setvbuf+0x64>
 80086ee:	4638      	mov	r0, r7
 80086f0:	f000 fb7a 	bl	8008de8 <_free_r>
 80086f4:	2300      	movs	r3, #0
 80086f6:	6363      	str	r3, [r4, #52]	; 0x34
 80086f8:	2300      	movs	r3, #0
 80086fa:	61a3      	str	r3, [r4, #24]
 80086fc:	6063      	str	r3, [r4, #4]
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	0619      	lsls	r1, r3, #24
 8008702:	d503      	bpl.n	800870c <setvbuf+0x7c>
 8008704:	6921      	ldr	r1, [r4, #16]
 8008706:	4638      	mov	r0, r7
 8008708:	f000 fb6e 	bl	8008de8 <_free_r>
 800870c:	89a3      	ldrh	r3, [r4, #12]
 800870e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008712:	f023 0303 	bic.w	r3, r3, #3
 8008716:	f1b8 0f02 	cmp.w	r8, #2
 800871a:	81a3      	strh	r3, [r4, #12]
 800871c:	d06c      	beq.n	80087f8 <setvbuf+0x168>
 800871e:	ab01      	add	r3, sp, #4
 8008720:	466a      	mov	r2, sp
 8008722:	4621      	mov	r1, r4
 8008724:	4638      	mov	r0, r7
 8008726:	f000 faf3 	bl	8008d10 <__swhatbuf_r>
 800872a:	89a3      	ldrh	r3, [r4, #12]
 800872c:	4318      	orrs	r0, r3
 800872e:	81a0      	strh	r0, [r4, #12]
 8008730:	2d00      	cmp	r5, #0
 8008732:	d130      	bne.n	8008796 <setvbuf+0x106>
 8008734:	9d00      	ldr	r5, [sp, #0]
 8008736:	4628      	mov	r0, r5
 8008738:	f000 fb4e 	bl	8008dd8 <malloc>
 800873c:	4606      	mov	r6, r0
 800873e:	2800      	cmp	r0, #0
 8008740:	d155      	bne.n	80087ee <setvbuf+0x15e>
 8008742:	f8dd 9000 	ldr.w	r9, [sp]
 8008746:	45a9      	cmp	r9, r5
 8008748:	d14a      	bne.n	80087e0 <setvbuf+0x150>
 800874a:	f04f 35ff 	mov.w	r5, #4294967295
 800874e:	2200      	movs	r2, #0
 8008750:	60a2      	str	r2, [r4, #8]
 8008752:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008756:	6022      	str	r2, [r4, #0]
 8008758:	6122      	str	r2, [r4, #16]
 800875a:	2201      	movs	r2, #1
 800875c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008760:	6162      	str	r2, [r4, #20]
 8008762:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008764:	f043 0302 	orr.w	r3, r3, #2
 8008768:	07d2      	lsls	r2, r2, #31
 800876a:	81a3      	strh	r3, [r4, #12]
 800876c:	d405      	bmi.n	800877a <setvbuf+0xea>
 800876e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008772:	d102      	bne.n	800877a <setvbuf+0xea>
 8008774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008776:	f000 faca 	bl	8008d0e <__retarget_lock_release_recursive>
 800877a:	4628      	mov	r0, r5
 800877c:	b003      	add	sp, #12
 800877e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008782:	4b24      	ldr	r3, [pc, #144]	; (8008814 <setvbuf+0x184>)
 8008784:	429c      	cmp	r4, r3
 8008786:	d101      	bne.n	800878c <setvbuf+0xfc>
 8008788:	68bc      	ldr	r4, [r7, #8]
 800878a:	e793      	b.n	80086b4 <setvbuf+0x24>
 800878c:	4b22      	ldr	r3, [pc, #136]	; (8008818 <setvbuf+0x188>)
 800878e:	429c      	cmp	r4, r3
 8008790:	bf08      	it	eq
 8008792:	68fc      	ldreq	r4, [r7, #12]
 8008794:	e78e      	b.n	80086b4 <setvbuf+0x24>
 8008796:	2e00      	cmp	r6, #0
 8008798:	d0cd      	beq.n	8008736 <setvbuf+0xa6>
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	b913      	cbnz	r3, 80087a4 <setvbuf+0x114>
 800879e:	4638      	mov	r0, r7
 80087a0:	f000 fa16 	bl	8008bd0 <__sinit>
 80087a4:	f1b8 0f01 	cmp.w	r8, #1
 80087a8:	bf08      	it	eq
 80087aa:	89a3      	ldrheq	r3, [r4, #12]
 80087ac:	6026      	str	r6, [r4, #0]
 80087ae:	bf04      	itt	eq
 80087b0:	f043 0301 	orreq.w	r3, r3, #1
 80087b4:	81a3      	strheq	r3, [r4, #12]
 80087b6:	89a2      	ldrh	r2, [r4, #12]
 80087b8:	f012 0308 	ands.w	r3, r2, #8
 80087bc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80087c0:	d01c      	beq.n	80087fc <setvbuf+0x16c>
 80087c2:	07d3      	lsls	r3, r2, #31
 80087c4:	bf41      	itttt	mi
 80087c6:	2300      	movmi	r3, #0
 80087c8:	426d      	negmi	r5, r5
 80087ca:	60a3      	strmi	r3, [r4, #8]
 80087cc:	61a5      	strmi	r5, [r4, #24]
 80087ce:	bf58      	it	pl
 80087d0:	60a5      	strpl	r5, [r4, #8]
 80087d2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80087d4:	f015 0501 	ands.w	r5, r5, #1
 80087d8:	d115      	bne.n	8008806 <setvbuf+0x176>
 80087da:	f412 7f00 	tst.w	r2, #512	; 0x200
 80087de:	e7c8      	b.n	8008772 <setvbuf+0xe2>
 80087e0:	4648      	mov	r0, r9
 80087e2:	f000 faf9 	bl	8008dd8 <malloc>
 80087e6:	4606      	mov	r6, r0
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d0ae      	beq.n	800874a <setvbuf+0xba>
 80087ec:	464d      	mov	r5, r9
 80087ee:	89a3      	ldrh	r3, [r4, #12]
 80087f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f4:	81a3      	strh	r3, [r4, #12]
 80087f6:	e7d0      	b.n	800879a <setvbuf+0x10a>
 80087f8:	2500      	movs	r5, #0
 80087fa:	e7a8      	b.n	800874e <setvbuf+0xbe>
 80087fc:	60a3      	str	r3, [r4, #8]
 80087fe:	e7e8      	b.n	80087d2 <setvbuf+0x142>
 8008800:	f04f 35ff 	mov.w	r5, #4294967295
 8008804:	e7b9      	b.n	800877a <setvbuf+0xea>
 8008806:	2500      	movs	r5, #0
 8008808:	e7b7      	b.n	800877a <setvbuf+0xea>
 800880a:	bf00      	nop
 800880c:	20000014 	.word	0x20000014
 8008810:	08009308 	.word	0x08009308
 8008814:	08009328 	.word	0x08009328
 8008818:	080092e8 	.word	0x080092e8

0800881c <__swbuf_r>:
 800881c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881e:	460e      	mov	r6, r1
 8008820:	4614      	mov	r4, r2
 8008822:	4605      	mov	r5, r0
 8008824:	b118      	cbz	r0, 800882e <__swbuf_r+0x12>
 8008826:	6983      	ldr	r3, [r0, #24]
 8008828:	b90b      	cbnz	r3, 800882e <__swbuf_r+0x12>
 800882a:	f000 f9d1 	bl	8008bd0 <__sinit>
 800882e:	4b21      	ldr	r3, [pc, #132]	; (80088b4 <__swbuf_r+0x98>)
 8008830:	429c      	cmp	r4, r3
 8008832:	d12b      	bne.n	800888c <__swbuf_r+0x70>
 8008834:	686c      	ldr	r4, [r5, #4]
 8008836:	69a3      	ldr	r3, [r4, #24]
 8008838:	60a3      	str	r3, [r4, #8]
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	071a      	lsls	r2, r3, #28
 800883e:	d52f      	bpl.n	80088a0 <__swbuf_r+0x84>
 8008840:	6923      	ldr	r3, [r4, #16]
 8008842:	b36b      	cbz	r3, 80088a0 <__swbuf_r+0x84>
 8008844:	6923      	ldr	r3, [r4, #16]
 8008846:	6820      	ldr	r0, [r4, #0]
 8008848:	1ac0      	subs	r0, r0, r3
 800884a:	6963      	ldr	r3, [r4, #20]
 800884c:	b2f6      	uxtb	r6, r6
 800884e:	4283      	cmp	r3, r0
 8008850:	4637      	mov	r7, r6
 8008852:	dc04      	bgt.n	800885e <__swbuf_r+0x42>
 8008854:	4621      	mov	r1, r4
 8008856:	4628      	mov	r0, r5
 8008858:	f000 f926 	bl	8008aa8 <_fflush_r>
 800885c:	bb30      	cbnz	r0, 80088ac <__swbuf_r+0x90>
 800885e:	68a3      	ldr	r3, [r4, #8]
 8008860:	3b01      	subs	r3, #1
 8008862:	60a3      	str	r3, [r4, #8]
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	1c5a      	adds	r2, r3, #1
 8008868:	6022      	str	r2, [r4, #0]
 800886a:	701e      	strb	r6, [r3, #0]
 800886c:	6963      	ldr	r3, [r4, #20]
 800886e:	3001      	adds	r0, #1
 8008870:	4283      	cmp	r3, r0
 8008872:	d004      	beq.n	800887e <__swbuf_r+0x62>
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	07db      	lsls	r3, r3, #31
 8008878:	d506      	bpl.n	8008888 <__swbuf_r+0x6c>
 800887a:	2e0a      	cmp	r6, #10
 800887c:	d104      	bne.n	8008888 <__swbuf_r+0x6c>
 800887e:	4621      	mov	r1, r4
 8008880:	4628      	mov	r0, r5
 8008882:	f000 f911 	bl	8008aa8 <_fflush_r>
 8008886:	b988      	cbnz	r0, 80088ac <__swbuf_r+0x90>
 8008888:	4638      	mov	r0, r7
 800888a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800888c:	4b0a      	ldr	r3, [pc, #40]	; (80088b8 <__swbuf_r+0x9c>)
 800888e:	429c      	cmp	r4, r3
 8008890:	d101      	bne.n	8008896 <__swbuf_r+0x7a>
 8008892:	68ac      	ldr	r4, [r5, #8]
 8008894:	e7cf      	b.n	8008836 <__swbuf_r+0x1a>
 8008896:	4b09      	ldr	r3, [pc, #36]	; (80088bc <__swbuf_r+0xa0>)
 8008898:	429c      	cmp	r4, r3
 800889a:	bf08      	it	eq
 800889c:	68ec      	ldreq	r4, [r5, #12]
 800889e:	e7ca      	b.n	8008836 <__swbuf_r+0x1a>
 80088a0:	4621      	mov	r1, r4
 80088a2:	4628      	mov	r0, r5
 80088a4:	f000 f80c 	bl	80088c0 <__swsetup_r>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d0cb      	beq.n	8008844 <__swbuf_r+0x28>
 80088ac:	f04f 37ff 	mov.w	r7, #4294967295
 80088b0:	e7ea      	b.n	8008888 <__swbuf_r+0x6c>
 80088b2:	bf00      	nop
 80088b4:	08009308 	.word	0x08009308
 80088b8:	08009328 	.word	0x08009328
 80088bc:	080092e8 	.word	0x080092e8

080088c0 <__swsetup_r>:
 80088c0:	4b32      	ldr	r3, [pc, #200]	; (800898c <__swsetup_r+0xcc>)
 80088c2:	b570      	push	{r4, r5, r6, lr}
 80088c4:	681d      	ldr	r5, [r3, #0]
 80088c6:	4606      	mov	r6, r0
 80088c8:	460c      	mov	r4, r1
 80088ca:	b125      	cbz	r5, 80088d6 <__swsetup_r+0x16>
 80088cc:	69ab      	ldr	r3, [r5, #24]
 80088ce:	b913      	cbnz	r3, 80088d6 <__swsetup_r+0x16>
 80088d0:	4628      	mov	r0, r5
 80088d2:	f000 f97d 	bl	8008bd0 <__sinit>
 80088d6:	4b2e      	ldr	r3, [pc, #184]	; (8008990 <__swsetup_r+0xd0>)
 80088d8:	429c      	cmp	r4, r3
 80088da:	d10f      	bne.n	80088fc <__swsetup_r+0x3c>
 80088dc:	686c      	ldr	r4, [r5, #4]
 80088de:	89a3      	ldrh	r3, [r4, #12]
 80088e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088e4:	0719      	lsls	r1, r3, #28
 80088e6:	d42c      	bmi.n	8008942 <__swsetup_r+0x82>
 80088e8:	06dd      	lsls	r5, r3, #27
 80088ea:	d411      	bmi.n	8008910 <__swsetup_r+0x50>
 80088ec:	2309      	movs	r3, #9
 80088ee:	6033      	str	r3, [r6, #0]
 80088f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088f4:	81a3      	strh	r3, [r4, #12]
 80088f6:	f04f 30ff 	mov.w	r0, #4294967295
 80088fa:	e03e      	b.n	800897a <__swsetup_r+0xba>
 80088fc:	4b25      	ldr	r3, [pc, #148]	; (8008994 <__swsetup_r+0xd4>)
 80088fe:	429c      	cmp	r4, r3
 8008900:	d101      	bne.n	8008906 <__swsetup_r+0x46>
 8008902:	68ac      	ldr	r4, [r5, #8]
 8008904:	e7eb      	b.n	80088de <__swsetup_r+0x1e>
 8008906:	4b24      	ldr	r3, [pc, #144]	; (8008998 <__swsetup_r+0xd8>)
 8008908:	429c      	cmp	r4, r3
 800890a:	bf08      	it	eq
 800890c:	68ec      	ldreq	r4, [r5, #12]
 800890e:	e7e6      	b.n	80088de <__swsetup_r+0x1e>
 8008910:	0758      	lsls	r0, r3, #29
 8008912:	d512      	bpl.n	800893a <__swsetup_r+0x7a>
 8008914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008916:	b141      	cbz	r1, 800892a <__swsetup_r+0x6a>
 8008918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800891c:	4299      	cmp	r1, r3
 800891e:	d002      	beq.n	8008926 <__swsetup_r+0x66>
 8008920:	4630      	mov	r0, r6
 8008922:	f000 fa61 	bl	8008de8 <_free_r>
 8008926:	2300      	movs	r3, #0
 8008928:	6363      	str	r3, [r4, #52]	; 0x34
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008930:	81a3      	strh	r3, [r4, #12]
 8008932:	2300      	movs	r3, #0
 8008934:	6063      	str	r3, [r4, #4]
 8008936:	6923      	ldr	r3, [r4, #16]
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	f043 0308 	orr.w	r3, r3, #8
 8008940:	81a3      	strh	r3, [r4, #12]
 8008942:	6923      	ldr	r3, [r4, #16]
 8008944:	b94b      	cbnz	r3, 800895a <__swsetup_r+0x9a>
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800894c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008950:	d003      	beq.n	800895a <__swsetup_r+0x9a>
 8008952:	4621      	mov	r1, r4
 8008954:	4630      	mov	r0, r6
 8008956:	f000 f9ff 	bl	8008d58 <__smakebuf_r>
 800895a:	89a0      	ldrh	r0, [r4, #12]
 800895c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008960:	f010 0301 	ands.w	r3, r0, #1
 8008964:	d00a      	beq.n	800897c <__swsetup_r+0xbc>
 8008966:	2300      	movs	r3, #0
 8008968:	60a3      	str	r3, [r4, #8]
 800896a:	6963      	ldr	r3, [r4, #20]
 800896c:	425b      	negs	r3, r3
 800896e:	61a3      	str	r3, [r4, #24]
 8008970:	6923      	ldr	r3, [r4, #16]
 8008972:	b943      	cbnz	r3, 8008986 <__swsetup_r+0xc6>
 8008974:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008978:	d1ba      	bne.n	80088f0 <__swsetup_r+0x30>
 800897a:	bd70      	pop	{r4, r5, r6, pc}
 800897c:	0781      	lsls	r1, r0, #30
 800897e:	bf58      	it	pl
 8008980:	6963      	ldrpl	r3, [r4, #20]
 8008982:	60a3      	str	r3, [r4, #8]
 8008984:	e7f4      	b.n	8008970 <__swsetup_r+0xb0>
 8008986:	2000      	movs	r0, #0
 8008988:	e7f7      	b.n	800897a <__swsetup_r+0xba>
 800898a:	bf00      	nop
 800898c:	20000014 	.word	0x20000014
 8008990:	08009308 	.word	0x08009308
 8008994:	08009328 	.word	0x08009328
 8008998:	080092e8 	.word	0x080092e8

0800899c <__sflush_r>:
 800899c:	898a      	ldrh	r2, [r1, #12]
 800899e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a2:	4605      	mov	r5, r0
 80089a4:	0710      	lsls	r0, r2, #28
 80089a6:	460c      	mov	r4, r1
 80089a8:	d458      	bmi.n	8008a5c <__sflush_r+0xc0>
 80089aa:	684b      	ldr	r3, [r1, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	dc05      	bgt.n	80089bc <__sflush_r+0x20>
 80089b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	dc02      	bgt.n	80089bc <__sflush_r+0x20>
 80089b6:	2000      	movs	r0, #0
 80089b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089be:	2e00      	cmp	r6, #0
 80089c0:	d0f9      	beq.n	80089b6 <__sflush_r+0x1a>
 80089c2:	2300      	movs	r3, #0
 80089c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089c8:	682f      	ldr	r7, [r5, #0]
 80089ca:	602b      	str	r3, [r5, #0]
 80089cc:	d032      	beq.n	8008a34 <__sflush_r+0x98>
 80089ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	075a      	lsls	r2, r3, #29
 80089d4:	d505      	bpl.n	80089e2 <__sflush_r+0x46>
 80089d6:	6863      	ldr	r3, [r4, #4]
 80089d8:	1ac0      	subs	r0, r0, r3
 80089da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089dc:	b10b      	cbz	r3, 80089e2 <__sflush_r+0x46>
 80089de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089e0:	1ac0      	subs	r0, r0, r3
 80089e2:	2300      	movs	r3, #0
 80089e4:	4602      	mov	r2, r0
 80089e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089e8:	6a21      	ldr	r1, [r4, #32]
 80089ea:	4628      	mov	r0, r5
 80089ec:	47b0      	blx	r6
 80089ee:	1c43      	adds	r3, r0, #1
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	d106      	bne.n	8008a02 <__sflush_r+0x66>
 80089f4:	6829      	ldr	r1, [r5, #0]
 80089f6:	291d      	cmp	r1, #29
 80089f8:	d82c      	bhi.n	8008a54 <__sflush_r+0xb8>
 80089fa:	4a2a      	ldr	r2, [pc, #168]	; (8008aa4 <__sflush_r+0x108>)
 80089fc:	40ca      	lsrs	r2, r1
 80089fe:	07d6      	lsls	r6, r2, #31
 8008a00:	d528      	bpl.n	8008a54 <__sflush_r+0xb8>
 8008a02:	2200      	movs	r2, #0
 8008a04:	6062      	str	r2, [r4, #4]
 8008a06:	04d9      	lsls	r1, r3, #19
 8008a08:	6922      	ldr	r2, [r4, #16]
 8008a0a:	6022      	str	r2, [r4, #0]
 8008a0c:	d504      	bpl.n	8008a18 <__sflush_r+0x7c>
 8008a0e:	1c42      	adds	r2, r0, #1
 8008a10:	d101      	bne.n	8008a16 <__sflush_r+0x7a>
 8008a12:	682b      	ldr	r3, [r5, #0]
 8008a14:	b903      	cbnz	r3, 8008a18 <__sflush_r+0x7c>
 8008a16:	6560      	str	r0, [r4, #84]	; 0x54
 8008a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a1a:	602f      	str	r7, [r5, #0]
 8008a1c:	2900      	cmp	r1, #0
 8008a1e:	d0ca      	beq.n	80089b6 <__sflush_r+0x1a>
 8008a20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a24:	4299      	cmp	r1, r3
 8008a26:	d002      	beq.n	8008a2e <__sflush_r+0x92>
 8008a28:	4628      	mov	r0, r5
 8008a2a:	f000 f9dd 	bl	8008de8 <_free_r>
 8008a2e:	2000      	movs	r0, #0
 8008a30:	6360      	str	r0, [r4, #52]	; 0x34
 8008a32:	e7c1      	b.n	80089b8 <__sflush_r+0x1c>
 8008a34:	6a21      	ldr	r1, [r4, #32]
 8008a36:	2301      	movs	r3, #1
 8008a38:	4628      	mov	r0, r5
 8008a3a:	47b0      	blx	r6
 8008a3c:	1c41      	adds	r1, r0, #1
 8008a3e:	d1c7      	bne.n	80089d0 <__sflush_r+0x34>
 8008a40:	682b      	ldr	r3, [r5, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d0c4      	beq.n	80089d0 <__sflush_r+0x34>
 8008a46:	2b1d      	cmp	r3, #29
 8008a48:	d001      	beq.n	8008a4e <__sflush_r+0xb2>
 8008a4a:	2b16      	cmp	r3, #22
 8008a4c:	d101      	bne.n	8008a52 <__sflush_r+0xb6>
 8008a4e:	602f      	str	r7, [r5, #0]
 8008a50:	e7b1      	b.n	80089b6 <__sflush_r+0x1a>
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a58:	81a3      	strh	r3, [r4, #12]
 8008a5a:	e7ad      	b.n	80089b8 <__sflush_r+0x1c>
 8008a5c:	690f      	ldr	r7, [r1, #16]
 8008a5e:	2f00      	cmp	r7, #0
 8008a60:	d0a9      	beq.n	80089b6 <__sflush_r+0x1a>
 8008a62:	0793      	lsls	r3, r2, #30
 8008a64:	680e      	ldr	r6, [r1, #0]
 8008a66:	bf08      	it	eq
 8008a68:	694b      	ldreq	r3, [r1, #20]
 8008a6a:	600f      	str	r7, [r1, #0]
 8008a6c:	bf18      	it	ne
 8008a6e:	2300      	movne	r3, #0
 8008a70:	eba6 0807 	sub.w	r8, r6, r7
 8008a74:	608b      	str	r3, [r1, #8]
 8008a76:	f1b8 0f00 	cmp.w	r8, #0
 8008a7a:	dd9c      	ble.n	80089b6 <__sflush_r+0x1a>
 8008a7c:	6a21      	ldr	r1, [r4, #32]
 8008a7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a80:	4643      	mov	r3, r8
 8008a82:	463a      	mov	r2, r7
 8008a84:	4628      	mov	r0, r5
 8008a86:	47b0      	blx	r6
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	dc06      	bgt.n	8008a9a <__sflush_r+0xfe>
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a92:	81a3      	strh	r3, [r4, #12]
 8008a94:	f04f 30ff 	mov.w	r0, #4294967295
 8008a98:	e78e      	b.n	80089b8 <__sflush_r+0x1c>
 8008a9a:	4407      	add	r7, r0
 8008a9c:	eba8 0800 	sub.w	r8, r8, r0
 8008aa0:	e7e9      	b.n	8008a76 <__sflush_r+0xda>
 8008aa2:	bf00      	nop
 8008aa4:	20400001 	.word	0x20400001

08008aa8 <_fflush_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	690b      	ldr	r3, [r1, #16]
 8008aac:	4605      	mov	r5, r0
 8008aae:	460c      	mov	r4, r1
 8008ab0:	b913      	cbnz	r3, 8008ab8 <_fflush_r+0x10>
 8008ab2:	2500      	movs	r5, #0
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	b118      	cbz	r0, 8008ac2 <_fflush_r+0x1a>
 8008aba:	6983      	ldr	r3, [r0, #24]
 8008abc:	b90b      	cbnz	r3, 8008ac2 <_fflush_r+0x1a>
 8008abe:	f000 f887 	bl	8008bd0 <__sinit>
 8008ac2:	4b14      	ldr	r3, [pc, #80]	; (8008b14 <_fflush_r+0x6c>)
 8008ac4:	429c      	cmp	r4, r3
 8008ac6:	d11b      	bne.n	8008b00 <_fflush_r+0x58>
 8008ac8:	686c      	ldr	r4, [r5, #4]
 8008aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0ef      	beq.n	8008ab2 <_fflush_r+0xa>
 8008ad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ad4:	07d0      	lsls	r0, r2, #31
 8008ad6:	d404      	bmi.n	8008ae2 <_fflush_r+0x3a>
 8008ad8:	0599      	lsls	r1, r3, #22
 8008ada:	d402      	bmi.n	8008ae2 <_fflush_r+0x3a>
 8008adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ade:	f000 f915 	bl	8008d0c <__retarget_lock_acquire_recursive>
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	f7ff ff59 	bl	800899c <__sflush_r>
 8008aea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008aec:	07da      	lsls	r2, r3, #31
 8008aee:	4605      	mov	r5, r0
 8008af0:	d4e0      	bmi.n	8008ab4 <_fflush_r+0xc>
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	059b      	lsls	r3, r3, #22
 8008af6:	d4dd      	bmi.n	8008ab4 <_fflush_r+0xc>
 8008af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008afa:	f000 f908 	bl	8008d0e <__retarget_lock_release_recursive>
 8008afe:	e7d9      	b.n	8008ab4 <_fflush_r+0xc>
 8008b00:	4b05      	ldr	r3, [pc, #20]	; (8008b18 <_fflush_r+0x70>)
 8008b02:	429c      	cmp	r4, r3
 8008b04:	d101      	bne.n	8008b0a <_fflush_r+0x62>
 8008b06:	68ac      	ldr	r4, [r5, #8]
 8008b08:	e7df      	b.n	8008aca <_fflush_r+0x22>
 8008b0a:	4b04      	ldr	r3, [pc, #16]	; (8008b1c <_fflush_r+0x74>)
 8008b0c:	429c      	cmp	r4, r3
 8008b0e:	bf08      	it	eq
 8008b10:	68ec      	ldreq	r4, [r5, #12]
 8008b12:	e7da      	b.n	8008aca <_fflush_r+0x22>
 8008b14:	08009308 	.word	0x08009308
 8008b18:	08009328 	.word	0x08009328
 8008b1c:	080092e8 	.word	0x080092e8

08008b20 <std>:
 8008b20:	2300      	movs	r3, #0
 8008b22:	b510      	push	{r4, lr}
 8008b24:	4604      	mov	r4, r0
 8008b26:	e9c0 3300 	strd	r3, r3, [r0]
 8008b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b2e:	6083      	str	r3, [r0, #8]
 8008b30:	8181      	strh	r1, [r0, #12]
 8008b32:	6643      	str	r3, [r0, #100]	; 0x64
 8008b34:	81c2      	strh	r2, [r0, #14]
 8008b36:	6183      	str	r3, [r0, #24]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	2208      	movs	r2, #8
 8008b3c:	305c      	adds	r0, #92	; 0x5c
 8008b3e:	f7ff fd29 	bl	8008594 <memset>
 8008b42:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <std+0x38>)
 8008b44:	6263      	str	r3, [r4, #36]	; 0x24
 8008b46:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <std+0x3c>)
 8008b48:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b4a:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <std+0x40>)
 8008b4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b4e:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <std+0x44>)
 8008b50:	6224      	str	r4, [r4, #32]
 8008b52:	6323      	str	r3, [r4, #48]	; 0x30
 8008b54:	bd10      	pop	{r4, pc}
 8008b56:	bf00      	nop
 8008b58:	08008f5d 	.word	0x08008f5d
 8008b5c:	08008f7f 	.word	0x08008f7f
 8008b60:	08008fb7 	.word	0x08008fb7
 8008b64:	08008fdb 	.word	0x08008fdb

08008b68 <_cleanup_r>:
 8008b68:	4901      	ldr	r1, [pc, #4]	; (8008b70 <_cleanup_r+0x8>)
 8008b6a:	f000 b8af 	b.w	8008ccc <_fwalk_reent>
 8008b6e:	bf00      	nop
 8008b70:	08008aa9 	.word	0x08008aa9

08008b74 <__sfmoreglue>:
 8008b74:	b570      	push	{r4, r5, r6, lr}
 8008b76:	1e4a      	subs	r2, r1, #1
 8008b78:	2568      	movs	r5, #104	; 0x68
 8008b7a:	4355      	muls	r5, r2
 8008b7c:	460e      	mov	r6, r1
 8008b7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b82:	f000 f981 	bl	8008e88 <_malloc_r>
 8008b86:	4604      	mov	r4, r0
 8008b88:	b140      	cbz	r0, 8008b9c <__sfmoreglue+0x28>
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	e9c0 1600 	strd	r1, r6, [r0]
 8008b90:	300c      	adds	r0, #12
 8008b92:	60a0      	str	r0, [r4, #8]
 8008b94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b98:	f7ff fcfc 	bl	8008594 <memset>
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	bd70      	pop	{r4, r5, r6, pc}

08008ba0 <__sfp_lock_acquire>:
 8008ba0:	4801      	ldr	r0, [pc, #4]	; (8008ba8 <__sfp_lock_acquire+0x8>)
 8008ba2:	f000 b8b3 	b.w	8008d0c <__retarget_lock_acquire_recursive>
 8008ba6:	bf00      	nop
 8008ba8:	20000824 	.word	0x20000824

08008bac <__sfp_lock_release>:
 8008bac:	4801      	ldr	r0, [pc, #4]	; (8008bb4 <__sfp_lock_release+0x8>)
 8008bae:	f000 b8ae 	b.w	8008d0e <__retarget_lock_release_recursive>
 8008bb2:	bf00      	nop
 8008bb4:	20000824 	.word	0x20000824

08008bb8 <__sinit_lock_acquire>:
 8008bb8:	4801      	ldr	r0, [pc, #4]	; (8008bc0 <__sinit_lock_acquire+0x8>)
 8008bba:	f000 b8a7 	b.w	8008d0c <__retarget_lock_acquire_recursive>
 8008bbe:	bf00      	nop
 8008bc0:	2000081f 	.word	0x2000081f

08008bc4 <__sinit_lock_release>:
 8008bc4:	4801      	ldr	r0, [pc, #4]	; (8008bcc <__sinit_lock_release+0x8>)
 8008bc6:	f000 b8a2 	b.w	8008d0e <__retarget_lock_release_recursive>
 8008bca:	bf00      	nop
 8008bcc:	2000081f 	.word	0x2000081f

08008bd0 <__sinit>:
 8008bd0:	b510      	push	{r4, lr}
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	f7ff fff0 	bl	8008bb8 <__sinit_lock_acquire>
 8008bd8:	69a3      	ldr	r3, [r4, #24]
 8008bda:	b11b      	cbz	r3, 8008be4 <__sinit+0x14>
 8008bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008be0:	f7ff bff0 	b.w	8008bc4 <__sinit_lock_release>
 8008be4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008be8:	6523      	str	r3, [r4, #80]	; 0x50
 8008bea:	4b13      	ldr	r3, [pc, #76]	; (8008c38 <__sinit+0x68>)
 8008bec:	4a13      	ldr	r2, [pc, #76]	; (8008c3c <__sinit+0x6c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008bf2:	42a3      	cmp	r3, r4
 8008bf4:	bf04      	itt	eq
 8008bf6:	2301      	moveq	r3, #1
 8008bf8:	61a3      	streq	r3, [r4, #24]
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f000 f820 	bl	8008c40 <__sfp>
 8008c00:	6060      	str	r0, [r4, #4]
 8008c02:	4620      	mov	r0, r4
 8008c04:	f000 f81c 	bl	8008c40 <__sfp>
 8008c08:	60a0      	str	r0, [r4, #8]
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f000 f818 	bl	8008c40 <__sfp>
 8008c10:	2200      	movs	r2, #0
 8008c12:	60e0      	str	r0, [r4, #12]
 8008c14:	2104      	movs	r1, #4
 8008c16:	6860      	ldr	r0, [r4, #4]
 8008c18:	f7ff ff82 	bl	8008b20 <std>
 8008c1c:	68a0      	ldr	r0, [r4, #8]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	2109      	movs	r1, #9
 8008c22:	f7ff ff7d 	bl	8008b20 <std>
 8008c26:	68e0      	ldr	r0, [r4, #12]
 8008c28:	2202      	movs	r2, #2
 8008c2a:	2112      	movs	r1, #18
 8008c2c:	f7ff ff78 	bl	8008b20 <std>
 8008c30:	2301      	movs	r3, #1
 8008c32:	61a3      	str	r3, [r4, #24]
 8008c34:	e7d2      	b.n	8008bdc <__sinit+0xc>
 8008c36:	bf00      	nop
 8008c38:	080092e4 	.word	0x080092e4
 8008c3c:	08008b69 	.word	0x08008b69

08008c40 <__sfp>:
 8008c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c42:	4607      	mov	r7, r0
 8008c44:	f7ff ffac 	bl	8008ba0 <__sfp_lock_acquire>
 8008c48:	4b1e      	ldr	r3, [pc, #120]	; (8008cc4 <__sfp+0x84>)
 8008c4a:	681e      	ldr	r6, [r3, #0]
 8008c4c:	69b3      	ldr	r3, [r6, #24]
 8008c4e:	b913      	cbnz	r3, 8008c56 <__sfp+0x16>
 8008c50:	4630      	mov	r0, r6
 8008c52:	f7ff ffbd 	bl	8008bd0 <__sinit>
 8008c56:	3648      	adds	r6, #72	; 0x48
 8008c58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	d503      	bpl.n	8008c68 <__sfp+0x28>
 8008c60:	6833      	ldr	r3, [r6, #0]
 8008c62:	b30b      	cbz	r3, 8008ca8 <__sfp+0x68>
 8008c64:	6836      	ldr	r6, [r6, #0]
 8008c66:	e7f7      	b.n	8008c58 <__sfp+0x18>
 8008c68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c6c:	b9d5      	cbnz	r5, 8008ca4 <__sfp+0x64>
 8008c6e:	4b16      	ldr	r3, [pc, #88]	; (8008cc8 <__sfp+0x88>)
 8008c70:	60e3      	str	r3, [r4, #12]
 8008c72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c76:	6665      	str	r5, [r4, #100]	; 0x64
 8008c78:	f000 f847 	bl	8008d0a <__retarget_lock_init_recursive>
 8008c7c:	f7ff ff96 	bl	8008bac <__sfp_lock_release>
 8008c80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c88:	6025      	str	r5, [r4, #0]
 8008c8a:	61a5      	str	r5, [r4, #24]
 8008c8c:	2208      	movs	r2, #8
 8008c8e:	4629      	mov	r1, r5
 8008c90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c94:	f7ff fc7e 	bl	8008594 <memset>
 8008c98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ca4:	3468      	adds	r4, #104	; 0x68
 8008ca6:	e7d9      	b.n	8008c5c <__sfp+0x1c>
 8008ca8:	2104      	movs	r1, #4
 8008caa:	4638      	mov	r0, r7
 8008cac:	f7ff ff62 	bl	8008b74 <__sfmoreglue>
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	6030      	str	r0, [r6, #0]
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d1d5      	bne.n	8008c64 <__sfp+0x24>
 8008cb8:	f7ff ff78 	bl	8008bac <__sfp_lock_release>
 8008cbc:	230c      	movs	r3, #12
 8008cbe:	603b      	str	r3, [r7, #0]
 8008cc0:	e7ee      	b.n	8008ca0 <__sfp+0x60>
 8008cc2:	bf00      	nop
 8008cc4:	080092e4 	.word	0x080092e4
 8008cc8:	ffff0001 	.word	0xffff0001

08008ccc <_fwalk_reent>:
 8008ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd0:	4606      	mov	r6, r0
 8008cd2:	4688      	mov	r8, r1
 8008cd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008cd8:	2700      	movs	r7, #0
 8008cda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cde:	f1b9 0901 	subs.w	r9, r9, #1
 8008ce2:	d505      	bpl.n	8008cf0 <_fwalk_reent+0x24>
 8008ce4:	6824      	ldr	r4, [r4, #0]
 8008ce6:	2c00      	cmp	r4, #0
 8008ce8:	d1f7      	bne.n	8008cda <_fwalk_reent+0xe>
 8008cea:	4638      	mov	r0, r7
 8008cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cf0:	89ab      	ldrh	r3, [r5, #12]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d907      	bls.n	8008d06 <_fwalk_reent+0x3a>
 8008cf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	d003      	beq.n	8008d06 <_fwalk_reent+0x3a>
 8008cfe:	4629      	mov	r1, r5
 8008d00:	4630      	mov	r0, r6
 8008d02:	47c0      	blx	r8
 8008d04:	4307      	orrs	r7, r0
 8008d06:	3568      	adds	r5, #104	; 0x68
 8008d08:	e7e9      	b.n	8008cde <_fwalk_reent+0x12>

08008d0a <__retarget_lock_init_recursive>:
 8008d0a:	4770      	bx	lr

08008d0c <__retarget_lock_acquire_recursive>:
 8008d0c:	4770      	bx	lr

08008d0e <__retarget_lock_release_recursive>:
 8008d0e:	4770      	bx	lr

08008d10 <__swhatbuf_r>:
 8008d10:	b570      	push	{r4, r5, r6, lr}
 8008d12:	460e      	mov	r6, r1
 8008d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d18:	2900      	cmp	r1, #0
 8008d1a:	b096      	sub	sp, #88	; 0x58
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	461d      	mov	r5, r3
 8008d20:	da07      	bge.n	8008d32 <__swhatbuf_r+0x22>
 8008d22:	2300      	movs	r3, #0
 8008d24:	602b      	str	r3, [r5, #0]
 8008d26:	89b3      	ldrh	r3, [r6, #12]
 8008d28:	061a      	lsls	r2, r3, #24
 8008d2a:	d410      	bmi.n	8008d4e <__swhatbuf_r+0x3e>
 8008d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d30:	e00e      	b.n	8008d50 <__swhatbuf_r+0x40>
 8008d32:	466a      	mov	r2, sp
 8008d34:	f000 f978 	bl	8009028 <_fstat_r>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	dbf2      	blt.n	8008d22 <__swhatbuf_r+0x12>
 8008d3c:	9a01      	ldr	r2, [sp, #4]
 8008d3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d46:	425a      	negs	r2, r3
 8008d48:	415a      	adcs	r2, r3
 8008d4a:	602a      	str	r2, [r5, #0]
 8008d4c:	e7ee      	b.n	8008d2c <__swhatbuf_r+0x1c>
 8008d4e:	2340      	movs	r3, #64	; 0x40
 8008d50:	2000      	movs	r0, #0
 8008d52:	6023      	str	r3, [r4, #0]
 8008d54:	b016      	add	sp, #88	; 0x58
 8008d56:	bd70      	pop	{r4, r5, r6, pc}

08008d58 <__smakebuf_r>:
 8008d58:	898b      	ldrh	r3, [r1, #12]
 8008d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d5c:	079d      	lsls	r5, r3, #30
 8008d5e:	4606      	mov	r6, r0
 8008d60:	460c      	mov	r4, r1
 8008d62:	d507      	bpl.n	8008d74 <__smakebuf_r+0x1c>
 8008d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	6123      	str	r3, [r4, #16]
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	6163      	str	r3, [r4, #20]
 8008d70:	b002      	add	sp, #8
 8008d72:	bd70      	pop	{r4, r5, r6, pc}
 8008d74:	ab01      	add	r3, sp, #4
 8008d76:	466a      	mov	r2, sp
 8008d78:	f7ff ffca 	bl	8008d10 <__swhatbuf_r>
 8008d7c:	9900      	ldr	r1, [sp, #0]
 8008d7e:	4605      	mov	r5, r0
 8008d80:	4630      	mov	r0, r6
 8008d82:	f000 f881 	bl	8008e88 <_malloc_r>
 8008d86:	b948      	cbnz	r0, 8008d9c <__smakebuf_r+0x44>
 8008d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d8c:	059a      	lsls	r2, r3, #22
 8008d8e:	d4ef      	bmi.n	8008d70 <__smakebuf_r+0x18>
 8008d90:	f023 0303 	bic.w	r3, r3, #3
 8008d94:	f043 0302 	orr.w	r3, r3, #2
 8008d98:	81a3      	strh	r3, [r4, #12]
 8008d9a:	e7e3      	b.n	8008d64 <__smakebuf_r+0xc>
 8008d9c:	4b0d      	ldr	r3, [pc, #52]	; (8008dd4 <__smakebuf_r+0x7c>)
 8008d9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008da0:	89a3      	ldrh	r3, [r4, #12]
 8008da2:	6020      	str	r0, [r4, #0]
 8008da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da8:	81a3      	strh	r3, [r4, #12]
 8008daa:	9b00      	ldr	r3, [sp, #0]
 8008dac:	6163      	str	r3, [r4, #20]
 8008dae:	9b01      	ldr	r3, [sp, #4]
 8008db0:	6120      	str	r0, [r4, #16]
 8008db2:	b15b      	cbz	r3, 8008dcc <__smakebuf_r+0x74>
 8008db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008db8:	4630      	mov	r0, r6
 8008dba:	f000 f947 	bl	800904c <_isatty_r>
 8008dbe:	b128      	cbz	r0, 8008dcc <__smakebuf_r+0x74>
 8008dc0:	89a3      	ldrh	r3, [r4, #12]
 8008dc2:	f023 0303 	bic.w	r3, r3, #3
 8008dc6:	f043 0301 	orr.w	r3, r3, #1
 8008dca:	81a3      	strh	r3, [r4, #12]
 8008dcc:	89a0      	ldrh	r0, [r4, #12]
 8008dce:	4305      	orrs	r5, r0
 8008dd0:	81a5      	strh	r5, [r4, #12]
 8008dd2:	e7cd      	b.n	8008d70 <__smakebuf_r+0x18>
 8008dd4:	08008b69 	.word	0x08008b69

08008dd8 <malloc>:
 8008dd8:	4b02      	ldr	r3, [pc, #8]	; (8008de4 <malloc+0xc>)
 8008dda:	4601      	mov	r1, r0
 8008ddc:	6818      	ldr	r0, [r3, #0]
 8008dde:	f000 b853 	b.w	8008e88 <_malloc_r>
 8008de2:	bf00      	nop
 8008de4:	20000014 	.word	0x20000014

08008de8 <_free_r>:
 8008de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dea:	2900      	cmp	r1, #0
 8008dec:	d048      	beq.n	8008e80 <_free_r+0x98>
 8008dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008df2:	9001      	str	r0, [sp, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f1a1 0404 	sub.w	r4, r1, #4
 8008dfa:	bfb8      	it	lt
 8008dfc:	18e4      	addlt	r4, r4, r3
 8008dfe:	f000 f947 	bl	8009090 <__malloc_lock>
 8008e02:	4a20      	ldr	r2, [pc, #128]	; (8008e84 <_free_r+0x9c>)
 8008e04:	9801      	ldr	r0, [sp, #4]
 8008e06:	6813      	ldr	r3, [r2, #0]
 8008e08:	4615      	mov	r5, r2
 8008e0a:	b933      	cbnz	r3, 8008e1a <_free_r+0x32>
 8008e0c:	6063      	str	r3, [r4, #4]
 8008e0e:	6014      	str	r4, [r2, #0]
 8008e10:	b003      	add	sp, #12
 8008e12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e16:	f000 b941 	b.w	800909c <__malloc_unlock>
 8008e1a:	42a3      	cmp	r3, r4
 8008e1c:	d90b      	bls.n	8008e36 <_free_r+0x4e>
 8008e1e:	6821      	ldr	r1, [r4, #0]
 8008e20:	1862      	adds	r2, r4, r1
 8008e22:	4293      	cmp	r3, r2
 8008e24:	bf04      	itt	eq
 8008e26:	681a      	ldreq	r2, [r3, #0]
 8008e28:	685b      	ldreq	r3, [r3, #4]
 8008e2a:	6063      	str	r3, [r4, #4]
 8008e2c:	bf04      	itt	eq
 8008e2e:	1852      	addeq	r2, r2, r1
 8008e30:	6022      	streq	r2, [r4, #0]
 8008e32:	602c      	str	r4, [r5, #0]
 8008e34:	e7ec      	b.n	8008e10 <_free_r+0x28>
 8008e36:	461a      	mov	r2, r3
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	b10b      	cbz	r3, 8008e40 <_free_r+0x58>
 8008e3c:	42a3      	cmp	r3, r4
 8008e3e:	d9fa      	bls.n	8008e36 <_free_r+0x4e>
 8008e40:	6811      	ldr	r1, [r2, #0]
 8008e42:	1855      	adds	r5, r2, r1
 8008e44:	42a5      	cmp	r5, r4
 8008e46:	d10b      	bne.n	8008e60 <_free_r+0x78>
 8008e48:	6824      	ldr	r4, [r4, #0]
 8008e4a:	4421      	add	r1, r4
 8008e4c:	1854      	adds	r4, r2, r1
 8008e4e:	42a3      	cmp	r3, r4
 8008e50:	6011      	str	r1, [r2, #0]
 8008e52:	d1dd      	bne.n	8008e10 <_free_r+0x28>
 8008e54:	681c      	ldr	r4, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	6053      	str	r3, [r2, #4]
 8008e5a:	4421      	add	r1, r4
 8008e5c:	6011      	str	r1, [r2, #0]
 8008e5e:	e7d7      	b.n	8008e10 <_free_r+0x28>
 8008e60:	d902      	bls.n	8008e68 <_free_r+0x80>
 8008e62:	230c      	movs	r3, #12
 8008e64:	6003      	str	r3, [r0, #0]
 8008e66:	e7d3      	b.n	8008e10 <_free_r+0x28>
 8008e68:	6825      	ldr	r5, [r4, #0]
 8008e6a:	1961      	adds	r1, r4, r5
 8008e6c:	428b      	cmp	r3, r1
 8008e6e:	bf04      	itt	eq
 8008e70:	6819      	ldreq	r1, [r3, #0]
 8008e72:	685b      	ldreq	r3, [r3, #4]
 8008e74:	6063      	str	r3, [r4, #4]
 8008e76:	bf04      	itt	eq
 8008e78:	1949      	addeq	r1, r1, r5
 8008e7a:	6021      	streq	r1, [r4, #0]
 8008e7c:	6054      	str	r4, [r2, #4]
 8008e7e:	e7c7      	b.n	8008e10 <_free_r+0x28>
 8008e80:	b003      	add	sp, #12
 8008e82:	bd30      	pop	{r4, r5, pc}
 8008e84:	200000c0 	.word	0x200000c0

08008e88 <_malloc_r>:
 8008e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8a:	1ccd      	adds	r5, r1, #3
 8008e8c:	f025 0503 	bic.w	r5, r5, #3
 8008e90:	3508      	adds	r5, #8
 8008e92:	2d0c      	cmp	r5, #12
 8008e94:	bf38      	it	cc
 8008e96:	250c      	movcc	r5, #12
 8008e98:	2d00      	cmp	r5, #0
 8008e9a:	4606      	mov	r6, r0
 8008e9c:	db01      	blt.n	8008ea2 <_malloc_r+0x1a>
 8008e9e:	42a9      	cmp	r1, r5
 8008ea0:	d903      	bls.n	8008eaa <_malloc_r+0x22>
 8008ea2:	230c      	movs	r3, #12
 8008ea4:	6033      	str	r3, [r6, #0]
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eaa:	f000 f8f1 	bl	8009090 <__malloc_lock>
 8008eae:	4921      	ldr	r1, [pc, #132]	; (8008f34 <_malloc_r+0xac>)
 8008eb0:	680a      	ldr	r2, [r1, #0]
 8008eb2:	4614      	mov	r4, r2
 8008eb4:	b99c      	cbnz	r4, 8008ede <_malloc_r+0x56>
 8008eb6:	4f20      	ldr	r7, [pc, #128]	; (8008f38 <_malloc_r+0xb0>)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	b923      	cbnz	r3, 8008ec6 <_malloc_r+0x3e>
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f000 f83c 	bl	8008f3c <_sbrk_r>
 8008ec4:	6038      	str	r0, [r7, #0]
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f000 f837 	bl	8008f3c <_sbrk_r>
 8008ece:	1c43      	adds	r3, r0, #1
 8008ed0:	d123      	bne.n	8008f1a <_malloc_r+0x92>
 8008ed2:	230c      	movs	r3, #12
 8008ed4:	6033      	str	r3, [r6, #0]
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f000 f8e0 	bl	800909c <__malloc_unlock>
 8008edc:	e7e3      	b.n	8008ea6 <_malloc_r+0x1e>
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	1b5b      	subs	r3, r3, r5
 8008ee2:	d417      	bmi.n	8008f14 <_malloc_r+0x8c>
 8008ee4:	2b0b      	cmp	r3, #11
 8008ee6:	d903      	bls.n	8008ef0 <_malloc_r+0x68>
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	441c      	add	r4, r3
 8008eec:	6025      	str	r5, [r4, #0]
 8008eee:	e004      	b.n	8008efa <_malloc_r+0x72>
 8008ef0:	6863      	ldr	r3, [r4, #4]
 8008ef2:	42a2      	cmp	r2, r4
 8008ef4:	bf0c      	ite	eq
 8008ef6:	600b      	streq	r3, [r1, #0]
 8008ef8:	6053      	strne	r3, [r2, #4]
 8008efa:	4630      	mov	r0, r6
 8008efc:	f000 f8ce 	bl	800909c <__malloc_unlock>
 8008f00:	f104 000b 	add.w	r0, r4, #11
 8008f04:	1d23      	adds	r3, r4, #4
 8008f06:	f020 0007 	bic.w	r0, r0, #7
 8008f0a:	1ac2      	subs	r2, r0, r3
 8008f0c:	d0cc      	beq.n	8008ea8 <_malloc_r+0x20>
 8008f0e:	1a1b      	subs	r3, r3, r0
 8008f10:	50a3      	str	r3, [r4, r2]
 8008f12:	e7c9      	b.n	8008ea8 <_malloc_r+0x20>
 8008f14:	4622      	mov	r2, r4
 8008f16:	6864      	ldr	r4, [r4, #4]
 8008f18:	e7cc      	b.n	8008eb4 <_malloc_r+0x2c>
 8008f1a:	1cc4      	adds	r4, r0, #3
 8008f1c:	f024 0403 	bic.w	r4, r4, #3
 8008f20:	42a0      	cmp	r0, r4
 8008f22:	d0e3      	beq.n	8008eec <_malloc_r+0x64>
 8008f24:	1a21      	subs	r1, r4, r0
 8008f26:	4630      	mov	r0, r6
 8008f28:	f000 f808 	bl	8008f3c <_sbrk_r>
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d1dd      	bne.n	8008eec <_malloc_r+0x64>
 8008f30:	e7cf      	b.n	8008ed2 <_malloc_r+0x4a>
 8008f32:	bf00      	nop
 8008f34:	200000c0 	.word	0x200000c0
 8008f38:	200000c4 	.word	0x200000c4

08008f3c <_sbrk_r>:
 8008f3c:	b538      	push	{r3, r4, r5, lr}
 8008f3e:	4d06      	ldr	r5, [pc, #24]	; (8008f58 <_sbrk_r+0x1c>)
 8008f40:	2300      	movs	r3, #0
 8008f42:	4604      	mov	r4, r0
 8008f44:	4608      	mov	r0, r1
 8008f46:	602b      	str	r3, [r5, #0]
 8008f48:	f7f9 fa4e 	bl	80023e8 <_sbrk>
 8008f4c:	1c43      	adds	r3, r0, #1
 8008f4e:	d102      	bne.n	8008f56 <_sbrk_r+0x1a>
 8008f50:	682b      	ldr	r3, [r5, #0]
 8008f52:	b103      	cbz	r3, 8008f56 <_sbrk_r+0x1a>
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	bd38      	pop	{r3, r4, r5, pc}
 8008f58:	20000828 	.word	0x20000828

08008f5c <__sread>:
 8008f5c:	b510      	push	{r4, lr}
 8008f5e:	460c      	mov	r4, r1
 8008f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f64:	f000 f8a0 	bl	80090a8 <_read_r>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	bfab      	itete	ge
 8008f6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8008f70:	181b      	addge	r3, r3, r0
 8008f72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f76:	bfac      	ite	ge
 8008f78:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f7a:	81a3      	strhlt	r3, [r4, #12]
 8008f7c:	bd10      	pop	{r4, pc}

08008f7e <__swrite>:
 8008f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f82:	461f      	mov	r7, r3
 8008f84:	898b      	ldrh	r3, [r1, #12]
 8008f86:	05db      	lsls	r3, r3, #23
 8008f88:	4605      	mov	r5, r0
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	4616      	mov	r6, r2
 8008f8e:	d505      	bpl.n	8008f9c <__swrite+0x1e>
 8008f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f94:	2302      	movs	r3, #2
 8008f96:	2200      	movs	r2, #0
 8008f98:	f000 f868 	bl	800906c <_lseek_r>
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fa6:	81a3      	strh	r3, [r4, #12]
 8008fa8:	4632      	mov	r2, r6
 8008faa:	463b      	mov	r3, r7
 8008fac:	4628      	mov	r0, r5
 8008fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb2:	f000 b817 	b.w	8008fe4 <_write_r>

08008fb6 <__sseek>:
 8008fb6:	b510      	push	{r4, lr}
 8008fb8:	460c      	mov	r4, r1
 8008fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fbe:	f000 f855 	bl	800906c <_lseek_r>
 8008fc2:	1c43      	adds	r3, r0, #1
 8008fc4:	89a3      	ldrh	r3, [r4, #12]
 8008fc6:	bf15      	itete	ne
 8008fc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fd2:	81a3      	strheq	r3, [r4, #12]
 8008fd4:	bf18      	it	ne
 8008fd6:	81a3      	strhne	r3, [r4, #12]
 8008fd8:	bd10      	pop	{r4, pc}

08008fda <__sclose>:
 8008fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fde:	f000 b813 	b.w	8009008 <_close_r>
	...

08008fe4 <_write_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d07      	ldr	r5, [pc, #28]	; (8009004 <_write_r+0x20>)
 8008fe8:	4604      	mov	r4, r0
 8008fea:	4608      	mov	r0, r1
 8008fec:	4611      	mov	r1, r2
 8008fee:	2200      	movs	r2, #0
 8008ff0:	602a      	str	r2, [r5, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f7f8 fdd6 	bl	8001ba4 <_write>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d102      	bne.n	8009002 <_write_r+0x1e>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	b103      	cbz	r3, 8009002 <_write_r+0x1e>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	20000828 	.word	0x20000828

08009008 <_close_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4d06      	ldr	r5, [pc, #24]	; (8009024 <_close_r+0x1c>)
 800900c:	2300      	movs	r3, #0
 800900e:	4604      	mov	r4, r0
 8009010:	4608      	mov	r0, r1
 8009012:	602b      	str	r3, [r5, #0]
 8009014:	f7f8 fdf2 	bl	8001bfc <_close>
 8009018:	1c43      	adds	r3, r0, #1
 800901a:	d102      	bne.n	8009022 <_close_r+0x1a>
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	b103      	cbz	r3, 8009022 <_close_r+0x1a>
 8009020:	6023      	str	r3, [r4, #0]
 8009022:	bd38      	pop	{r3, r4, r5, pc}
 8009024:	20000828 	.word	0x20000828

08009028 <_fstat_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4d07      	ldr	r5, [pc, #28]	; (8009048 <_fstat_r+0x20>)
 800902c:	2300      	movs	r3, #0
 800902e:	4604      	mov	r4, r0
 8009030:	4608      	mov	r0, r1
 8009032:	4611      	mov	r1, r2
 8009034:	602b      	str	r3, [r5, #0]
 8009036:	f7f8 fe31 	bl	8001c9c <_fstat>
 800903a:	1c43      	adds	r3, r0, #1
 800903c:	d102      	bne.n	8009044 <_fstat_r+0x1c>
 800903e:	682b      	ldr	r3, [r5, #0]
 8009040:	b103      	cbz	r3, 8009044 <_fstat_r+0x1c>
 8009042:	6023      	str	r3, [r4, #0]
 8009044:	bd38      	pop	{r3, r4, r5, pc}
 8009046:	bf00      	nop
 8009048:	20000828 	.word	0x20000828

0800904c <_isatty_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4d06      	ldr	r5, [pc, #24]	; (8009068 <_isatty_r+0x1c>)
 8009050:	2300      	movs	r3, #0
 8009052:	4604      	mov	r4, r0
 8009054:	4608      	mov	r0, r1
 8009056:	602b      	str	r3, [r5, #0]
 8009058:	f7f8 fd8e 	bl	8001b78 <_isatty>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_isatty_r+0x1a>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	b103      	cbz	r3, 8009066 <_isatty_r+0x1a>
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	20000828 	.word	0x20000828

0800906c <_lseek_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4d07      	ldr	r5, [pc, #28]	; (800908c <_lseek_r+0x20>)
 8009070:	4604      	mov	r4, r0
 8009072:	4608      	mov	r0, r1
 8009074:	4611      	mov	r1, r2
 8009076:	2200      	movs	r2, #0
 8009078:	602a      	str	r2, [r5, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	f7f8 fdd5 	bl	8001c2a <_lseek>
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	d102      	bne.n	800908a <_lseek_r+0x1e>
 8009084:	682b      	ldr	r3, [r5, #0]
 8009086:	b103      	cbz	r3, 800908a <_lseek_r+0x1e>
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	bd38      	pop	{r3, r4, r5, pc}
 800908c:	20000828 	.word	0x20000828

08009090 <__malloc_lock>:
 8009090:	4801      	ldr	r0, [pc, #4]	; (8009098 <__malloc_lock+0x8>)
 8009092:	f7ff be3b 	b.w	8008d0c <__retarget_lock_acquire_recursive>
 8009096:	bf00      	nop
 8009098:	20000820 	.word	0x20000820

0800909c <__malloc_unlock>:
 800909c:	4801      	ldr	r0, [pc, #4]	; (80090a4 <__malloc_unlock+0x8>)
 800909e:	f7ff be36 	b.w	8008d0e <__retarget_lock_release_recursive>
 80090a2:	bf00      	nop
 80090a4:	20000820 	.word	0x20000820

080090a8 <_read_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4d07      	ldr	r5, [pc, #28]	; (80090c8 <_read_r+0x20>)
 80090ac:	4604      	mov	r4, r0
 80090ae:	4608      	mov	r0, r1
 80090b0:	4611      	mov	r1, r2
 80090b2:	2200      	movs	r2, #0
 80090b4:	602a      	str	r2, [r5, #0]
 80090b6:	461a      	mov	r2, r3
 80090b8:	f7f8 fdc8 	bl	8001c4c <_read>
 80090bc:	1c43      	adds	r3, r0, #1
 80090be:	d102      	bne.n	80090c6 <_read_r+0x1e>
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	b103      	cbz	r3, 80090c6 <_read_r+0x1e>
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	bd38      	pop	{r3, r4, r5, pc}
 80090c8:	20000828 	.word	0x20000828

080090cc <sqrt>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	ed2d 8b02 	vpush	{d8}
 80090d2:	ec55 4b10 	vmov	r4, r5, d0
 80090d6:	f000 f82d 	bl	8009134 <__ieee754_sqrt>
 80090da:	4b15      	ldr	r3, [pc, #84]	; (8009130 <sqrt+0x64>)
 80090dc:	eeb0 8a40 	vmov.f32	s16, s0
 80090e0:	eef0 8a60 	vmov.f32	s17, s1
 80090e4:	f993 3000 	ldrsb.w	r3, [r3]
 80090e8:	3301      	adds	r3, #1
 80090ea:	d019      	beq.n	8009120 <sqrt+0x54>
 80090ec:	4622      	mov	r2, r4
 80090ee:	462b      	mov	r3, r5
 80090f0:	4620      	mov	r0, r4
 80090f2:	4629      	mov	r1, r5
 80090f4:	f7f7 fcd2 	bl	8000a9c <__aeabi_dcmpun>
 80090f8:	b990      	cbnz	r0, 8009120 <sqrt+0x54>
 80090fa:	2200      	movs	r2, #0
 80090fc:	2300      	movs	r3, #0
 80090fe:	4620      	mov	r0, r4
 8009100:	4629      	mov	r1, r5
 8009102:	f7f7 fca3 	bl	8000a4c <__aeabi_dcmplt>
 8009106:	b158      	cbz	r0, 8009120 <sqrt+0x54>
 8009108:	f7ff fa1a 	bl	8008540 <__errno>
 800910c:	2321      	movs	r3, #33	; 0x21
 800910e:	6003      	str	r3, [r0, #0]
 8009110:	2200      	movs	r2, #0
 8009112:	2300      	movs	r3, #0
 8009114:	4610      	mov	r0, r2
 8009116:	4619      	mov	r1, r3
 8009118:	f7f7 fb50 	bl	80007bc <__aeabi_ddiv>
 800911c:	ec41 0b18 	vmov	d8, r0, r1
 8009120:	eeb0 0a48 	vmov.f32	s0, s16
 8009124:	eef0 0a68 	vmov.f32	s1, s17
 8009128:	ecbd 8b02 	vpop	{d8}
 800912c:	bd38      	pop	{r3, r4, r5, pc}
 800912e:	bf00      	nop
 8009130:	20000078 	.word	0x20000078

08009134 <__ieee754_sqrt>:
 8009134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009138:	ec55 4b10 	vmov	r4, r5, d0
 800913c:	4e56      	ldr	r6, [pc, #344]	; (8009298 <__ieee754_sqrt+0x164>)
 800913e:	43ae      	bics	r6, r5
 8009140:	ee10 0a10 	vmov	r0, s0
 8009144:	ee10 3a10 	vmov	r3, s0
 8009148:	4629      	mov	r1, r5
 800914a:	462a      	mov	r2, r5
 800914c:	d110      	bne.n	8009170 <__ieee754_sqrt+0x3c>
 800914e:	ee10 2a10 	vmov	r2, s0
 8009152:	462b      	mov	r3, r5
 8009154:	f7f7 fa08 	bl	8000568 <__aeabi_dmul>
 8009158:	4602      	mov	r2, r0
 800915a:	460b      	mov	r3, r1
 800915c:	4620      	mov	r0, r4
 800915e:	4629      	mov	r1, r5
 8009160:	f7f7 f84c 	bl	80001fc <__adddf3>
 8009164:	4604      	mov	r4, r0
 8009166:	460d      	mov	r5, r1
 8009168:	ec45 4b10 	vmov	d0, r4, r5
 800916c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009170:	2d00      	cmp	r5, #0
 8009172:	dc10      	bgt.n	8009196 <__ieee754_sqrt+0x62>
 8009174:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009178:	4330      	orrs	r0, r6
 800917a:	d0f5      	beq.n	8009168 <__ieee754_sqrt+0x34>
 800917c:	b15d      	cbz	r5, 8009196 <__ieee754_sqrt+0x62>
 800917e:	ee10 2a10 	vmov	r2, s0
 8009182:	462b      	mov	r3, r5
 8009184:	ee10 0a10 	vmov	r0, s0
 8009188:	f7f7 f836 	bl	80001f8 <__aeabi_dsub>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	f7f7 fb14 	bl	80007bc <__aeabi_ddiv>
 8009194:	e7e6      	b.n	8009164 <__ieee754_sqrt+0x30>
 8009196:	1509      	asrs	r1, r1, #20
 8009198:	d076      	beq.n	8009288 <__ieee754_sqrt+0x154>
 800919a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800919e:	07ce      	lsls	r6, r1, #31
 80091a0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80091a4:	bf5e      	ittt	pl
 80091a6:	0fda      	lsrpl	r2, r3, #31
 80091a8:	005b      	lslpl	r3, r3, #1
 80091aa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80091ae:	0fda      	lsrs	r2, r3, #31
 80091b0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80091b4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80091b8:	2000      	movs	r0, #0
 80091ba:	106d      	asrs	r5, r5, #1
 80091bc:	005b      	lsls	r3, r3, #1
 80091be:	f04f 0e16 	mov.w	lr, #22
 80091c2:	4684      	mov	ip, r0
 80091c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80091c8:	eb0c 0401 	add.w	r4, ip, r1
 80091cc:	4294      	cmp	r4, r2
 80091ce:	bfde      	ittt	le
 80091d0:	1b12      	suble	r2, r2, r4
 80091d2:	eb04 0c01 	addle.w	ip, r4, r1
 80091d6:	1840      	addle	r0, r0, r1
 80091d8:	0052      	lsls	r2, r2, #1
 80091da:	f1be 0e01 	subs.w	lr, lr, #1
 80091de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80091e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80091e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80091ea:	d1ed      	bne.n	80091c8 <__ieee754_sqrt+0x94>
 80091ec:	4671      	mov	r1, lr
 80091ee:	2720      	movs	r7, #32
 80091f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80091f4:	4562      	cmp	r2, ip
 80091f6:	eb04 060e 	add.w	r6, r4, lr
 80091fa:	dc02      	bgt.n	8009202 <__ieee754_sqrt+0xce>
 80091fc:	d113      	bne.n	8009226 <__ieee754_sqrt+0xf2>
 80091fe:	429e      	cmp	r6, r3
 8009200:	d811      	bhi.n	8009226 <__ieee754_sqrt+0xf2>
 8009202:	2e00      	cmp	r6, #0
 8009204:	eb06 0e04 	add.w	lr, r6, r4
 8009208:	da43      	bge.n	8009292 <__ieee754_sqrt+0x15e>
 800920a:	f1be 0f00 	cmp.w	lr, #0
 800920e:	db40      	blt.n	8009292 <__ieee754_sqrt+0x15e>
 8009210:	f10c 0801 	add.w	r8, ip, #1
 8009214:	eba2 020c 	sub.w	r2, r2, ip
 8009218:	429e      	cmp	r6, r3
 800921a:	bf88      	it	hi
 800921c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009220:	1b9b      	subs	r3, r3, r6
 8009222:	4421      	add	r1, r4
 8009224:	46c4      	mov	ip, r8
 8009226:	0052      	lsls	r2, r2, #1
 8009228:	3f01      	subs	r7, #1
 800922a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800922e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009232:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009236:	d1dd      	bne.n	80091f4 <__ieee754_sqrt+0xc0>
 8009238:	4313      	orrs	r3, r2
 800923a:	d006      	beq.n	800924a <__ieee754_sqrt+0x116>
 800923c:	1c4c      	adds	r4, r1, #1
 800923e:	bf13      	iteet	ne
 8009240:	3101      	addne	r1, #1
 8009242:	3001      	addeq	r0, #1
 8009244:	4639      	moveq	r1, r7
 8009246:	f021 0101 	bicne.w	r1, r1, #1
 800924a:	1043      	asrs	r3, r0, #1
 800924c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009250:	0849      	lsrs	r1, r1, #1
 8009252:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009256:	07c2      	lsls	r2, r0, #31
 8009258:	bf48      	it	mi
 800925a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800925e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009262:	460c      	mov	r4, r1
 8009264:	463d      	mov	r5, r7
 8009266:	e77f      	b.n	8009168 <__ieee754_sqrt+0x34>
 8009268:	0ada      	lsrs	r2, r3, #11
 800926a:	3815      	subs	r0, #21
 800926c:	055b      	lsls	r3, r3, #21
 800926e:	2a00      	cmp	r2, #0
 8009270:	d0fa      	beq.n	8009268 <__ieee754_sqrt+0x134>
 8009272:	02d7      	lsls	r7, r2, #11
 8009274:	d50a      	bpl.n	800928c <__ieee754_sqrt+0x158>
 8009276:	f1c1 0420 	rsb	r4, r1, #32
 800927a:	fa23 f404 	lsr.w	r4, r3, r4
 800927e:	1e4d      	subs	r5, r1, #1
 8009280:	408b      	lsls	r3, r1
 8009282:	4322      	orrs	r2, r4
 8009284:	1b41      	subs	r1, r0, r5
 8009286:	e788      	b.n	800919a <__ieee754_sqrt+0x66>
 8009288:	4608      	mov	r0, r1
 800928a:	e7f0      	b.n	800926e <__ieee754_sqrt+0x13a>
 800928c:	0052      	lsls	r2, r2, #1
 800928e:	3101      	adds	r1, #1
 8009290:	e7ef      	b.n	8009272 <__ieee754_sqrt+0x13e>
 8009292:	46e0      	mov	r8, ip
 8009294:	e7be      	b.n	8009214 <__ieee754_sqrt+0xe0>
 8009296:	bf00      	nop
 8009298:	7ff00000 	.word	0x7ff00000

0800929c <_init>:
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	bf00      	nop
 80092a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a2:	bc08      	pop	{r3}
 80092a4:	469e      	mov	lr, r3
 80092a6:	4770      	bx	lr

080092a8 <_fini>:
 80092a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092aa:	bf00      	nop
 80092ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ae:	bc08      	pop	{r3}
 80092b0:	469e      	mov	lr, r3
 80092b2:	4770      	bx	lr
