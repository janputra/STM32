
stm32f4-disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08009a68  08009a68  00019a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bb0  08009bb0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009bb0  08009bb0  00019bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bb8  08009bb8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bb8  08009bb8  00019bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bbc  08009bbc  00019bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  2000007c  08009c3c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  08009c3c  0002082c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c38e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055be  00000000  00000000  0004c43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b38  00000000  00000000  000519f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001928  00000000  00000000  00053530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad81  00000000  00000000  00054e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024c4b  00000000  00000000  0007fbd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea5df  00000000  00000000  000a4824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018ee03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c2c  00000000  00000000  0018ee58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009a50 	.word	0x08009a50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08009a50 	.word	0x08009a50

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_CRC_Init+0x20>)
 8000ea6:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <MX_CRC_Init+0x24>)
 8000ea8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_CRC_Init+0x20>)
 8000eac:	f001 ffda 	bl	8002e64 <HAL_CRC_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000eb6:	f000 fead 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200000d0 	.word	0x200000d0
 8000ec4:	40023000 	.word	0x40023000

08000ec8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <HAL_CRC_MspInit+0x3c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10d      	bne.n	8000ef6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_CRC_MspInit+0x40>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <HAL_CRC_MspInit+0x40>)
 8000ee4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <HAL_CRC_MspInit+0x40>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40023000 	.word	0x40023000
 8000f08:	40023800 	.word	0x40023800

08000f0c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <MX_DMA2D_Init+0x5c>)
 8000f12:	4a16      	ldr	r2, [pc, #88]	; (8000f6c <MX_DMA2D_Init+0x60>)
 8000f14:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_DMA2D_Init+0x5c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_DMA2D_Init+0x5c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_DMA2D_Init+0x5c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_DMA2D_Init+0x5c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_DMA2D_Init+0x5c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_DMA2D_Init+0x5c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_DMA2D_Init+0x5c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000f40:	4809      	ldr	r0, [pc, #36]	; (8000f68 <MX_DMA2D_Init+0x5c>)
 8000f42:	f002 f83d 	bl	8002fc0 <HAL_DMA2D_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000f4c:	f000 fe62 	bl	8001c14 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f50:	2101      	movs	r1, #1
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_DMA2D_Init+0x5c>)
 8000f54:	f002 f98e 	bl	8003274 <HAL_DMA2D_ConfigLayer>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f5e:	f000 fe59 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000e4 	.word	0x200000e4
 8000f6c:	4002b000 	.word	0x4002b000

08000f70 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <HAL_DMA2D_MspInit+0x48>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d115      	bne.n	8000fae <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_DMA2D_MspInit+0x4c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a0c      	ldr	r2, [pc, #48]	; (8000fbc <HAL_DMA2D_MspInit+0x4c>)
 8000f8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_DMA2D_MspInit+0x4c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2105      	movs	r1, #5
 8000fa2:	205a      	movs	r0, #90	; 0x5a
 8000fa4:	f001 ff34 	bl	8002e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fa8:	205a      	movs	r0, #90	; 0x5a
 8000faa:	f001 ff4d 	bl	8002e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	4002b000 	.word	0x4002b000
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	615a      	str	r2, [r3, #20]
 8000fd6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <MX_FMC_Init+0x98>)
 8000fda:	4a20      	ldr	r2, [pc, #128]	; (800105c <MX_FMC_Init+0x9c>)
 8000fdc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000fde:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <MX_FMC_Init+0x98>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <MX_FMC_Init+0x98>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_FMC_Init+0x98>)
 8000fec:	2204      	movs	r2, #4
 8000fee:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <MX_FMC_Init+0x98>)
 8000ff2:	2210      	movs	r2, #16
 8000ff4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <MX_FMC_Init+0x98>)
 8000ff8:	2240      	movs	r2, #64	; 0x40
 8000ffa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <MX_FMC_Init+0x98>)
 8000ffe:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001002:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_FMC_Init+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <MX_FMC_Init+0x98>)
 800100c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001010:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_FMC_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_FMC_Init+0x98>)
 800101a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001020:	2302      	movs	r3, #2
 8001022:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001024:	2307      	movs	r3, #7
 8001026:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001028:	2304      	movs	r3, #4
 800102a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800102c:	2307      	movs	r3, #7
 800102e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001030:	2303      	movs	r3, #3
 8001032:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001038:	2302      	movs	r3, #2
 800103a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_FMC_Init+0x98>)
 8001042:	f005 fa37 	bl	80064b4 <HAL_SDRAM_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800104c:	f000 fde2 	bl	8001c14 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001050:	bf00      	nop
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000124 	.word	0x20000124
 800105c:	a0000140 	.word	0xa0000140

08001060 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001074:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <HAL_FMC_MspInit+0x104>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d16f      	bne.n	800115c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800107c:	4b39      	ldr	r3, [pc, #228]	; (8001164 <HAL_FMC_MspInit+0x104>)
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	4b38      	ldr	r3, [pc, #224]	; (8001168 <HAL_FMC_MspInit+0x108>)
 8001088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108a:	4a37      	ldr	r2, [pc, #220]	; (8001168 <HAL_FMC_MspInit+0x108>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6393      	str	r3, [r2, #56]	; 0x38
 8001092:	4b35      	ldr	r3, [pc, #212]	; (8001168 <HAL_FMC_MspInit+0x108>)
 8001094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800109e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80010a2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010b0:	230c      	movs	r3, #12
 80010b2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	4619      	mov	r1, r3
 80010b8:	482c      	ldr	r0, [pc, #176]	; (800116c <HAL_FMC_MspInit+0x10c>)
 80010ba:	f002 f96d 	bl	8003398 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80010be:	2301      	movs	r3, #1
 80010c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010ce:	230c      	movs	r3, #12
 80010d0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4826      	ldr	r0, [pc, #152]	; (8001170 <HAL_FMC_MspInit+0x110>)
 80010d8:	f002 f95e 	bl	8003398 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80010dc:	f248 1333 	movw	r3, #33075	; 0x8133
 80010e0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010ee:	230c      	movs	r3, #12
 80010f0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	4619      	mov	r1, r3
 80010f6:	481f      	ldr	r0, [pc, #124]	; (8001174 <HAL_FMC_MspInit+0x114>)
 80010f8:	f002 f94e 	bl	8003398 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80010fc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001100:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800110e:	230c      	movs	r3, #12
 8001110:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	4818      	ldr	r0, [pc, #96]	; (8001178 <HAL_FMC_MspInit+0x118>)
 8001118:	f002 f93e 	bl	8003398 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800111c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001120:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800112e:	230c      	movs	r3, #12
 8001130:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4811      	ldr	r0, [pc, #68]	; (800117c <HAL_FMC_MspInit+0x11c>)
 8001138:	f002 f92e 	bl	8003398 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800113c:	2360      	movs	r3, #96	; 0x60
 800113e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800114c:	230c      	movs	r3, #12
 800114e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	4619      	mov	r1, r3
 8001154:	480a      	ldr	r0, [pc, #40]	; (8001180 <HAL_FMC_MspInit+0x120>)
 8001156:	f002 f91f 	bl	8003398 <HAL_GPIO_Init>
 800115a:	e000      	b.n	800115e <HAL_FMC_MspInit+0xfe>
    return;
 800115c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000098 	.word	0x20000098
 8001168:	40023800 	.word	0x40023800
 800116c:	40021400 	.word	0x40021400
 8001170:	40020800 	.word	0x40020800
 8001174:	40021800 	.word	0x40021800
 8001178:	40021000 	.word	0x40021000
 800117c:	40020c00 	.word	0x40020c00
 8001180:	40020400 	.word	0x40020400

08001184 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800118c:	f7ff ff68 	bl	8001060 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08e      	sub	sp, #56	; 0x38
 800119c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
 80011b2:	4b8d      	ldr	r3, [pc, #564]	; (80013e8 <MX_GPIO_Init+0x250>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a8c      	ldr	r2, [pc, #560]	; (80013e8 <MX_GPIO_Init+0x250>)
 80011b8:	f043 0310 	orr.w	r3, r3, #16
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b8a      	ldr	r3, [pc, #552]	; (80013e8 <MX_GPIO_Init+0x250>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	623b      	str	r3, [r7, #32]
 80011c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	4b86      	ldr	r3, [pc, #536]	; (80013e8 <MX_GPIO_Init+0x250>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a85      	ldr	r2, [pc, #532]	; (80013e8 <MX_GPIO_Init+0x250>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b83      	ldr	r3, [pc, #524]	; (80013e8 <MX_GPIO_Init+0x250>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
 80011ea:	4b7f      	ldr	r3, [pc, #508]	; (80013e8 <MX_GPIO_Init+0x250>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a7e      	ldr	r2, [pc, #504]	; (80013e8 <MX_GPIO_Init+0x250>)
 80011f0:	f043 0320 	orr.w	r3, r3, #32
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b7c      	ldr	r3, [pc, #496]	; (80013e8 <MX_GPIO_Init+0x250>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	61bb      	str	r3, [r7, #24]
 8001200:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	4b78      	ldr	r3, [pc, #480]	; (80013e8 <MX_GPIO_Init+0x250>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a77      	ldr	r2, [pc, #476]	; (80013e8 <MX_GPIO_Init+0x250>)
 800120c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b75      	ldr	r3, [pc, #468]	; (80013e8 <MX_GPIO_Init+0x250>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b71      	ldr	r3, [pc, #452]	; (80013e8 <MX_GPIO_Init+0x250>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a70      	ldr	r2, [pc, #448]	; (80013e8 <MX_GPIO_Init+0x250>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b6e      	ldr	r3, [pc, #440]	; (80013e8 <MX_GPIO_Init+0x250>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b6a      	ldr	r3, [pc, #424]	; (80013e8 <MX_GPIO_Init+0x250>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a69      	ldr	r2, [pc, #420]	; (80013e8 <MX_GPIO_Init+0x250>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b67      	ldr	r3, [pc, #412]	; (80013e8 <MX_GPIO_Init+0x250>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b63      	ldr	r3, [pc, #396]	; (80013e8 <MX_GPIO_Init+0x250>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a62      	ldr	r2, [pc, #392]	; (80013e8 <MX_GPIO_Init+0x250>)
 8001260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b60      	ldr	r3, [pc, #384]	; (80013e8 <MX_GPIO_Init+0x250>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b5c      	ldr	r3, [pc, #368]	; (80013e8 <MX_GPIO_Init+0x250>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a5b      	ldr	r2, [pc, #364]	; (80013e8 <MX_GPIO_Init+0x250>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b59      	ldr	r3, [pc, #356]	; (80013e8 <MX_GPIO_Init+0x250>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SM_IN1_Pin|SM_IN2_Pin|SM_IN3_Pin|SM_IN4_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	213c      	movs	r1, #60	; 0x3c
 8001292:	4856      	ldr	r0, [pc, #344]	; (80013ec <MX_GPIO_Init+0x254>)
 8001294:	f002 fa2c 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2116      	movs	r1, #22
 800129c:	4854      	ldr	r0, [pc, #336]	; (80013f0 <MX_GPIO_Init+0x258>)
 800129e:	f002 fa27 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	4853      	ldr	r0, [pc, #332]	; (80013f4 <MX_GPIO_Init+0x25c>)
 80012a8:	f002 fa22 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80012b2:	4851      	ldr	r0, [pc, #324]	; (80013f8 <MX_GPIO_Init+0x260>)
 80012b4:	f002 fa1c 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80012be:	484f      	ldr	r0, [pc, #316]	; (80013fc <MX_GPIO_Init+0x264>)
 80012c0:	f002 fa16 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SM_IN1_Pin|SM_IN2_Pin|SM_IN3_Pin|SM_IN4_Pin;
 80012c4:	233c      	movs	r3, #60	; 0x3c
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d8:	4619      	mov	r1, r3
 80012da:	4844      	ldr	r0, [pc, #272]	; (80013ec <MX_GPIO_Init+0x254>)
 80012dc:	f002 f85c 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80012e0:	2316      	movs	r3, #22
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f4:	4619      	mov	r1, r3
 80012f6:	483e      	ldr	r0, [pc, #248]	; (80013f0 <MX_GPIO_Init+0x258>)
 80012f8:	f002 f84e 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012fc:	2301      	movs	r3, #1
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001300:	4b3f      	ldr	r3, [pc, #252]	; (8001400 <MX_GPIO_Init+0x268>)
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	4839      	ldr	r0, [pc, #228]	; (80013f4 <MX_GPIO_Init+0x25c>)
 8001310:	f002 f842 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|TP_INT1_Pin;
 8001314:	f248 0302 	movw	r3, #32770	; 0x8002
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800131a:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <MX_GPIO_Init+0x26c>)
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001326:	4619      	mov	r1, r3
 8001328:	4832      	ldr	r0, [pc, #200]	; (80013f4 <MX_GPIO_Init+0x25c>)
 800132a:	f002 f835 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001342:	4619      	mov	r1, r3
 8001344:	482b      	ldr	r0, [pc, #172]	; (80013f4 <MX_GPIO_Init+0x25c>)
 8001346:	f002 f827 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800134a:	2320      	movs	r3, #32
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <MX_GPIO_Init+0x26c>)
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	4824      	ldr	r0, [pc, #144]	; (80013f0 <MX_GPIO_Init+0x258>)
 800135e:	f002 f81b 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001362:	2304      	movs	r3, #4
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001366:	2300      	movs	r3, #0
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	4824      	ldr	r0, [pc, #144]	; (8001408 <MX_GPIO_Init+0x270>)
 8001376:	f002 f80f 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 800137a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001380:	2300      	movs	r3, #0
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	4619      	mov	r1, r3
 800138e:	481a      	ldr	r0, [pc, #104]	; (80013f8 <MX_GPIO_Init+0x260>)
 8001390:	f002 f802 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001394:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013aa:	4619      	mov	r1, r3
 80013ac:	4812      	ldr	r0, [pc, #72]	; (80013f8 <MX_GPIO_Init+0x260>)
 80013ae:	f001 fff3 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80013b2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c8:	4619      	mov	r1, r3
 80013ca:	480c      	ldr	r0, [pc, #48]	; (80013fc <MX_GPIO_Init+0x264>)
 80013cc:	f001 ffe4 	bl	8003398 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	2006      	movs	r0, #6
 80013d6:	f001 fd1b 	bl	8002e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013da:	2006      	movs	r0, #6
 80013dc:	f001 fd34 	bl	8002e48 <HAL_NVIC_EnableIRQ>

}
 80013e0:	bf00      	nop
 80013e2:	3738      	adds	r7, #56	; 0x38
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020c00 	.word	0x40020c00
 80013fc:	40021800 	.word	0x40021800
 8001400:	10110000 	.word	0x10110000
 8001404:	10120000 	.word	0x10120000
 8001408:	40020400 	.word	0x40020400

0800140c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
	//HAL_UART_Transmit_IT(&huart5, Tx_data.buff, Tx_data.len);

	//TX_send_Int(10);

	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001416:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <HAL_GPIO_EXTI_Callback+0x24>)
 800141c:	f002 f981 	bl	8003722 <HAL_GPIO_TogglePin>
	//printf("test!!\n");

	runMotor_f=1;
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <HAL_GPIO_EXTI_Callback+0x28>)
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]


}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40021800 	.word	0x40021800
 8001434:	200000c8 	.word	0x200000c8

08001438 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_I2C3_Init+0x74>)
 800143e:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <MX_I2C3_Init+0x78>)
 8001440:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_I2C3_Init+0x74>)
 8001444:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <MX_I2C3_Init+0x7c>)
 8001446:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_I2C3_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_I2C3_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_I2C3_Init+0x74>)
 8001456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800145a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_I2C3_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_I2C3_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_I2C3_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_I2C3_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001474:	480d      	ldr	r0, [pc, #52]	; (80014ac <MX_I2C3_Init+0x74>)
 8001476:	f003 fc91 	bl	8004d9c <HAL_I2C_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001480:	f000 fbc8 	bl	8001c14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001484:	2100      	movs	r1, #0
 8001486:	4809      	ldr	r0, [pc, #36]	; (80014ac <MX_I2C3_Init+0x74>)
 8001488:	f003 fdcc 	bl	8005024 <HAL_I2CEx_ConfigAnalogFilter>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001492:	f000 fbbf 	bl	8001c14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001496:	2100      	movs	r1, #0
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_I2C3_Init+0x74>)
 800149a:	f003 fdff 	bl	800509c <HAL_I2CEx_ConfigDigitalFilter>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80014a4:	f000 fbb6 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000158 	.word	0x20000158
 80014b0:	40005c00 	.word	0x40005c00
 80014b4:	000186a0 	.word	0x000186a0

080014b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a29      	ldr	r2, [pc, #164]	; (800157c <HAL_I2C_MspInit+0xc4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d14b      	bne.n	8001572 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	4b28      	ldr	r3, [pc, #160]	; (8001580 <HAL_I2C_MspInit+0xc8>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a27      	ldr	r2, [pc, #156]	; (8001580 <HAL_I2C_MspInit+0xc8>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b25      	ldr	r3, [pc, #148]	; (8001580 <HAL_I2C_MspInit+0xc8>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b21      	ldr	r3, [pc, #132]	; (8001580 <HAL_I2C_MspInit+0xc8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a20      	ldr	r2, [pc, #128]	; (8001580 <HAL_I2C_MspInit+0xc8>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_I2C_MspInit+0xc8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001512:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001518:	2312      	movs	r3, #18
 800151a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151c:	2301      	movs	r3, #1
 800151e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001524:	2304      	movs	r3, #4
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4619      	mov	r1, r3
 800152e:	4815      	ldr	r0, [pc, #84]	; (8001584 <HAL_I2C_MspInit+0xcc>)
 8001530:	f001 ff32 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153a:	2312      	movs	r3, #18
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800153e:	2301      	movs	r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001546:	2304      	movs	r3, #4
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	480d      	ldr	r0, [pc, #52]	; (8001588 <HAL_I2C_MspInit+0xd0>)
 8001552:	f001 ff21 	bl	8003398 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_I2C_MspInit+0xc8>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_I2C_MspInit+0xc8>)
 8001560:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_I2C_MspInit+0xc8>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	; 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40005c00 	.word	0x40005c00
 8001580:	40023800 	.word	0x40023800
 8001584:	40020800 	.word	0x40020800
 8001588:	40020000 	.word	0x40020000

0800158c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08e      	sub	sp, #56	; 0x38
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2234      	movs	r2, #52	; 0x34
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f007 f8cf 	bl	800873c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800159e:	4b39      	ldr	r3, [pc, #228]	; (8001684 <MX_LTDC_Init+0xf8>)
 80015a0:	4a39      	ldr	r2, [pc, #228]	; (8001688 <MX_LTDC_Init+0xfc>)
 80015a2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015a4:	4b37      	ldr	r3, [pc, #220]	; (8001684 <MX_LTDC_Init+0xf8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80015aa:	4b36      	ldr	r3, [pc, #216]	; (8001684 <MX_LTDC_Init+0xf8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015b0:	4b34      	ldr	r3, [pc, #208]	; (8001684 <MX_LTDC_Init+0xf8>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015b6:	4b33      	ldr	r3, [pc, #204]	; (8001684 <MX_LTDC_Init+0xf8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80015bc:	4b31      	ldr	r3, [pc, #196]	; (8001684 <MX_LTDC_Init+0xf8>)
 80015be:	2209      	movs	r2, #9
 80015c0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80015c2:	4b30      	ldr	r3, [pc, #192]	; (8001684 <MX_LTDC_Init+0xf8>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80015c8:	4b2e      	ldr	r3, [pc, #184]	; (8001684 <MX_LTDC_Init+0xf8>)
 80015ca:	221d      	movs	r2, #29
 80015cc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80015ce:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <MX_LTDC_Init+0xf8>)
 80015d0:	2203      	movs	r2, #3
 80015d2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80015d4:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <MX_LTDC_Init+0xf8>)
 80015d6:	f240 120d 	movw	r2, #269	; 0x10d
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80015dc:	4b29      	ldr	r3, [pc, #164]	; (8001684 <MX_LTDC_Init+0xf8>)
 80015de:	f240 1243 	movw	r2, #323	; 0x143
 80015e2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <MX_LTDC_Init+0xf8>)
 80015e6:	f240 1217 	movw	r2, #279	; 0x117
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80015ec:	4b25      	ldr	r3, [pc, #148]	; (8001684 <MX_LTDC_Init+0xf8>)
 80015ee:	f240 1247 	movw	r2, #327	; 0x147
 80015f2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80015f4:	4b23      	ldr	r3, [pc, #140]	; (8001684 <MX_LTDC_Init+0xf8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <MX_LTDC_Init+0xf8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <MX_LTDC_Init+0xf8>)
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800160c:	481d      	ldr	r0, [pc, #116]	; (8001684 <MX_LTDC_Init+0xf8>)
 800160e:	f003 fd85 	bl	800511c <HAL_LTDC_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001618:	f000 fafc 	bl	8001c14 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001620:	23f0      	movs	r3, #240	; 0xf0
 8001622:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001628:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800162c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800162e:	2302      	movs	r3, #2
 8001630:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001632:	23ff      	movs	r3, #255	; 0xff
 8001634:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800163a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800163e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001640:	2307      	movs	r3, #7
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001644:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800164a:	23f0      	movs	r3, #240	; 0xf0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800164e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2200      	movs	r2, #0
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_LTDC_Init+0xf8>)
 800166e:	f003 fee7 	bl	8005440 <HAL_LTDC_ConfigLayer>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001678:	f000 facc 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	3738      	adds	r7, #56	; 0x38
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200001ac 	.word	0x200001ac
 8001688:	40016800 	.word	0x40016800

0800168c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08e      	sub	sp, #56	; 0x38
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a7b      	ldr	r2, [pc, #492]	; (8001898 <HAL_LTDC_MspInit+0x20c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	f040 80f0 	bne.w	8001890 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
 80016b4:	4b79      	ldr	r3, [pc, #484]	; (800189c <HAL_LTDC_MspInit+0x210>)
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	4a78      	ldr	r2, [pc, #480]	; (800189c <HAL_LTDC_MspInit+0x210>)
 80016ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016be:	6453      	str	r3, [r2, #68]	; 0x44
 80016c0:	4b76      	ldr	r3, [pc, #472]	; (800189c <HAL_LTDC_MspInit+0x210>)
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016c8:	623b      	str	r3, [r7, #32]
 80016ca:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	4b72      	ldr	r3, [pc, #456]	; (800189c <HAL_LTDC_MspInit+0x210>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	4a71      	ldr	r2, [pc, #452]	; (800189c <HAL_LTDC_MspInit+0x210>)
 80016d6:	f043 0320 	orr.w	r3, r3, #32
 80016da:	6313      	str	r3, [r2, #48]	; 0x30
 80016dc:	4b6f      	ldr	r3, [pc, #444]	; (800189c <HAL_LTDC_MspInit+0x210>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	4b6b      	ldr	r3, [pc, #428]	; (800189c <HAL_LTDC_MspInit+0x210>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	4a6a      	ldr	r2, [pc, #424]	; (800189c <HAL_LTDC_MspInit+0x210>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6313      	str	r3, [r2, #48]	; 0x30
 80016f8:	4b68      	ldr	r3, [pc, #416]	; (800189c <HAL_LTDC_MspInit+0x210>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	61bb      	str	r3, [r7, #24]
 8001702:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	4b64      	ldr	r3, [pc, #400]	; (800189c <HAL_LTDC_MspInit+0x210>)
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	4a63      	ldr	r2, [pc, #396]	; (800189c <HAL_LTDC_MspInit+0x210>)
 800170e:	f043 0302 	orr.w	r3, r3, #2
 8001712:	6313      	str	r3, [r2, #48]	; 0x30
 8001714:	4b61      	ldr	r3, [pc, #388]	; (800189c <HAL_LTDC_MspInit+0x210>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	4b5d      	ldr	r3, [pc, #372]	; (800189c <HAL_LTDC_MspInit+0x210>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	4a5c      	ldr	r2, [pc, #368]	; (800189c <HAL_LTDC_MspInit+0x210>)
 800172a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800172e:	6313      	str	r3, [r2, #48]	; 0x30
 8001730:	4b5a      	ldr	r3, [pc, #360]	; (800189c <HAL_LTDC_MspInit+0x210>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	4b56      	ldr	r3, [pc, #344]	; (800189c <HAL_LTDC_MspInit+0x210>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	4a55      	ldr	r2, [pc, #340]	; (800189c <HAL_LTDC_MspInit+0x210>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	6313      	str	r3, [r2, #48]	; 0x30
 800174c:	4b53      	ldr	r3, [pc, #332]	; (800189c <HAL_LTDC_MspInit+0x210>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	4b4f      	ldr	r3, [pc, #316]	; (800189c <HAL_LTDC_MspInit+0x210>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	4a4e      	ldr	r2, [pc, #312]	; (800189c <HAL_LTDC_MspInit+0x210>)
 8001762:	f043 0308 	orr.w	r3, r3, #8
 8001766:	6313      	str	r3, [r2, #48]	; 0x30
 8001768:	4b4c      	ldr	r3, [pc, #304]	; (800189c <HAL_LTDC_MspInit+0x210>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001786:	230e      	movs	r3, #14
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178e:	4619      	mov	r1, r3
 8001790:	4843      	ldr	r0, [pc, #268]	; (80018a0 <HAL_LTDC_MspInit+0x214>)
 8001792:	f001 fe01 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001796:	f641 0358 	movw	r3, #6232	; 0x1858
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017a8:	230e      	movs	r3, #14
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	4619      	mov	r1, r3
 80017b2:	483c      	ldr	r0, [pc, #240]	; (80018a4 <HAL_LTDC_MspInit+0x218>)
 80017b4:	f001 fdf0 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80017b8:	2303      	movs	r3, #3
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017c8:	2309      	movs	r3, #9
 80017ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d0:	4619      	mov	r1, r3
 80017d2:	4835      	ldr	r0, [pc, #212]	; (80018a8 <HAL_LTDC_MspInit+0x21c>)
 80017d4:	f001 fde0 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80017d8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017ea:	230e      	movs	r3, #14
 80017ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f2:	4619      	mov	r1, r3
 80017f4:	482c      	ldr	r0, [pc, #176]	; (80018a8 <HAL_LTDC_MspInit+0x21c>)
 80017f6:	f001 fdcf 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80017fa:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800180c:	230e      	movs	r3, #14
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001814:	4619      	mov	r1, r3
 8001816:	4825      	ldr	r0, [pc, #148]	; (80018ac <HAL_LTDC_MspInit+0x220>)
 8001818:	f001 fdbe 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800181c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800182e:	230e      	movs	r3, #14
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001836:	4619      	mov	r1, r3
 8001838:	481d      	ldr	r0, [pc, #116]	; (80018b0 <HAL_LTDC_MspInit+0x224>)
 800183a:	f001 fdad 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800183e:	2348      	movs	r3, #72	; 0x48
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800184e:	230e      	movs	r3, #14
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	4619      	mov	r1, r3
 8001858:	4816      	ldr	r0, [pc, #88]	; (80018b4 <HAL_LTDC_MspInit+0x228>)
 800185a:	f001 fd9d 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800185e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001870:	2309      	movs	r3, #9
 8001872:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001878:	4619      	mov	r1, r3
 800187a:	480c      	ldr	r0, [pc, #48]	; (80018ac <HAL_LTDC_MspInit+0x220>)
 800187c:	f001 fd8c 	bl	8003398 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	2105      	movs	r1, #5
 8001884:	2058      	movs	r0, #88	; 0x58
 8001886:	f001 fac3 	bl	8002e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800188a:	2058      	movs	r0, #88	; 0x58
 800188c:	f001 fadc 	bl	8002e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001890:	bf00      	nop
 8001892:	3738      	adds	r7, #56	; 0x38
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40016800 	.word	0x40016800
 800189c:	40023800 	.word	0x40023800
 80018a0:	40021400 	.word	0x40021400
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40021800 	.word	0x40021800
 80018b0:	40020800 	.word	0x40020800
 80018b4:	40020c00 	.word	0x40020c00

080018b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08e      	sub	sp, #56	; 0x38
 80018bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018be:	f001 f989 	bl	8002bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c2:	f000 f8e1 	bl	8001a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c6:	f7ff fc67 	bl	8001198 <MX_GPIO_Init>
  MX_CRC_Init();
 80018ca:	f7ff fae9 	bl	8000ea0 <MX_CRC_Init>
  MX_DMA2D_Init();
 80018ce:	f7ff fb1d 	bl	8000f0c <MX_DMA2D_Init>
  MX_FMC_Init();
 80018d2:	f7ff fb75 	bl	8000fc0 <MX_FMC_Init>
  MX_I2C3_Init();
 80018d6:	f7ff fdaf 	bl	8001438 <MX_I2C3_Init>
  MX_LTDC_Init();
 80018da:	f7ff fe57 	bl	800158c <MX_LTDC_Init>
  MX_SPI5_Init();
 80018de:	f000 fb09 	bl	8001ef4 <MX_SPI5_Init>
  MX_TIM1_Init();
 80018e2:	f000 fee1 	bl	80026a8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80018e6:	f000 ffcb 	bl	8002880 <MX_USART1_UART_Init>
  MX_UART5_Init();
 80018ea:	f000 ff9f 	bl	800282c <MX_UART5_Init>
  MX_USB_OTG_HS_HCD_Init();
 80018ee:	f001 f8bd 	bl	8002a6c <MX_USB_OTG_HS_HCD_Init>
  MX_TIM7_Init();
 80018f2:	f000 ff29 	bl	8002748 <MX_TIM7_Init>
  RetargetInit(&huart5);
 80018f6:	485c      	ldr	r0, [pc, #368]	; (8001a68 <main+0x1b0>)
 80018f8:	f000 fa36 	bl	8001d68 <RetargetInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Ser_Queue.Front=-1;
 80018fc:	4b5b      	ldr	r3, [pc, #364]	; (8001a6c <main+0x1b4>)
 80018fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001902:	801a      	strh	r2, [r3, #0]
  Ser_Queue.Rear=-1;
 8001904:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <main+0x1b4>)
 8001906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800190a:	805a      	strh	r2, [r3, #2]
  uint8_t buffer[20];
  uint8_t cmd[3];
  int8_t buf_val[4];
  HAL_UART_Receive_IT(&huart5, rec_buff, 1);
 800190c:	2201      	movs	r2, #1
 800190e:	4958      	ldr	r1, [pc, #352]	; (8001a70 <main+0x1b8>)
 8001910:	4855      	ldr	r0, [pc, #340]	; (8001a68 <main+0x1b0>)
 8001912:	f005 fcba 	bl	800728a <HAL_UART_Receive_IT>
 // uint16_t c=0;
  motor_param.accel=50;
 8001916:	4b57      	ldr	r3, [pc, #348]	; (8001a74 <main+0x1bc>)
 8001918:	2232      	movs	r2, #50	; 0x32
 800191a:	805a      	strh	r2, [r3, #2]
  motor_param.decel=50;
 800191c:	4b55      	ldr	r3, [pc, #340]	; (8001a74 <main+0x1bc>)
 800191e:	2232      	movs	r2, #50	; 0x32
 8001920:	809a      	strh	r2, [r3, #4]
  motor_param.speed=100;
 8001922:	4b54      	ldr	r3, [pc, #336]	; (8001a74 <main+0x1bc>)
 8001924:	2264      	movs	r2, #100	; 0x64
 8001926:	801a      	strh	r2, [r3, #0]
  motor_param.steps=4096;
 8001928:	4b52      	ldr	r3, [pc, #328]	; (8001a74 <main+0x1bc>)
 800192a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800192e:	80da      	strh	r2, [r3, #6]
//	  HAL_Delay(1000);
//
//	  //HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
//	  LD3_GPIO_Port->BSRR|=(uint32_t)LD3_Pin<<16;
//	  HAL_Delay(1000);
	  if (buff_is_ready())
 8001930:	f000 f92e 	bl	8001b90 <buff_is_ready>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8088 	beq.w	8001a4c <main+0x194>
	  {

		  for (int i=0;i<3;i++){
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001940:	e00d      	b.n	800195e <main+0xa6>
			  cmd[i]= deQueue(&Ser_Queue);
 8001942:	484a      	ldr	r0, [pc, #296]	; (8001a6c <main+0x1b4>)
 8001944:	f000 f9de 	bl	8001d04 <deQueue>
 8001948:	4603      	mov	r3, r0
 800194a:	4619      	mov	r1, r3
 800194c:	f107 0208 	add.w	r2, r7, #8
 8001950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001952:	4413      	add	r3, r2
 8001954:	460a      	mov	r2, r1
 8001956:	701a      	strb	r2, [r3, #0]
		  for (int i=0;i<3;i++){
 8001958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195a:	3301      	adds	r3, #1
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800195e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001960:	2b02      	cmp	r3, #2
 8001962:	ddee      	ble.n	8001942 <main+0x8a>
		  }


		  if ((cmd[0]=='S') &&(cmd[1]=='E') &&(cmd[2]=='T'))
 8001964:	7a3b      	ldrb	r3, [r7, #8]
 8001966:	2b53      	cmp	r3, #83	; 0x53
 8001968:	d164      	bne.n	8001a34 <main+0x17c>
 800196a:	7a7b      	ldrb	r3, [r7, #9]
 800196c:	2b45      	cmp	r3, #69	; 0x45
 800196e:	d161      	bne.n	8001a34 <main+0x17c>
 8001970:	7abb      	ldrb	r3, [r7, #10]
 8001972:	2b54      	cmp	r3, #84	; 0x54
 8001974:	d15e      	bne.n	8001a34 <main+0x17c>
		  {
			  uint8_t temp;
			  uint8_t dum=0;
 8001976:	2300      	movs	r3, #0
 8001978:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			  int len = (Ser_Queue.Rear-Ser_Queue.Front)+1;
 800197c:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <main+0x1b4>)
 800197e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001982:	461a      	mov	r2, r3
 8001984:	4b39      	ldr	r3, [pc, #228]	; (8001a6c <main+0x1b4>)
 8001986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	3301      	adds	r3, #1
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
			  while (!isQ_Empty(&Ser_Queue))
 8001990:	bf00      	nop
 8001992:	e038      	b.n	8001a06 <main+0x14e>
			  {
				  temp = deQueue(&Ser_Queue);
 8001994:	4835      	ldr	r0, [pc, #212]	; (8001a6c <main+0x1b4>)
 8001996:	f000 f9b5 	bl	8001d04 <deQueue>
 800199a:	4603      	mov	r3, r0
 800199c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

				  switch (temp) {
 80019a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019a4:	3b61      	subs	r3, #97	; 0x61
 80019a6:	2b12      	cmp	r3, #18
 80019a8:	d82d      	bhi.n	8001a06 <main+0x14e>
 80019aa:	a201      	add	r2, pc, #4	; (adr r2, 80019b0 <main+0xf8>)
 80019ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b0:	080019fd 	.word	0x080019fd
 80019b4:	08001a07 	.word	0x08001a07
 80019b8:	08001a05 	.word	0x08001a05
 80019bc:	08001a07 	.word	0x08001a07
 80019c0:	08001a07 	.word	0x08001a07
 80019c4:	08001a07 	.word	0x08001a07
 80019c8:	08001a07 	.word	0x08001a07
 80019cc:	08001a07 	.word	0x08001a07
 80019d0:	08001a07 	.word	0x08001a07
 80019d4:	08001a07 	.word	0x08001a07
 80019d8:	08001a07 	.word	0x08001a07
 80019dc:	08001a07 	.word	0x08001a07
 80019e0:	08001a07 	.word	0x08001a07
 80019e4:	08001a07 	.word	0x08001a07
 80019e8:	08001a07 	.word	0x08001a07
 80019ec:	08001a07 	.word	0x08001a07
 80019f0:	08001a07 	.word	0x08001a07
 80019f4:	08001a07 	.word	0x08001a07
 80019f8:	08001a07 	.word	0x08001a07
					case 'a':
						printf("setting a\r\n");
 80019fc:	481e      	ldr	r0, [pc, #120]	; (8001a78 <main+0x1c0>)
 80019fe:	f006 ff2b 	bl	8008858 <puts>
//							dum++;
//						}
//						dum=0;
//						motor_param.accel= (uint16_t)atoi(buf_val);
//						//memset(buf_val,0,4);
						break;
 8001a02:	e000      	b.n	8001a06 <main+0x14e>

						break;

					case 'c':

						break;
 8001a04:	bf00      	nop
			  while (!isQ_Empty(&Ser_Queue))
 8001a06:	4819      	ldr	r0, [pc, #100]	; (8001a6c <main+0x1b4>)
 8001a08:	f000 f92a 	bl	8001c60 <isQ_Empty>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0c0      	beq.n	8001994 <main+0xdc>

			  }


			  printf("accel : %d decel : %d speed  : %d steps : %d\r\n",
					  motor_param.accel,motor_param.decel,motor_param.speed,motor_param.steps);
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <main+0x1bc>)
 8001a14:	885b      	ldrh	r3, [r3, #2]
			  printf("accel : %d decel : %d speed  : %d steps : %d\r\n",
 8001a16:	4619      	mov	r1, r3
					  motor_param.accel,motor_param.decel,motor_param.speed,motor_param.steps);
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <main+0x1bc>)
 8001a1a:	889b      	ldrh	r3, [r3, #4]
			  printf("accel : %d decel : %d speed  : %d steps : %d\r\n",
 8001a1c:	461a      	mov	r2, r3
					  motor_param.accel,motor_param.decel,motor_param.speed,motor_param.steps);
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <main+0x1bc>)
 8001a20:	881b      	ldrh	r3, [r3, #0]
			  printf("accel : %d decel : %d speed  : %d steps : %d\r\n",
 8001a22:	4618      	mov	r0, r3
					  motor_param.accel,motor_param.decel,motor_param.speed,motor_param.steps);
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <main+0x1bc>)
 8001a26:	88db      	ldrh	r3, [r3, #6]
			  printf("accel : %d decel : %d speed  : %d steps : %d\r\n",
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4813      	ldr	r0, [pc, #76]	; (8001a7c <main+0x1c4>)
 8001a2e:	f006 fe8d 	bl	800874c <iprintf>
		  {
 8001a32:	e00b      	b.n	8001a4c <main+0x194>
//
//		  	 }
//		  HAL_UART_Transmit_IT(&huart5,buffer, len);

		  }
		  else if ((cmd[0]=='R') &&(cmd[1]=='U') &&(cmd[2]=='N'))
 8001a34:	7a3b      	ldrb	r3, [r7, #8]
 8001a36:	2b52      	cmp	r3, #82	; 0x52
 8001a38:	d108      	bne.n	8001a4c <main+0x194>
 8001a3a:	7a7b      	ldrb	r3, [r7, #9]
 8001a3c:	2b55      	cmp	r3, #85	; 0x55
 8001a3e:	d105      	bne.n	8001a4c <main+0x194>
 8001a40:	7abb      	ldrb	r3, [r7, #10]
 8001a42:	2b4e      	cmp	r3, #78	; 0x4e
 8001a44:	d102      	bne.n	8001a4c <main+0x194>
		  {
			  runMotor_f=1;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <main+0x1c8>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]




	  }
	  if (runMotor_f)
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <main+0x1c8>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f43f af6d 	beq.w	8001930 <main+0x78>
	  {
		  runStepper(&motor_data, &motor_param);
 8001a56:	4907      	ldr	r1, [pc, #28]	; (8001a74 <main+0x1bc>)
 8001a58:	480a      	ldr	r0, [pc, #40]	; (8001a84 <main+0x1cc>)
 8001a5a:	f000 fb2d 	bl	80020b8 <runStepper>
		  runMotor_f=0;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <main+0x1c8>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
	  if (buff_is_ready())
 8001a64:	e764      	b.n	8001930 <main+0x78>
 8001a66:	bf00      	nop
 8001a68:	2000048c 	.word	0x2000048c
 8001a6c:	20000254 	.word	0x20000254
 8001a70:	200000cc 	.word	0x200000cc
 8001a74:	2000009c 	.word	0x2000009c
 8001a78:	08009a68 	.word	0x08009a68
 8001a7c:	08009a74 	.word	0x08009a74
 8001a80:	200000c8 	.word	0x200000c8
 8001a84:	200000a4 	.word	0x200000a4

08001a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b0a0      	sub	sp, #128	; 0x80
 8001a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a92:	2230      	movs	r2, #48	; 0x30
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f006 fe50 	bl	800873c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	2230      	movs	r2, #48	; 0x30
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f006 fe41 	bl	800873c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <SystemClock_Config+0x100>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a31      	ldr	r2, [pc, #196]	; (8001b88 <SystemClock_Config+0x100>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <SystemClock_Config+0x100>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <SystemClock_Config+0x104>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ae2:	4a2a      	ldr	r2, [pc, #168]	; (8001b8c <SystemClock_Config+0x104>)
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <SystemClock_Config+0x104>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af6:	2301      	movs	r3, #1
 8001af8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001afa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001afe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b00:	2302      	movs	r3, #2
 8001b02:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b08:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001b0e:	2348      	movs	r3, #72	; 0x48
 8001b10:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b12:	2302      	movs	r3, #2
 8001b14:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b16:	2303      	movs	r3, #3
 8001b18:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 fe64 	bl	80057ec <HAL_RCC_OscConfig>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b2a:	f000 f873 	bl	8001c14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b2e:	230f      	movs	r3, #15
 8001b30:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b32:	2302      	movs	r3, #2
 8001b34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b36:	2300      	movs	r3, #0
 8001b38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b48:	2102      	movs	r1, #2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f004 f8c6 	bl	8005cdc <HAL_RCC_ClockConfig>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001b56:	f000 f85d 	bl	8001c14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b5a:	2308      	movs	r3, #8
 8001b5c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001b5e:	2332      	movs	r3, #50	; 0x32
 8001b60:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001b62:	2302      	movs	r3, #2
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001b66:	2300      	movs	r3, #0
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f004 fae2 	bl	8006138 <HAL_RCCEx_PeriphCLKConfig>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001b7a:	f000 f84b 	bl	8001c14 <Error_Handler>
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3780      	adds	r7, #128	; 0x80
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40007000 	.word	0x40007000

08001b90 <buff_is_ready>:

/* USER CODE BEGIN 4 */

uint8_t buff_is_ready(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
	if(Ser_Queue.Buffer[Ser_Queue.Rear]=='\n')
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <buff_is_ready+0x28>)
 8001b96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <buff_is_ready+0x28>)
 8001b9e:	4413      	add	r3, r2
 8001ba0:	791b      	ldrb	r3, [r3, #4]
 8001ba2:	2b0a      	cmp	r3, #10
 8001ba4:	d101      	bne.n	8001baa <buff_is_ready+0x1a>
	{
		return 1;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <buff_is_ready+0x1c>

	}
	return 0;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000254 	.word	0x20000254

08001bbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0e      	ldr	r2, [pc, #56]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bce:	f001 f823 	bl	8002c18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a0c      	ldr	r2, [pc, #48]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d10e      	bne.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0x3e>
  {

	  updateStepper(&motor_data);
 8001bdc:	480b      	ldr	r0, [pc, #44]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001bde:	f000 fb49 	bl	8002274 <updateStepper>
	  printf("step delay : %d set count :%d state : %d\r\n", motor_data.step_delay, motor_data.step_count, motor_data.state);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001be4:	885b      	ldrh	r3, [r3, #2]
 8001be6:	4619      	mov	r1, r3
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001bea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001bf2:	7c5b      	ldrb	r3, [r3, #17]
 8001bf4:	4806      	ldr	r0, [pc, #24]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001bf6:	f006 fda9 	bl	800874c <iprintf>

  }

  /* USER CODE END Callback 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40001000 	.word	0x40001000
 8001c08:	40001400 	.word	0x40001400
 8001c0c:	200000a4 	.word	0x200000a4
 8001c10:	08009aa4 	.word	0x08009aa4

08001c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c18:	b672      	cpsid	i
}
 8001c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <Error_Handler+0x8>

08001c1e <isQ_Full>:

#include "queue.h"


uint8_t isQ_Full(Queue *Q)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
	if ((Q->Front==Q->Rear+1)||(Q->Front==0&&Q->Rear==SIZE-1))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c34:	3301      	adds	r3, #1
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d009      	beq.n	8001c4e <isQ_Full+0x30>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d106      	bne.n	8001c52 <isQ_Full+0x34>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c4a:	2bff      	cmp	r3, #255	; 0xff
 8001c4c:	d101      	bne.n	8001c52 <isQ_Full+0x34>
	{
		return 1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <isQ_Full+0x36>
	}
	return 0;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <isQ_Empty>:

uint8_t isQ_Empty(Queue *Q)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	if (Q->Front==-1) return 1;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c72:	d101      	bne.n	8001c78 <isQ_Empty+0x18>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <isQ_Empty+0x1a>
	return 0;
 8001c78:	2300      	movs	r3, #0

}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <reset_Queue>:

void reset_Queue(Queue *Q)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
	Q->Front=-1;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c94:	801a      	strh	r2, [r3, #0]
	Q->Rear=-1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c9c:	805a      	strh	r2, [r3, #2]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <enQueue>:


void enQueue(Queue *Q,uint8_t element)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	70fb      	strb	r3, [r7, #3]
	if (!isQ_Full(Q))
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ffb1 	bl	8001c1e <isQ_Full>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d11c      	bne.n	8001cfc <enQueue+0x52>
	{
		if (Q->Front==-1){Q->Front=0;}
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ccc:	d102      	bne.n	8001cd4 <enQueue+0x2a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	801a      	strh	r2, [r3, #0]

		Q->Rear= (Q->Rear+1)%SIZE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	425a      	negs	r2, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	bf58      	it	pl
 8001ce4:	4253      	negpl	r3, r2
 8001ce6:	b21a      	sxth	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	805a      	strh	r2, [r3, #2]
		Q->Buffer[Q->Rear]= element;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	711a      	strb	r2, [r3, #4]


	}

}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <deQueue>:

uint8_t deQueue(Queue *Q)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	uint8_t element;

	if (!isQ_Empty(Q))
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ffa7 	bl	8001c60 <isQ_Empty>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d121      	bne.n	8001d5c <deQueue+0x58>
	{
		element =Q->Buffer[Q->Front];
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	791b      	ldrb	r3, [r3, #4]
 8001d26:	73fb      	strb	r3, [r7, #15]
		if (Q->Front==Q->Rear)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d103      	bne.n	8001d40 <deQueue+0x3c>
		{
			reset_Queue(Q);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ffa4 	bl	8001c86 <reset_Queue>
 8001d3e:	e00b      	b.n	8001d58 <deQueue+0x54>
		}
		else
		{
		Q->Front= (Q->Front+1)%SIZE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d46:	3301      	adds	r3, #1
 8001d48:	425a      	negs	r2, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	bf58      	it	pl
 8001d50:	4253      	negpl	r3, r2
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	801a      	strh	r2, [r3, #0]
		}

		return element;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	e000      	b.n	8001d5e <deQueue+0x5a>
	}
	else { return (-1);}
 8001d5c:	23ff      	movs	r3, #255	; 0xff
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001d70:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <RetargetInit+0x28>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <RetargetInit+0x2c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6898      	ldr	r0, [r3, #8]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2202      	movs	r2, #2
 8001d80:	2100      	movs	r1, #0
 8001d82:	f006 fd71 	bl	8008868 <setvbuf>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000358 	.word	0x20000358
 8001d94:	20000014 	.word	0x20000014

08001d98 <_isatty>:

int _isatty(int fd) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	db04      	blt.n	8001db0 <_isatty+0x18>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	dc01      	bgt.n	8001db0 <_isatty+0x18>
    return 1;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e005      	b.n	8001dbc <_isatty+0x24>

  errno = EBADF;
 8001db0:	f006 fc9a 	bl	80086e8 <__errno>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2209      	movs	r2, #9
 8001db8:	601a      	str	r2, [r3, #0]
  return 0;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <_write>:

int _write(int fd, char* ptr, int len) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d002      	beq.n	8001ddc <_write+0x18>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d111      	bne.n	8001e00 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <_write+0x54>)
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	f005 f91a 	bl	8007022 <HAL_UART_Transmit>
 8001dee:	4603      	mov	r3, r0
 8001df0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <_write+0x38>
      return len;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	e008      	b.n	8001e0e <_write+0x4a>
    else
      return EIO;
 8001dfc:	2305      	movs	r3, #5
 8001dfe:	e006      	b.n	8001e0e <_write+0x4a>
  }
  errno = EBADF;
 8001e00:	f006 fc72 	bl	80086e8 <__errno>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2209      	movs	r2, #9
 8001e08:	601a      	str	r2, [r3, #0]
  return -1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000358 	.word	0x20000358

08001e1c <_close>:

int _close(int fd) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	db04      	blt.n	8001e34 <_close+0x18>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	dc01      	bgt.n	8001e34 <_close+0x18>
    return 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e006      	b.n	8001e42 <_close+0x26>

  errno = EBADF;
 8001e34:	f006 fc58 	bl	80086e8 <__errno>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2209      	movs	r2, #9
 8001e3c:	601a      	str	r2, [r3, #0]
  return -1;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001e56:	f006 fc47 	bl	80086e8 <__errno>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2209      	movs	r2, #9
 8001e5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_read>:

int _read(int fd, char* ptr, int len) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d110      	bne.n	8001ea0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <_read+0x4c>)
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e86:	2201      	movs	r2, #1
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	f005 f95c 	bl	8007146 <HAL_UART_Receive>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <_read+0x30>
      return 1;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e008      	b.n	8001eae <_read+0x42>
    else
      return EIO;
 8001e9c:	2305      	movs	r3, #5
 8001e9e:	e006      	b.n	8001eae <_read+0x42>
  }
  errno = EBADF;
 8001ea0:	f006 fc22 	bl	80086e8 <__errno>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2209      	movs	r2, #9
 8001ea8:	601a      	str	r2, [r3, #0]
  return -1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000358 	.word	0x20000358

08001ebc <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db08      	blt.n	8001ede <_fstat+0x22>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	dc05      	bgt.n	8001ede <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ed8:	605a      	str	r2, [r3, #4]
    return 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e005      	b.n	8001eea <_fstat+0x2e>
  }

  errno = EBADF;
 8001ede:	f006 fc03 	bl	80086e8 <__errno>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2209      	movs	r2, #9
 8001ee6:	601a      	str	r2, [r3, #0]
  return 0;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001ef8:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <MX_SPI5_Init+0x64>)
 8001efa:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <MX_SPI5_Init+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <MX_SPI5_Init+0x64>)
 8001f00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f04:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <MX_SPI5_Init+0x64>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <MX_SPI5_Init+0x64>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_SPI5_Init+0x64>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_SPI5_Init+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <MX_SPI5_Init+0x64>)
 8001f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f24:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_SPI5_Init+0x64>)
 8001f28:	2218      	movs	r2, #24
 8001f2a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <MX_SPI5_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_SPI5_Init+0x64>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <MX_SPI5_Init+0x64>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_SPI5_Init+0x64>)
 8001f40:	220a      	movs	r2, #10
 8001f42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001f44:	4804      	ldr	r0, [pc, #16]	; (8001f58 <MX_SPI5_Init+0x64>)
 8001f46:	f004 fae9 	bl	800651c <HAL_SPI_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001f50:	f7ff fe60 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	2000035c 	.word	0x2000035c
 8001f5c:	40015000 	.word	0x40015000

08001f60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	; (8001fe4 <HAL_SPI_MspInit+0x84>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d12c      	bne.n	8001fdc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001f8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001fa8:	f043 0320 	orr.w	r3, r3, #32
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001fba:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001fcc:	2305      	movs	r3, #5
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <HAL_SPI_MspInit+0x8c>)
 8001fd8:	f001 f9de 	bl	8003398 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3728      	adds	r7, #40	; 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40015000 	.word	0x40015000
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40021400 	.word	0x40021400

08001ff0 <step_Counter>:




void step_Counter(speedRampData *data)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

	if (data->dir==CW)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	785b      	ldrb	r3, [r3, #1]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10f      	bne.n	8002020 <step_Counter+0x30>
	{
		data->step_pos++;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7c1b      	ldrb	r3, [r3, #16]
 8002004:	3301      	adds	r3, #1
 8002006:	b2da      	uxtb	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	741a      	strb	r2, [r3, #16]
		data->step_count++;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002012:	b29b      	uxth	r3, r3
 8002014:	3301      	adds	r3, #1
 8002016:	b29b      	uxth	r3, r3
 8002018:	b21a      	sxth	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	819a      	strh	r2, [r3, #12]
 800201e:	e012      	b.n	8002046 <step_Counter+0x56>
	}
	else if (data->dir==CCW)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	785b      	ldrb	r3, [r3, #1]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d10e      	bne.n	8002046 <step_Counter+0x56>
	{
		data->step_pos--;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	7c1b      	ldrb	r3, [r3, #16]
 800202c:	3b01      	subs	r3, #1
 800202e:	b2da      	uxtb	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	741a      	strb	r2, [r3, #16]
		data->step_count--;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29b      	uxth	r3, r3
 8002040:	b21a      	sxth	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	819a      	strh	r2, [r3, #12]
	}

	if (data->step_pos==8){
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7c1b      	ldrb	r3, [r3, #16]
 800204a:	2b08      	cmp	r3, #8
 800204c:	d102      	bne.n	8002054 <step_Counter+0x64>
		data->step_pos=0;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	741a      	strb	r2, [r3, #16]
	}

	mtr_Output(data->step_pos);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7c1b      	ldrb	r3, [r3, #16]
 8002058:	4618      	mov	r0, r3
 800205a:	f000 f805 	bl	8002068 <mtr_Output>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <mtr_Output>:

void mtr_Output(uint8_t pos)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
	uint16_t mask = SM_IN1_Pin|SM_IN2_Pin|SM_IN3_Pin|SM_IN4_Pin;
 8002072:	233c      	movs	r3, #60	; 0x3c
 8002074:	81fb      	strh	r3, [r7, #14]
	uint32_t temp = (MTR_OUT_TAB[pos]<<2) & mask;
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <mtr_Output+0x48>)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	009a      	lsls	r2, r3, #2
 800207e:	89fb      	ldrh	r3, [r7, #14]
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
	temp |= (((~MTR_OUT_TAB[pos])<<2) & mask)<<16;
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <mtr_Output+0x48>)
 8002088:	5cd3      	ldrb	r3, [r2, r3]
 800208a:	43db      	mvns	r3, r3
 800208c:	009a      	lsls	r2, r3, #2
 800208e:	89fb      	ldrh	r3, [r7, #14]
 8002090:	4013      	ands	r3, r2
 8002092:	041b      	lsls	r3, r3, #16
 8002094:	461a      	mov	r2, r3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	4313      	orrs	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
	MTR_PORT->BSRR=temp;
 800209c:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <mtr_Output+0x4c>)
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	6193      	str	r3, [r2, #24]


}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000000 	.word	0x20000000
 80020b4:	40021000 	.word	0x40021000

080020b8 <runStepper>:


void runStepper(speedRampData *data, SM_Param *param)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
	//! Number of steps before we hit max speed.
	  uint16_t max_s_lim;
	  //! Number of steps before we must start deceleration (if accel does not hit max speed).
	  uint16_t accel_lim;
	  uint16_t speed = param->speed;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	827b      	strh	r3, [r7, #18]
	  uint16_t accel = param->accel;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	885b      	ldrh	r3, [r3, #2]
 80020cc:	823b      	strh	r3, [r7, #16]
	  uint16_t decel = param->decel;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	889b      	ldrh	r3, [r3, #4]
 80020d2:	81fb      	strh	r3, [r7, #14]
	  uint16_t step = param->steps;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	88db      	ldrh	r3, [r3, #6]
 80020d8:	81bb      	strh	r3, [r7, #12]
	  if(step < 0){
	    data->dir=CCW;
		data->step_total = -step;
	  }
	  else{
		data->dir=CW;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	705a      	strb	r2, [r3, #1]
		data->step_total= step;
 80020e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	81da      	strh	r2, [r3, #14]
	  }

	  // If moving only 1 step.
	  if(step == 1){
 80020e8:	89bb      	ldrh	r3, [r7, #12]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d10b      	bne.n	8002106 <runStepper+0x4e>
	    // Move one step...
	    data->accel_count=-1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f4:	815a      	strh	r2, [r3, #10]
		// ...in DECEL state.
	    data->state=DECEL;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2202      	movs	r2, #2
 80020fa:	745a      	strb	r2, [r3, #17]
	    // Just a short delay so main() can act on 'running'.
	    data->step_delay=1000;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002102:	805a      	strh	r2, [r3, #2]
 8002104:	e098      	b.n	8002238 <runStepper+0x180>

	    // Run Timer/Counter 1 with prescaler = 8.

	  }
	  // Only move if number of steps to move is not zero.
	  else if(step != 0)
 8002106:	89bb      	ldrh	r3, [r7, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 8095 	beq.w	8002238 <runStepper+0x180>
	  {
	    // Refer to documentation for detailed information about these calculations.

	    // Set max speed limit, by calc min_delay to use in timer.
	    data->min_delay = A_T_x100 / speed;
 800210e:	8a7b      	ldrh	r3, [r7, #18]
 8002110:	4a53      	ldr	r2, [pc, #332]	; (8002260 <runStepper+0x1a8>)
 8002112:	fbb2 f3f3 	udiv	r3, r2, r3
 8002116:	b21a      	sxth	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	811a      	strh	r2, [r3, #8]

	    // Set accelration by calc the first (c0) step delay .
	     data->step_delay = (T0_FREQ_COR * sqrt(A_SQ / accel))/100;
 800211c:	8a3b      	ldrh	r3, [r7, #16]
 800211e:	4a51      	ldr	r2, [pc, #324]	; (8002264 <runStepper+0x1ac>)
 8002120:	fbb2 f3f3 	udiv	r3, r2, r3
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe f9f5 	bl	8000514 <__aeabi_ui2d>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	ec43 2b10 	vmov	d0, r2, r3
 8002132:	f007 fba5 	bl	8009880 <sqrt>
 8002136:	ec51 0b10 	vmov	r0, r1, d0
 800213a:	a347      	add	r3, pc, #284	; (adr r3, 8002258 <runStepper+0x1a0>)
 800213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002140:	f7fe fa62 	bl	8000608 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	4b45      	ldr	r3, [pc, #276]	; (8002268 <runStepper+0x1b0>)
 8002152:	f7fe fb83 	bl	800085c <__aeabi_ddiv>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4610      	mov	r0, r2
 800215c:	4619      	mov	r1, r3
 800215e:	f7fe fd03 	bl	8000b68 <__aeabi_d2uiz>
 8002162:	4603      	mov	r3, r0
 8002164:	b29a      	uxth	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	805a      	strh	r2, [r3, #2]

	    // Find out after how many steps does the speed hit the max speed limit.
	    max_s_lim = (long)speed*speed/(long)(((long)A_x20000*accel)/100);
 800216a:	8a7b      	ldrh	r3, [r7, #18]
 800216c:	8a7a      	ldrh	r2, [r7, #18]
 800216e:	fb02 f103 	mul.w	r1, r2, r3
 8002172:	8a3a      	ldrh	r2, [r7, #16]
 8002174:	4613      	mov	r3, r2
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4a3b      	ldr	r2, [pc, #236]	; (800226c <runStepper+0x1b4>)
 800217e:	fb82 0203 	smull	r0, r2, r2, r3
 8002182:	1152      	asrs	r2, r2, #5
 8002184:	17db      	asrs	r3, r3, #31
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	fb91 f3f3 	sdiv	r3, r1, r3
 800218c:	82fb      	strh	r3, [r7, #22]
	    // If we hit max speed limit before 0,5 step it will round to 0.
	    // But in practice we need to move atleast 1 step to get any speed at all.
	    if(max_s_lim == 0){
 800218e:	8afb      	ldrh	r3, [r7, #22]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <runStepper+0xe0>
	      max_s_lim = 1;
 8002194:	2301      	movs	r3, #1
 8002196:	82fb      	strh	r3, [r7, #22]
	    }

	    // Find out after how many steps we must start deceleration.
	    accel_lim = ((long)step*decel) / (accel+decel);
 8002198:	89bb      	ldrh	r3, [r7, #12]
 800219a:	89fa      	ldrh	r2, [r7, #14]
 800219c:	fb02 f203 	mul.w	r2, r2, r3
 80021a0:	8a39      	ldrh	r1, [r7, #16]
 80021a2:	89fb      	ldrh	r3, [r7, #14]
 80021a4:	440b      	add	r3, r1
 80021a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80021aa:	82bb      	strh	r3, [r7, #20]
	    // We must accelrate at least 1 step before we can start deceleration.
	    if(accel_lim == 0){
 80021ac:	8abb      	ldrh	r3, [r7, #20]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <runStepper+0xfe>
	      accel_lim = 1;
 80021b2:	2301      	movs	r3, #1
 80021b4:	82bb      	strh	r3, [r7, #20]
	    }

	    // Use the limit we hit first to calc decel.
	    if(accel_lim <= max_s_lim){
 80021b6:	8aba      	ldrh	r2, [r7, #20]
 80021b8:	8afb      	ldrh	r3, [r7, #22]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d807      	bhi.n	80021ce <runStepper+0x116>
	      data->decel_val = accel_lim - step;
 80021be:	8aba      	ldrh	r2, [r7, #20]
 80021c0:	89bb      	ldrh	r3, [r7, #12]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	b21a      	sxth	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	80da      	strh	r2, [r3, #6]
 80021cc:	e00a      	b.n	80021e4 <runStepper+0x12c>
	    }
	    else{
	      data->decel_val = -((long)max_s_lim*accel)/decel;
 80021ce:	8afb      	ldrh	r3, [r7, #22]
 80021d0:	8a3a      	ldrh	r2, [r7, #16]
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	425a      	negs	r2, r3
 80021d8:	89fb      	ldrh	r3, [r7, #14]
 80021da:	fb92 f3f3 	sdiv	r3, r2, r3
 80021de:	b21a      	sxth	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	80da      	strh	r2, [r3, #6]
	    }
	    // We must decelrate at least 1 step to stop.
	    if(data->decel_val == 0){
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d103      	bne.n	80021f6 <runStepper+0x13e>
	      data->decel_val = -1;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f4:	80da      	strh	r2, [r3, #6]
	    }

	    // Find step to start decleration.
	    data->decel_start = step + data->decel_val;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	89bb      	ldrh	r3, [r7, #12]
 8002200:	4413      	add	r3, r2
 8002202:	b29a      	uxth	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	809a      	strh	r2, [r3, #4]

	    // If the maximum speed is so low that we dont need to go via accelration state.
	    if(data->step_delay <= data->min_delay){
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	885b      	ldrh	r3, [r3, #2]
 800220c:	461a      	mov	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002214:	429a      	cmp	r2, r3
 8002216:	dc09      	bgt.n	800222c <runStepper+0x174>
	    	data->step_delay = data->min_delay;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800221e:	b29a      	uxth	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	805a      	strh	r2, [r3, #2]
	    	data->state = RUN;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2203      	movs	r2, #3
 8002228:	745a      	strb	r2, [r3, #17]
 800222a:	e002      	b.n	8002232 <runStepper+0x17a>
	    }
	    else{
	    	data->state = ACCEL;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	745a      	strb	r2, [r3, #17]
	    }

	    // Reset counter.
	    data->accel_count = 0;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	815a      	strh	r2, [r3, #10]


	  }

	  TIM_MTR.Instance->ARR= data->step_delay-1;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	885b      	ldrh	r3, [r3, #2]
 800223c:	1e5a      	subs	r2, r3, #1
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <runStepper+0x1b8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c
	  HAL_TIM_Base_Start_IT(&TIM_MTR);
 8002244:	480a      	ldr	r0, [pc, #40]	; (8002270 <runStepper+0x1b8>)
 8002246:	f004 fa41 	bl	80066cc <HAL_TIM_Base_Start_IT>


}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	f3af 8000 	nop.w
 8002258:	00000000 	.word	0x00000000
 800225c:	40ba6800 	.word	0x40ba6800
 8002260:	00025735 	.word	0x00025735
 8002264:	01d42225 	.word	0x01d42225
 8002268:	40590000 	.word	0x40590000
 800226c:	51eb851f 	.word	0x51eb851f
 8002270:	20000444 	.word	0x20000444

08002274 <updateStepper>:

void updateStepper(speedRampData *data)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]


		//printf("ok!\n");
	  //OCR1A = srd.step_delay;

		if (data->last_step_delay!=data->step_delay){
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	8a9a      	ldrh	r2, [r3, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	885b      	ldrh	r3, [r3, #2]
 8002284:	429a      	cmp	r2, r3
 8002286:	d009      	beq.n	800229c <updateStepper+0x28>
			TIM_MTR.Instance->ARR= data->step_delay-1;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	885b      	ldrh	r3, [r3, #2]
 800228c:	1e5a      	subs	r2, r3, #1
 800228e:	4b4e      	ldr	r3, [pc, #312]	; (80023c8 <updateStepper+0x154>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c
			data->last_step_delay=data->step_delay;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	885a      	ldrh	r2, [r3, #2]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	829a      	strh	r2, [r3, #20]
		}



	  switch(data->state) {
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	7c5b      	ldrb	r3, [r3, #17]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	f200 808d 	bhi.w	80023c0 <updateStepper+0x14c>
 80022a6:	a201      	add	r2, pc, #4	; (adr r2, 80022ac <updateStepper+0x38>)
 80022a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ac:	080022bd 	.word	0x080022bd
 80022b0:	080022f1 	.word	0x080022f1
 80022b4:	08002387 	.word	0x08002387
 80022b8:	08002357 	.word	0x08002357
	    case STOP:
	      data->step_count=0;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	819a      	strh	r2, [r3, #12]
	      data->rest = 0;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	82da      	strh	r2, [r3, #22]
	      data->step_delay =0;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	805a      	strh	r2, [r3, #2]

	      HAL_TIM_Base_Stop_IT(&TIM_MTR);
 80022ce:	483e      	ldr	r0, [pc, #248]	; (80023c8 <updateStepper+0x154>)
 80022d0:	f004 fa6c 	bl	80067ac <HAL_TIM_Base_Stop_IT>
	      printf("min delay : %d sec_start : %d dec_value : %d\r\n",
	    		  data->min_delay,data->decel_start,data->decel_val);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	      printf("min delay : %d sec_start : %d dec_value : %d\r\n",
 80022da:	4619      	mov	r1, r3
	    		  data->min_delay,data->decel_start,data->decel_val);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	889b      	ldrh	r3, [r3, #4]
	      printf("min delay : %d sec_start : %d dec_value : %d\r\n",
 80022e0:	461a      	mov	r2, r3
	    		  data->min_delay,data->decel_start,data->decel_val);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	      printf("min delay : %d sec_start : %d dec_value : %d\r\n",
 80022e8:	4838      	ldr	r0, [pc, #224]	; (80023cc <updateStepper+0x158>)
 80022ea:	f006 fa2f 	bl	800874c <iprintf>
	      break;
 80022ee:	e067      	b.n	80023c0 <updateStepper+0x14c>

	    case ACCEL:
	      step_Counter(data);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff fe7d 	bl	8001ff0 <step_Counter>
	      data->accel_count++;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	b29b      	uxth	r3, r3
 8002302:	b21a      	sxth	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	815a      	strh	r2, [r3, #10]

	      f_updateDelay(data);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f861 	bl	80023d0 <f_updateDelay>
	      // Chech if we should start decelration.
	      if(data->step_count >= data->decel_start) {
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002314:	461a      	mov	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	889b      	ldrh	r3, [r3, #4]
 800231a:	429a      	cmp	r2, r3
 800231c:	db08      	blt.n	8002330 <updateStepper+0xbc>
	    	  data->accel_count = data->decel_val;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	815a      	strh	r2, [r3, #10]
	        data->state = DECEL;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	745a      	strb	r2, [r3, #17]
	        data->last_accel_delay = data->step_delay;
	        //data->step_delay = data->step_delay;
	        data->rest = 0;
	        data->state = RUN;
	      }
	      break;
 800232e:	e042      	b.n	80023b6 <updateStepper+0x142>
	      else if(data->step_delay <= data->min_delay) {
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	885b      	ldrh	r3, [r3, #2]
 8002334:	461a      	mov	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800233c:	429a      	cmp	r2, r3
 800233e:	dc3a      	bgt.n	80023b6 <updateStepper+0x142>
	        data->last_accel_delay = data->step_delay;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	885a      	ldrh	r2, [r3, #2]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	825a      	strh	r2, [r3, #18]
	        data->rest = 0;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	82da      	strh	r2, [r3, #22]
	        data->state = RUN;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2203      	movs	r2, #3
 8002352:	745a      	strb	r2, [r3, #17]
	      break;
 8002354:	e02f      	b.n	80023b6 <updateStepper+0x142>

	    case RUN:
	      step_Counter(data);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff fe4a 	bl	8001ff0 <step_Counter>
	      //new_step_delay = srd.min_delay;
	      // Chech if we should start decelration.
	      if(data->step_count >= data->decel_start) {
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002362:	461a      	mov	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	889b      	ldrh	r3, [r3, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	db26      	blt.n	80023ba <updateStepper+0x146>
	        data->accel_count = data->decel_val;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	815a      	strh	r2, [r3, #10]
	        // Start decelration with same delay as accel ended with.
	        data->step_delay= data->last_accel_delay;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	8a5a      	ldrh	r2, [r3, #18]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	805a      	strh	r2, [r3, #2]
	        data->state = DECEL;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2202      	movs	r2, #2
 8002382:	745a      	strb	r2, [r3, #17]
	      }
	      break;
 8002384:	e019      	b.n	80023ba <updateStepper+0x146>

	    case DECEL:
	      step_Counter(data);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff fe32 	bl	8001ff0 <step_Counter>
	      data->accel_count++;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002392:	b29b      	uxth	r3, r3
 8002394:	3301      	adds	r3, #1
 8002396:	b29b      	uxth	r3, r3
 8002398:	b21a      	sxth	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	815a      	strh	r2, [r3, #10]
	      f_updateDelay(data);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f816 	bl	80023d0 <f_updateDelay>
	      // Check if we at last step
	      if(data->accel_count >= 0){
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db07      	blt.n	80023be <updateStepper+0x14a>
	        data->state = STOP;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	745a      	strb	r2, [r3, #17]
	      }
	      break;
 80023b4:	e003      	b.n	80023be <updateStepper+0x14a>
	      break;
 80023b6:	bf00      	nop
 80023b8:	e002      	b.n	80023c0 <updateStepper+0x14c>
	      break;
 80023ba:	bf00      	nop
 80023bc:	e000      	b.n	80023c0 <updateStepper+0x14c>
	      break;
 80023be:	bf00      	nop
	  }


}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000444 	.word	0x20000444
 80023cc:	08009ad0 	.word	0x08009ad0

080023d0 <f_updateDelay>:


void f_updateDelay(speedRampData *data)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	uint16_t new_step_delay;
	uint16_t new_rest;

	new_step_delay = (((2 * (long)data->step_delay) + data->rest)/(4 * data->accel_count + 1));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	885b      	ldrh	r3, [r3, #2]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	8ad2      	ldrh	r2, [r2, #22]
 80023e2:	441a      	add	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	3301      	adds	r3, #1
 80023ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80023f2:	81fb      	strh	r3, [r7, #14]
	new_step_delay = data->step_delay- new_step_delay;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	885a      	ldrh	r2, [r3, #2]
 80023f8:	89fb      	ldrh	r3, [r7, #14]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	81fb      	strh	r3, [r7, #14]
	new_rest = ((2 * (long)data->step_delay)+data->rest)%(4 * data->accel_count + 1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	885b      	ldrh	r3, [r3, #2]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	8ad2      	ldrh	r2, [r2, #22]
 8002408:	4413      	add	r3, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002410:	0092      	lsls	r2, r2, #2
 8002412:	3201      	adds	r2, #1
 8002414:	fb93 f1f2 	sdiv	r1, r3, r2
 8002418:	fb02 f201 	mul.w	r2, r2, r1
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	81bb      	strh	r3, [r7, #12]

	data->step_delay= new_step_delay;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	89fa      	ldrh	r2, [r7, #14]
 8002424:	805a      	strh	r2, [r3, #2]
	data->rest = new_rest;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	89ba      	ldrh	r2, [r7, #12]
 800242a:	82da      	strh	r2, [r3, #22]

}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <HAL_MspInit+0x4c>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	4a0f      	ldr	r2, [pc, #60]	; (8002484 <HAL_MspInit+0x4c>)
 8002448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244c:	6453      	str	r3, [r2, #68]	; 0x44
 800244e:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <HAL_MspInit+0x4c>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_MspInit+0x4c>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	4a08      	ldr	r2, [pc, #32]	; (8002484 <HAL_MspInit+0x4c>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002468:	6413      	str	r3, [r2, #64]	; 0x40
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_MspInit+0x4c>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800

08002488 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08c      	sub	sp, #48	; 0x30
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002498:	2200      	movs	r2, #0
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	2036      	movs	r0, #54	; 0x36
 800249e:	f000 fcb7 	bl	8002e10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024a2:	2036      	movs	r0, #54	; 0x36
 80024a4:	f000 fcd0 	bl	8002e48 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <HAL_InitTick+0xa4>)
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	4a1e      	ldr	r2, [pc, #120]	; (800252c <HAL_InitTick+0xa4>)
 80024b2:	f043 0310 	orr.w	r3, r3, #16
 80024b6:	6413      	str	r3, [r2, #64]	; 0x40
 80024b8:	4b1c      	ldr	r3, [pc, #112]	; (800252c <HAL_InitTick+0xa4>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024c4:	f107 0210 	add.w	r2, r7, #16
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 fe00 	bl	80060d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80024d4:	f003 fdd6 	bl	8006084 <HAL_RCC_GetPCLK1Freq>
 80024d8:	4603      	mov	r3, r0
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e0:	4a13      	ldr	r2, [pc, #76]	; (8002530 <HAL_InitTick+0xa8>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	0c9b      	lsrs	r3, r3, #18
 80024e8:	3b01      	subs	r3, #1
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_InitTick+0xac>)
 80024ee:	4a12      	ldr	r2, [pc, #72]	; (8002538 <HAL_InitTick+0xb0>)
 80024f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_InitTick+0xac>)
 80024f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024f8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024fa:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <HAL_InitTick+0xac>)
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <HAL_InitTick+0xac>)
 8002502:	2200      	movs	r2, #0
 8002504:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_InitTick+0xac>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800250c:	4809      	ldr	r0, [pc, #36]	; (8002534 <HAL_InitTick+0xac>)
 800250e:	f004 f88e 	bl	800662e <HAL_TIM_Base_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d104      	bne.n	8002522 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002518:	4806      	ldr	r0, [pc, #24]	; (8002534 <HAL_InitTick+0xac>)
 800251a:	f004 f8d7 	bl	80066cc <HAL_TIM_Base_Start_IT>
 800251e:	4603      	mov	r3, r0
 8002520:	e000      	b.n	8002524 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
}
 8002524:	4618      	mov	r0, r3
 8002526:	3730      	adds	r7, #48	; 0x30
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40023800 	.word	0x40023800
 8002530:	431bde83 	.word	0x431bde83
 8002534:	200003b4 	.word	0x200003b4
 8002538:	40001000 	.word	0x40001000

0800253c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <NMI_Handler+0x4>

08002542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002546:	e7fe      	b.n	8002546 <HardFault_Handler+0x4>

08002548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800254c:	e7fe      	b.n	800254c <MemManage_Handler+0x4>

0800254e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <BusFault_Handler+0x4>

08002554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <UsageFault_Handler+0x4>

0800255a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002596:	2001      	movs	r0, #1
 8002598:	f001 f8de 	bl	8003758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}

080025a0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <UART5_IRQHandler+0x10>)
 80025a6:	f004 fea1 	bl	80072ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	2000048c 	.word	0x2000048c

080025b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <TIM6_DAC_IRQHandler+0x10>)
 80025ba:	f004 f926 	bl	800680a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200003b4 	.word	0x200003b4

080025c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */



  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <TIM7_IRQHandler+0x10>)
 80025ce:	f004 f91c 	bl	800680a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000444 	.word	0x20000444

080025dc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <OTG_HS_IRQHandler+0x10>)
 80025e2:	f001 f933 	bl	800384c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000514 	.word	0x20000514

080025f0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <LTDC_IRQHandler+0x10>)
 80025f6:	f002 fe61 	bl	80052bc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200001ac 	.word	0x200001ac

08002604 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <DMA2D_IRQHandler+0x10>)
 800260a:	f000 fd22 	bl	8003052 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200000e4 	.word	0x200000e4

08002618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002620:	4a14      	ldr	r2, [pc, #80]	; (8002674 <_sbrk+0x5c>)
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <_sbrk+0x60>)
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <_sbrk+0x64>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d102      	bne.n	800263a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <_sbrk+0x64>)
 8002636:	4a12      	ldr	r2, [pc, #72]	; (8002680 <_sbrk+0x68>)
 8002638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <_sbrk+0x64>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	429a      	cmp	r2, r3
 8002646:	d207      	bcs.n	8002658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002648:	f006 f84e 	bl	80086e8 <__errno>
 800264c:	4603      	mov	r3, r0
 800264e:	220c      	movs	r2, #12
 8002650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002656:	e009      	b.n	800266c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <_sbrk+0x64>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <_sbrk+0x64>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	4a05      	ldr	r2, [pc, #20]	; (800267c <_sbrk+0x64>)
 8002668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800266a:	68fb      	ldr	r3, [r7, #12]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20030000 	.word	0x20030000
 8002678:	00000400 	.word	0x00000400
 800267c:	200000bc 	.word	0x200000bc
 8002680:	20000830 	.word	0x20000830

08002684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <SystemInit+0x20>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <SystemInit+0x20>)
 8002690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ae:	f107 0308 	add.w	r3, r7, #8
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026bc:	463b      	mov	r3, r7
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026c4:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <MX_TIM1_Init+0x98>)
 80026c6:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <MX_TIM1_Init+0x9c>)
 80026c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026ca:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <MX_TIM1_Init+0x98>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <MX_TIM1_Init+0x98>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <MX_TIM1_Init+0x98>)
 80026d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <MX_TIM1_Init+0x98>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <MX_TIM1_Init+0x98>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <MX_TIM1_Init+0x98>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026f0:	4813      	ldr	r0, [pc, #76]	; (8002740 <MX_TIM1_Init+0x98>)
 80026f2:	f003 ff9c 	bl	800662e <HAL_TIM_Base_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80026fc:	f7ff fa8a 	bl	8001c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002704:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002706:	f107 0308 	add.w	r3, r7, #8
 800270a:	4619      	mov	r1, r3
 800270c:	480c      	ldr	r0, [pc, #48]	; (8002740 <MX_TIM1_Init+0x98>)
 800270e:	f004 f984 	bl	8006a1a <HAL_TIM_ConfigClockSource>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002718:	f7ff fa7c 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271c:	2300      	movs	r3, #0
 800271e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002724:	463b      	mov	r3, r7
 8002726:	4619      	mov	r1, r3
 8002728:	4805      	ldr	r0, [pc, #20]	; (8002740 <MX_TIM1_Init+0x98>)
 800272a:	f004 fb9d 	bl	8006e68 <HAL_TIMEx_MasterConfigSynchronization>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002734:	f7ff fa6e 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002738:	bf00      	nop
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	200003fc 	.word	0x200003fc
 8002744:	40010000 	.word	0x40010000

08002748 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800274e:	463b      	mov	r3, r7
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <MX_TIM7_Init+0x60>)
 8002758:	4a14      	ldr	r2, [pc, #80]	; (80027ac <MX_TIM7_Init+0x64>)
 800275a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <MX_TIM7_Init+0x60>)
 800275e:	2247      	movs	r2, #71	; 0x47
 8002760:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <MX_TIM7_Init+0x60>)
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <MX_TIM7_Init+0x60>)
 800276a:	2200      	movs	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <MX_TIM7_Init+0x60>)
 8002770:	2200      	movs	r2, #0
 8002772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002774:	480c      	ldr	r0, [pc, #48]	; (80027a8 <MX_TIM7_Init+0x60>)
 8002776:	f003 ff5a 	bl	800662e <HAL_TIM_Base_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002780:	f7ff fa48 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002784:	2300      	movs	r3, #0
 8002786:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002788:	2300      	movs	r3, #0
 800278a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800278c:	463b      	mov	r3, r7
 800278e:	4619      	mov	r1, r3
 8002790:	4805      	ldr	r0, [pc, #20]	; (80027a8 <MX_TIM7_Init+0x60>)
 8002792:	f004 fb69 	bl	8006e68 <HAL_TIMEx_MasterConfigSynchronization>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 800279c:	f7ff fa3a 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000444 	.word	0x20000444
 80027ac:	40001400 	.word	0x40001400

080027b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a18      	ldr	r2, [pc, #96]	; (8002820 <HAL_TIM_Base_MspInit+0x70>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d10e      	bne.n	80027e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b17      	ldr	r3, [pc, #92]	; (8002824 <HAL_TIM_Base_MspInit+0x74>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	4a16      	ldr	r2, [pc, #88]	; (8002824 <HAL_TIM_Base_MspInit+0x74>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6453      	str	r3, [r2, #68]	; 0x44
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <HAL_TIM_Base_MspInit+0x74>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80027de:	e01a      	b.n	8002816 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a10      	ldr	r2, [pc, #64]	; (8002828 <HAL_TIM_Base_MspInit+0x78>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d115      	bne.n	8002816 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <HAL_TIM_Base_MspInit+0x74>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <HAL_TIM_Base_MspInit+0x74>)
 80027f4:	f043 0320 	orr.w	r3, r3, #32
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_TIM_Base_MspInit+0x74>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2100      	movs	r1, #0
 800280a:	2037      	movs	r0, #55	; 0x37
 800280c:	f000 fb00 	bl	8002e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002810:	2037      	movs	r0, #55	; 0x37
 8002812:	f000 fb19 	bl	8002e48 <HAL_NVIC_EnableIRQ>
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40010000 	.word	0x40010000
 8002824:	40023800 	.word	0x40023800
 8002828:	40001400 	.word	0x40001400

0800282c <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <MX_UART5_Init+0x4c>)
 8002832:	4a12      	ldr	r2, [pc, #72]	; (800287c <MX_UART5_Init+0x50>)
 8002834:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <MX_UART5_Init+0x4c>)
 8002838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800283c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800283e:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <MX_UART5_Init+0x4c>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <MX_UART5_Init+0x4c>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <MX_UART5_Init+0x4c>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <MX_UART5_Init+0x4c>)
 8002852:	220c      	movs	r2, #12
 8002854:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <MX_UART5_Init+0x4c>)
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <MX_UART5_Init+0x4c>)
 800285e:	2200      	movs	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002862:	4805      	ldr	r0, [pc, #20]	; (8002878 <MX_UART5_Init+0x4c>)
 8002864:	f004 fb90 	bl	8006f88 <HAL_UART_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800286e:	f7ff f9d1 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	2000048c 	.word	0x2000048c
 800287c:	40005000 	.word	0x40005000

08002880 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 8002886:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <MX_USART1_UART_Init+0x50>)
 8002888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 800288c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 80028a6:	220c      	movs	r2, #12
 80028a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028b6:	4805      	ldr	r0, [pc, #20]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 80028b8:	f004 fb66 	bl	8006f88 <HAL_UART_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028c2:	f7ff f9a7 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	200004d0 	.word	0x200004d0
 80028d0:	40011000 	.word	0x40011000

080028d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08c      	sub	sp, #48	; 0x30
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 031c 	add.w	r3, r7, #28
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a46      	ldr	r2, [pc, #280]	; (8002a0c <HAL_UART_MspInit+0x138>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d153      	bne.n	800299e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	4b45      	ldr	r3, [pc, #276]	; (8002a10 <HAL_UART_MspInit+0x13c>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4a44      	ldr	r2, [pc, #272]	; (8002a10 <HAL_UART_MspInit+0x13c>)
 8002900:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002904:	6413      	str	r3, [r2, #64]	; 0x40
 8002906:	4b42      	ldr	r3, [pc, #264]	; (8002a10 <HAL_UART_MspInit+0x13c>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	4b3e      	ldr	r3, [pc, #248]	; (8002a10 <HAL_UART_MspInit+0x13c>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a3d      	ldr	r2, [pc, #244]	; (8002a10 <HAL_UART_MspInit+0x13c>)
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <HAL_UART_MspInit+0x13c>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	4b37      	ldr	r3, [pc, #220]	; (8002a10 <HAL_UART_MspInit+0x13c>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a36      	ldr	r2, [pc, #216]	; (8002a10 <HAL_UART_MspInit+0x13c>)
 8002938:	f043 0308 	orr.w	r3, r3, #8
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b34      	ldr	r3, [pc, #208]	; (8002a10 <HAL_UART_MspInit+0x13c>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800294a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800294e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002954:	2301      	movs	r3, #1
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002958:	2303      	movs	r3, #3
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800295c:	2308      	movs	r3, #8
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	4619      	mov	r1, r3
 8002966:	482b      	ldr	r0, [pc, #172]	; (8002a14 <HAL_UART_MspInit+0x140>)
 8002968:	f000 fd16 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800296c:	2304      	movs	r3, #4
 800296e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002974:	2301      	movs	r3, #1
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002978:	2303      	movs	r3, #3
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800297c:	2308      	movs	r3, #8
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002980:	f107 031c 	add.w	r3, r7, #28
 8002984:	4619      	mov	r1, r3
 8002986:	4824      	ldr	r0, [pc, #144]	; (8002a18 <HAL_UART_MspInit+0x144>)
 8002988:	f000 fd06 	bl	8003398 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800298c:	2200      	movs	r2, #0
 800298e:	2100      	movs	r1, #0
 8002990:	2035      	movs	r0, #53	; 0x35
 8002992:	f000 fa3d 	bl	8002e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002996:	2035      	movs	r0, #53	; 0x35
 8002998:	f000 fa56 	bl	8002e48 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800299c:	e031      	b.n	8002a02 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1e      	ldr	r2, [pc, #120]	; (8002a1c <HAL_UART_MspInit+0x148>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d12c      	bne.n	8002a02 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <HAL_UART_MspInit+0x13c>)
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	4a17      	ldr	r2, [pc, #92]	; (8002a10 <HAL_UART_MspInit+0x13c>)
 80029b2:	f043 0310 	orr.w	r3, r3, #16
 80029b6:	6453      	str	r3, [r2, #68]	; 0x44
 80029b8:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <HAL_UART_MspInit+0x13c>)
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <HAL_UART_MspInit+0x13c>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <HAL_UART_MspInit+0x13c>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	6313      	str	r3, [r2, #48]	; 0x30
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <HAL_UART_MspInit+0x13c>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80029e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80029e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ee:	2303      	movs	r3, #3
 80029f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029f2:	2307      	movs	r3, #7
 80029f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f6:	f107 031c 	add.w	r3, r7, #28
 80029fa:	4619      	mov	r1, r3
 80029fc:	4808      	ldr	r0, [pc, #32]	; (8002a20 <HAL_UART_MspInit+0x14c>)
 80029fe:	f000 fccb 	bl	8003398 <HAL_GPIO_Init>
}
 8002a02:	bf00      	nop
 8002a04:	3730      	adds	r7, #48	; 0x30
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40005000 	.word	0x40005000
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40020800 	.word	0x40020800
 8002a18:	40020c00 	.word	0x40020c00
 8002a1c:	40011000 	.word	0x40011000
 8002a20:	40020000 	.word	0x40020000

08002a24 <HAL_UART_TxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);

	enQueue(&Ser_Queue, rec_buff[0]);
 8002a40:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <HAL_UART_RxCpltCallback+0x28>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	4619      	mov	r1, r3
 8002a46:	4807      	ldr	r0, [pc, #28]	; (8002a64 <HAL_UART_RxCpltCallback+0x2c>)
 8002a48:	f7ff f92f 	bl	8001caa <enQueue>
	HAL_UART_Receive_IT(&huart5, rec_buff, 1);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	4904      	ldr	r1, [pc, #16]	; (8002a60 <HAL_UART_RxCpltCallback+0x28>)
 8002a50:	4805      	ldr	r0, [pc, #20]	; (8002a68 <HAL_UART_RxCpltCallback+0x30>)
 8002a52:	f004 fc1a 	bl	800728a <HAL_UART_Receive_IT>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	200000cc 	.word	0x200000cc
 8002a64:	20000254 	.word	0x20000254
 8002a68:	2000048c 	.word	0x2000048c

08002a6c <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8002a70:	4b12      	ldr	r3, [pc, #72]	; (8002abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002a72:	4a13      	ldr	r2, [pc, #76]	; (8002ac0 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8002a74:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8002a76:	4b11      	ldr	r3, [pc, #68]	; (8002abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002a78:	220c      	movs	r2, #12
 8002a7a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8002aa6:	4805      	ldr	r0, [pc, #20]	; (8002abc <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002aa8:	f000 fe6e 	bl	8003788 <HAL_HCD_Init>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8002ab2:	f7ff f8af 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000514 	.word	0x20000514
 8002ac0:	40040000 	.word	0x40040000

08002ac4 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a24      	ldr	r2, [pc, #144]	; (8002b74 <HAL_HCD_MspInit+0xb0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d141      	bne.n	8002b6a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <HAL_HCD_MspInit+0xb4>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a22      	ldr	r2, [pc, #136]	; (8002b78 <HAL_HCD_MspInit+0xb4>)
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <HAL_HCD_MspInit+0xb4>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002b02:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8002b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002b14:	230c      	movs	r3, #12
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4817      	ldr	r0, [pc, #92]	; (8002b7c <HAL_HCD_MspInit+0xb8>)
 8002b20:	f000 fc3a 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002b24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	4810      	ldr	r0, [pc, #64]	; (8002b7c <HAL_HCD_MspInit+0xb8>)
 8002b3a:	f000 fc2d 	bl	8003398 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <HAL_HCD_MspInit+0xb4>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	4a0c      	ldr	r2, [pc, #48]	; (8002b78 <HAL_HCD_MspInit+0xb4>)
 8002b48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <HAL_HCD_MspInit+0xb4>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	204d      	movs	r0, #77	; 0x4d
 8002b60:	f000 f956 	bl	8002e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8002b64:	204d      	movs	r0, #77	; 0x4d
 8002b66:	f000 f96f 	bl	8002e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	3728      	adds	r7, #40	; 0x28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40040000 	.word	0x40040000
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40020400 	.word	0x40020400

08002b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bb8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b84:	480d      	ldr	r0, [pc, #52]	; (8002bbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b86:	490e      	ldr	r1, [pc, #56]	; (8002bc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b88:	4a0e      	ldr	r2, [pc, #56]	; (8002bc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b8c:	e002      	b.n	8002b94 <LoopCopyDataInit>

08002b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b92:	3304      	adds	r3, #4

08002b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b98:	d3f9      	bcc.n	8002b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b9c:	4c0b      	ldr	r4, [pc, #44]	; (8002bcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba0:	e001      	b.n	8002ba6 <LoopFillZerobss>

08002ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba4:	3204      	adds	r2, #4

08002ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba8:	d3fb      	bcc.n	8002ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002baa:	f7ff fd6b 	bl	8002684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bae:	f005 fda1 	bl	80086f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bb2:	f7fe fe81 	bl	80018b8 <main>
  bx  lr    
 8002bb6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002bb8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002bc4:	08009bc0 	.word	0x08009bc0
  ldr r2, =_sbss
 8002bc8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002bcc:	2000082c 	.word	0x2000082c

08002bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd0:	e7fe      	b.n	8002bd0 <ADC_IRQHandler>
	...

08002bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bd8:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_Init+0x40>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <HAL_Init+0x40>)
 8002bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_Init+0x40>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <HAL_Init+0x40>)
 8002bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <HAL_Init+0x40>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <HAL_Init+0x40>)
 8002bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bfc:	2003      	movs	r0, #3
 8002bfe:	f000 f8fc 	bl	8002dfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c02:	2000      	movs	r0, #0
 8002c04:	f7ff fc40 	bl	8002488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c08:	f7ff fc16 	bl	8002438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40023c00 	.word	0x40023c00

08002c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_IncTick+0x20>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_IncTick+0x24>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4413      	add	r3, r2
 8002c28:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <HAL_IncTick+0x24>)
 8002c2a:	6013      	str	r3, [r2, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	20000010 	.word	0x20000010
 8002c3c:	20000818 	.word	0x20000818

08002c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return uwTick;
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <HAL_GetTick+0x14>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000818 	.word	0x20000818

08002c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c60:	f7ff ffee 	bl	8002c40 <HAL_GetTick>
 8002c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c70:	d005      	beq.n	8002c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_Delay+0x44>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c7e:	bf00      	nop
 8002c80:	f7ff ffde 	bl	8002c40 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d8f7      	bhi.n	8002c80 <HAL_Delay+0x28>
  {
  }
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000010 	.word	0x20000010

08002ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cd2:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	60d3      	str	r3, [r2, #12]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <__NVIC_GetPriorityGrouping+0x18>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	0a1b      	lsrs	r3, r3, #8
 8002cf2:	f003 0307 	and.w	r3, r3, #7
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	db0b      	blt.n	8002d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	f003 021f 	and.w	r2, r3, #31
 8002d1c:	4907      	ldr	r1, [pc, #28]	; (8002d3c <__NVIC_EnableIRQ+0x38>)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	2001      	movs	r0, #1
 8002d26:	fa00 f202 	lsl.w	r2, r0, r2
 8002d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000e100 	.word	0xe000e100

08002d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	6039      	str	r1, [r7, #0]
 8002d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	db0a      	blt.n	8002d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	490c      	ldr	r1, [pc, #48]	; (8002d8c <__NVIC_SetPriority+0x4c>)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	0112      	lsls	r2, r2, #4
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	440b      	add	r3, r1
 8002d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d68:	e00a      	b.n	8002d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4908      	ldr	r1, [pc, #32]	; (8002d90 <__NVIC_SetPriority+0x50>)
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	3b04      	subs	r3, #4
 8002d78:	0112      	lsls	r2, r2, #4
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	761a      	strb	r2, [r3, #24]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000e100 	.word	0xe000e100
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	; 0x24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f1c3 0307 	rsb	r3, r3, #7
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	bf28      	it	cs
 8002db2:	2304      	movcs	r3, #4
 8002db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2b06      	cmp	r3, #6
 8002dbc:	d902      	bls.n	8002dc4 <NVIC_EncodePriority+0x30>
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3b03      	subs	r3, #3
 8002dc2:	e000      	b.n	8002dc6 <NVIC_EncodePriority+0x32>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ddc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	43d9      	mvns	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	4313      	orrs	r3, r2
         );
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3724      	adds	r7, #36	; 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ff4c 	bl	8002ca0 <__NVIC_SetPriorityGrouping>
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e22:	f7ff ff61 	bl	8002ce8 <__NVIC_GetPriorityGrouping>
 8002e26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	6978      	ldr	r0, [r7, #20]
 8002e2e:	f7ff ffb1 	bl	8002d94 <NVIC_EncodePriority>
 8002e32:	4602      	mov	r2, r0
 8002e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff80 	bl	8002d40 <__NVIC_SetPriority>
}
 8002e40:	bf00      	nop
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff54 	bl	8002d04 <__NVIC_EnableIRQ>
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00e      	b.n	8002e94 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	795b      	ldrb	r3, [r3, #5]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe f81e 	bl	8000ec8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002eaa:	f7ff fec9 	bl	8002c40 <HAL_GetTick>
 8002eae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d008      	beq.n	8002ece <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2280      	movs	r2, #128	; 0x80
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e052      	b.n	8002f74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0216 	bic.w	r2, r2, #22
 8002edc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d103      	bne.n	8002efe <HAL_DMA_Abort+0x62>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0208 	bic.w	r2, r2, #8
 8002f0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f1e:	e013      	b.n	8002f48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f20:	f7ff fe8e 	bl	8002c40 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b05      	cmp	r3, #5
 8002f2c:	d90c      	bls.n	8002f48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2203      	movs	r2, #3
 8002f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e015      	b.n	8002f74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e4      	bne.n	8002f20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5a:	223f      	movs	r2, #63	; 0x3f
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d004      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2280      	movs	r2, #128	; 0x80
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00c      	b.n	8002fb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2205      	movs	r2, #5
 8002f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0201 	bic.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e03b      	b.n	800304a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fd ffc2 	bl	8000f70 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003010:	f023 0107 	bic.w	r1, r3, #7
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800302a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68d1      	ldr	r1, [r2, #12]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6812      	ldr	r2, [r2, #0]
 8003036:	430b      	orrs	r3, r1
 8003038:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d026      	beq.n	80030c2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307a:	2b00      	cmp	r3, #0
 800307c:	d021      	beq.n	80030c2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800308c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	f043 0201 	orr.w	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2201      	movs	r2, #1
 80030a0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2204      	movs	r2, #4
 80030a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d026      	beq.n	800311a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d021      	beq.n	800311a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030e4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2220      	movs	r2, #32
 80030ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f2:	f043 0202 	orr.w	r2, r3, #2
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2204      	movs	r2, #4
 80030fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d026      	beq.n	8003172 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800312a:	2b00      	cmp	r3, #0
 800312c:	d021      	beq.n	8003172 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800313c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2208      	movs	r2, #8
 8003144:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	f043 0204 	orr.w	r2, r3, #4
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2204      	movs	r2, #4
 8003156:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d013      	beq.n	80031a4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00e      	beq.n	80031a4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003194:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2204      	movs	r2, #4
 800319c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f853 	bl	800324a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d024      	beq.n	80031f8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01f      	beq.n	80031f8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031c6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2202      	movs	r2, #2
 80031ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d01f      	beq.n	8003242 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d01a      	beq.n	8003242 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800321a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2210      	movs	r2, #16
 8003222:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f80e 	bl	800325e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_DMA2D_ConfigLayer+0x20>
 8003290:	2302      	movs	r3, #2
 8003292:	e079      	b.n	8003388 <HAL_DMA2D_ConfigLayer+0x114>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	3318      	adds	r3, #24
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	041b      	lsls	r3, r3, #16
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80032be:	4b35      	ldr	r3, [pc, #212]	; (8003394 <HAL_DMA2D_ConfigLayer+0x120>)
 80032c0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b0a      	cmp	r3, #10
 80032c8:	d003      	beq.n	80032d2 <HAL_DMA2D_ConfigLayer+0x5e>
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b09      	cmp	r3, #9
 80032d0:	d107      	bne.n	80032e2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	e005      	b.n	80032ee <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	061b      	lsls	r3, r3, #24
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d120      	bne.n	8003336 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	ea02 0103 	and.w	r1, r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	430a      	orrs	r2, r1
 800330a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b0a      	cmp	r3, #10
 800331c:	d003      	beq.n	8003326 <HAL_DMA2D_ConfigLayer+0xb2>
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b09      	cmp	r3, #9
 8003324:	d127      	bne.n	8003376 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003332:	629a      	str	r2, [r3, #40]	; 0x28
 8003334:	e01f      	b.n	8003376 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	43db      	mvns	r3, r3
 8003340:	ea02 0103 	and.w	r1, r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	430a      	orrs	r2, r1
 800334c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b0a      	cmp	r3, #10
 800335e:	d003      	beq.n	8003368 <HAL_DMA2D_ConfigLayer+0xf4>
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b09      	cmp	r3, #9
 8003366:	d106      	bne.n	8003376 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003374:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	ff03000f 	.word	0xff03000f

08003398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	; 0x24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	e177      	b.n	80036a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033b4:	2201      	movs	r2, #1
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	f040 8166 	bne.w	800369e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d005      	beq.n	80033ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d130      	bne.n	800344c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	2203      	movs	r2, #3
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003420:	2201      	movs	r2, #1
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 0201 	and.w	r2, r3, #1
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	2b03      	cmp	r3, #3
 8003456:	d017      	beq.n	8003488 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2203      	movs	r2, #3
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d123      	bne.n	80034dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	08da      	lsrs	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3208      	adds	r2, #8
 800349c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	220f      	movs	r2, #15
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	08da      	lsrs	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3208      	adds	r2, #8
 80034d6:	69b9      	ldr	r1, [r7, #24]
 80034d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0203 	and.w	r2, r3, #3
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80c0 	beq.w	800369e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	4b66      	ldr	r3, [pc, #408]	; (80036bc <HAL_GPIO_Init+0x324>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	4a65      	ldr	r2, [pc, #404]	; (80036bc <HAL_GPIO_Init+0x324>)
 8003528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800352c:	6453      	str	r3, [r2, #68]	; 0x44
 800352e:	4b63      	ldr	r3, [pc, #396]	; (80036bc <HAL_GPIO_Init+0x324>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800353a:	4a61      	ldr	r2, [pc, #388]	; (80036c0 <HAL_GPIO_Init+0x328>)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	3302      	adds	r3, #2
 8003542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	220f      	movs	r2, #15
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <HAL_GPIO_Init+0x32c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d037      	beq.n	80035d6 <HAL_GPIO_Init+0x23e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a57      	ldr	r2, [pc, #348]	; (80036c8 <HAL_GPIO_Init+0x330>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d031      	beq.n	80035d2 <HAL_GPIO_Init+0x23a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a56      	ldr	r2, [pc, #344]	; (80036cc <HAL_GPIO_Init+0x334>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d02b      	beq.n	80035ce <HAL_GPIO_Init+0x236>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a55      	ldr	r2, [pc, #340]	; (80036d0 <HAL_GPIO_Init+0x338>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d025      	beq.n	80035ca <HAL_GPIO_Init+0x232>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a54      	ldr	r2, [pc, #336]	; (80036d4 <HAL_GPIO_Init+0x33c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01f      	beq.n	80035c6 <HAL_GPIO_Init+0x22e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a53      	ldr	r2, [pc, #332]	; (80036d8 <HAL_GPIO_Init+0x340>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d019      	beq.n	80035c2 <HAL_GPIO_Init+0x22a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a52      	ldr	r2, [pc, #328]	; (80036dc <HAL_GPIO_Init+0x344>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <HAL_GPIO_Init+0x226>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a51      	ldr	r2, [pc, #324]	; (80036e0 <HAL_GPIO_Init+0x348>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00d      	beq.n	80035ba <HAL_GPIO_Init+0x222>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a50      	ldr	r2, [pc, #320]	; (80036e4 <HAL_GPIO_Init+0x34c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d007      	beq.n	80035b6 <HAL_GPIO_Init+0x21e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4f      	ldr	r2, [pc, #316]	; (80036e8 <HAL_GPIO_Init+0x350>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d101      	bne.n	80035b2 <HAL_GPIO_Init+0x21a>
 80035ae:	2309      	movs	r3, #9
 80035b0:	e012      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035b2:	230a      	movs	r3, #10
 80035b4:	e010      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035b6:	2308      	movs	r3, #8
 80035b8:	e00e      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035ba:	2307      	movs	r3, #7
 80035bc:	e00c      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035be:	2306      	movs	r3, #6
 80035c0:	e00a      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035c2:	2305      	movs	r3, #5
 80035c4:	e008      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035c6:	2304      	movs	r3, #4
 80035c8:	e006      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035ca:	2303      	movs	r3, #3
 80035cc:	e004      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e002      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035d6:	2300      	movs	r3, #0
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	f002 0203 	and.w	r2, r2, #3
 80035de:	0092      	lsls	r2, r2, #2
 80035e0:	4093      	lsls	r3, r2
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035e8:	4935      	ldr	r1, [pc, #212]	; (80036c0 <HAL_GPIO_Init+0x328>)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	3302      	adds	r3, #2
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035f6:	4b3d      	ldr	r3, [pc, #244]	; (80036ec <HAL_GPIO_Init+0x354>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800361a:	4a34      	ldr	r2, [pc, #208]	; (80036ec <HAL_GPIO_Init+0x354>)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003620:	4b32      	ldr	r3, [pc, #200]	; (80036ec <HAL_GPIO_Init+0x354>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003644:	4a29      	ldr	r2, [pc, #164]	; (80036ec <HAL_GPIO_Init+0x354>)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800364a:	4b28      	ldr	r3, [pc, #160]	; (80036ec <HAL_GPIO_Init+0x354>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800366e:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <HAL_GPIO_Init+0x354>)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003674:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <HAL_GPIO_Init+0x354>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003698:	4a14      	ldr	r2, [pc, #80]	; (80036ec <HAL_GPIO_Init+0x354>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3301      	adds	r3, #1
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b0f      	cmp	r3, #15
 80036a8:	f67f ae84 	bls.w	80033b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	3724      	adds	r7, #36	; 0x24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40013800 	.word	0x40013800
 80036c4:	40020000 	.word	0x40020000
 80036c8:	40020400 	.word	0x40020400
 80036cc:	40020800 	.word	0x40020800
 80036d0:	40020c00 	.word	0x40020c00
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40021400 	.word	0x40021400
 80036dc:	40021800 	.word	0x40021800
 80036e0:	40021c00 	.word	0x40021c00
 80036e4:	40022000 	.word	0x40022000
 80036e8:	40022400 	.word	0x40022400
 80036ec:	40013c00 	.word	0x40013c00

080036f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	807b      	strh	r3, [r7, #2]
 80036fc:	4613      	mov	r3, r2
 80036fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003700:	787b      	ldrb	r3, [r7, #1]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003706:	887a      	ldrh	r2, [r7, #2]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800370c:	e003      	b.n	8003716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800370e:	887b      	ldrh	r3, [r7, #2]
 8003710:	041a      	lsls	r2, r3, #16
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	619a      	str	r2, [r3, #24]
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	460b      	mov	r3, r1
 800372c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003734:	887a      	ldrh	r2, [r7, #2]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4013      	ands	r3, r2
 800373a:	041a      	lsls	r2, r3, #16
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	43d9      	mvns	r1, r3
 8003740:	887b      	ldrh	r3, [r7, #2]
 8003742:	400b      	ands	r3, r1
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	619a      	str	r2, [r3, #24]
}
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003762:	4b08      	ldr	r3, [pc, #32]	; (8003784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	4013      	ands	r3, r2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d006      	beq.n	800377c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800376e:	4a05      	ldr	r2, [pc, #20]	; (8003784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd fe48 	bl	800140c <HAL_GPIO_EXTI_Callback>
  }
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40013c00 	.word	0x40013c00

08003788 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800378a:	b08f      	sub	sp, #60	; 0x3c
 800378c:	af0a      	add	r7, sp, #40	; 0x28
 800378e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e054      	b.n	8003844 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d106      	bne.n	80037ba <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff f985 	bl	8002ac4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2203      	movs	r2, #3
 80037be:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f004 fc28 	bl	800802e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	687e      	ldr	r6, [r7, #4]
 80037e6:	466d      	mov	r5, sp
 80037e8:	f106 0410 	add.w	r4, r6, #16
 80037ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80037fc:	1d33      	adds	r3, r6, #4
 80037fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003800:	6838      	ldr	r0, [r7, #0]
 8003802:	f004 fbb3 	bl	8007f6c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2101      	movs	r1, #1
 800380c:	4618      	mov	r0, r3
 800380e:	f004 fc1f 	bl	8008050 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	687e      	ldr	r6, [r7, #4]
 800381a:	466d      	mov	r5, sp
 800381c:	f106 0410 	add.w	r4, r6, #16
 8003820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003828:	e894 0003 	ldmia.w	r4, {r0, r1}
 800382c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003830:	1d33      	adds	r3, r6, #4
 8003832:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003834:	6838      	ldr	r0, [r7, #0]
 8003836:	f004 fcfb 	bl	8008230 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800384c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f004 fca2 	bl	80081ac <USB_GetMode>
 8003868:	4603      	mov	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	f040 80ef 	bne.w	8003a4e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f004 fc86 	bl	8008186 <USB_ReadInterrupts>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 80e5 	beq.w	8003a4c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f004 fc7d 	bl	8008186 <USB_ReadInterrupts>
 800388c:	4603      	mov	r3, r0
 800388e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003896:	d104      	bne.n	80038a2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80038a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f004 fc6d 	bl	8008186 <USB_ReadInterrupts>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b6:	d104      	bne.n	80038c2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f004 fc5d 	bl	8008186 <USB_ReadInterrupts>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038d6:	d104      	bne.n	80038e2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80038e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f004 fc4d 	bl	8008186 <USB_ReadInterrupts>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d103      	bne.n	80038fe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2202      	movs	r2, #2
 80038fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f004 fc3f 	bl	8008186 <USB_ReadInterrupts>
 8003908:	4603      	mov	r3, r0
 800390a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800390e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003912:	d115      	bne.n	8003940 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800391c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d108      	bne.n	8003940 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f8a4 	bl	8003a7c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2101      	movs	r1, #1
 800393a:	4618      	mov	r0, r3
 800393c:	f004 fd34 	bl	80083a8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f004 fc1e 	bl	8008186 <USB_ReadInterrupts>
 800394a:	4603      	mov	r3, r0
 800394c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003954:	d102      	bne.n	800395c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f001 f9ad 	bl	8004cb6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f004 fc10 	bl	8008186 <USB_ReadInterrupts>
 8003966:	4603      	mov	r3, r0
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b08      	cmp	r3, #8
 800396e:	d106      	bne.n	800397e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f86f 	bl	8003a54 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2208      	movs	r2, #8
 800397c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f004 fbff 	bl	8008186 <USB_ReadInterrupts>
 8003988:	4603      	mov	r3, r0
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b10      	cmp	r3, #16
 8003990:	d101      	bne.n	8003996 <HAL_HCD_IRQHandler+0x14a>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <HAL_HCD_IRQHandler+0x14c>
 8003996:	2300      	movs	r3, #0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d012      	beq.n	80039c2 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0210 	bic.w	r2, r2, #16
 80039aa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f001 f8b0 	bl	8004b12 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699a      	ldr	r2, [r3, #24]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0210 	orr.w	r2, r2, #16
 80039c0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f004 fbdd 	bl	8008186 <USB_ReadInterrupts>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039d6:	d13a      	bne.n	8003a4e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f004 fd56 	bl	800848e <USB_HC_ReadInterrupt>
 80039e2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e025      	b.n	8003a36 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	fa22 f303 	lsr.w	r3, r2, r3
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d018      	beq.n	8003a30 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a14:	d106      	bne.n	8003a24 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f859 	bl	8003ad4 <HCD_HC_IN_IRQHandler>
 8003a22:	e005      	b.n	8003a30 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fc74 	bl	8004318 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	3301      	adds	r3, #1
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d3d4      	bcc.n	80039ea <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a48:	615a      	str	r2, [r3, #20]
 8003a4a:	e000      	b.n	8003a4e <HAL_HCD_IRQHandler+0x202>
      return;
 8003a4c:	bf00      	nop
    }
  }
}
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	70fb      	strb	r3, [r7, #3]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d119      	bne.n	8003b38 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b10:	461a      	mov	r2, r3
 8003b12:	2304      	movs	r3, #4
 8003b14:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	0151      	lsls	r1, r2, #5
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	440a      	add	r2, r1
 8003b2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b30:	f043 0302 	orr.w	r3, r3, #2
 8003b34:	60d3      	str	r3, [r2, #12]
 8003b36:	e101      	b.n	8003d3c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b4e:	d12b      	bne.n	8003ba8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	212c      	movs	r1, #44	; 0x2c
 8003b6a:	fb01 f303 	mul.w	r3, r1, r3
 8003b6e:	4413      	add	r3, r2
 8003b70:	3361      	adds	r3, #97	; 0x61
 8003b72:	2207      	movs	r2, #7
 8003b74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	0151      	lsls	r1, r2, #5
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	440a      	add	r2, r1
 8003b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b90:	f043 0302 	orr.w	r3, r3, #2
 8003b94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f004 fc85 	bl	80084b0 <USB_HC_Halt>
 8003ba6:	e0c9      	b.n	8003d3c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d109      	bne.n	8003bd2 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bca:	461a      	mov	r2, r3
 8003bcc:	2320      	movs	r3, #32
 8003bce:	6093      	str	r3, [r2, #8]
 8003bd0:	e0b4      	b.n	8003d3c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d133      	bne.n	8003c50 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	0151      	lsls	r1, r2, #5
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	440a      	add	r2, r1
 8003bfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c02:	f043 0302 	orr.w	r3, r3, #2
 8003c06:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	212c      	movs	r1, #44	; 0x2c
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	3361      	adds	r3, #97	; 0x61
 8003c16:	2205      	movs	r2, #5
 8003c18:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c26:	461a      	mov	r2, r3
 8003c28:	2310      	movs	r3, #16
 8003c2a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f004 fc31 	bl	80084b0 <USB_HC_Halt>
 8003c4e:	e075      	b.n	8003d3c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c66:	d134      	bne.n	8003cd2 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	0151      	lsls	r1, r2, #5
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	440a      	add	r2, r1
 8003c7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c82:	f043 0302 	orr.w	r3, r3, #2
 8003c86:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	212c      	movs	r1, #44	; 0x2c
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	3361      	adds	r3, #97	; 0x61
 8003c96:	2208      	movs	r2, #8
 8003c98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2310      	movs	r3, #16
 8003caa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cbe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	4611      	mov	r1, r2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f004 fbf0 	bl	80084b0 <USB_HC_Halt>
 8003cd0:	e034      	b.n	8003d3c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce4:	2b80      	cmp	r3, #128	; 0x80
 8003ce6:	d129      	bne.n	8003d3c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	0151      	lsls	r1, r2, #5
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	440a      	add	r2, r1
 8003cfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d02:	f043 0302 	orr.w	r3, r3, #2
 8003d06:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	212c      	movs	r1, #44	; 0x2c
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	4413      	add	r3, r2
 8003d14:	3361      	adds	r3, #97	; 0x61
 8003d16:	2206      	movs	r2, #6
 8003d18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	4611      	mov	r1, r2
 8003d24:	4618      	mov	r0, r3
 8003d26:	f004 fbc3 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d36:	461a      	mov	r2, r3
 8003d38:	2380      	movs	r3, #128	; 0x80
 8003d3a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d52:	d122      	bne.n	8003d9a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	0151      	lsls	r1, r2, #5
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	440a      	add	r2, r1
 8003d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d6e:	f043 0302 	orr.w	r3, r3, #2
 8003d72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f004 fb96 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d90:	461a      	mov	r2, r3
 8003d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d96:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003d98:	e2ba      	b.n	8004310 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	f040 811b 	bne.w	8003fe8 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d019      	beq.n	8003dee <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	212c      	movs	r1, #44	; 0x2c
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3348      	adds	r3, #72	; 0x48
 8003dc8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	0159      	lsls	r1, r3, #5
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	440b      	add	r3, r1
 8003dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003ddc:	1ad2      	subs	r2, r2, r3
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	202c      	movs	r0, #44	; 0x2c
 8003de4:	fb00 f303 	mul.w	r3, r0, r3
 8003de8:	440b      	add	r3, r1
 8003dea:	3350      	adds	r3, #80	; 0x50
 8003dec:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	212c      	movs	r1, #44	; 0x2c
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	3361      	adds	r3, #97	; 0x61
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	212c      	movs	r1, #44	; 0x2c
 8003e06:	fb01 f303 	mul.w	r3, r1, r3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	335c      	adds	r3, #92	; 0x5c
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2301      	movs	r3, #1
 8003e22:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	212c      	movs	r1, #44	; 0x2c
 8003e2a:	fb01 f303 	mul.w	r3, r1, r3
 8003e2e:	4413      	add	r3, r2
 8003e30:	333f      	adds	r3, #63	; 0x3f
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d009      	beq.n	8003e4c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	212c      	movs	r1, #44	; 0x2c
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	4413      	add	r3, r2
 8003e44:	333f      	adds	r3, #63	; 0x3f
 8003e46:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d121      	bne.n	8003e90 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	0151      	lsls	r1, r2, #5
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	440a      	add	r2, r1
 8003e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e66:	f043 0302 	orr.w	r3, r3, #2
 8003e6a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	4611      	mov	r1, r2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f004 fb1a 	bl	80084b0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2310      	movs	r3, #16
 8003e8c:	6093      	str	r3, [r2, #8]
 8003e8e:	e066      	b.n	8003f5e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	212c      	movs	r1, #44	; 0x2c
 8003e96:	fb01 f303 	mul.w	r3, r1, r3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	333f      	adds	r3, #63	; 0x3f
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d127      	bne.n	8003ef4 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	0151      	lsls	r1, r2, #5
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	440a      	add	r2, r1
 8003eba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ebe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ec2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	212c      	movs	r1, #44	; 0x2c
 8003eca:	fb01 f303 	mul.w	r3, r1, r3
 8003ece:	4413      	add	r3, r2
 8003ed0:	3360      	adds	r3, #96	; 0x60
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	b2d9      	uxtb	r1, r3
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	202c      	movs	r0, #44	; 0x2c
 8003ee0:	fb00 f303 	mul.w	r3, r0, r3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3360      	adds	r3, #96	; 0x60
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff fde3 	bl	8003ab8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ef2:	e034      	b.n	8003f5e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	212c      	movs	r1, #44	; 0x2c
 8003efa:	fb01 f303 	mul.w	r3, r1, r3
 8003efe:	4413      	add	r3, r2
 8003f00:	333f      	adds	r3, #63	; 0x3f
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d12a      	bne.n	8003f5e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	212c      	movs	r1, #44	; 0x2c
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	4413      	add	r3, r2
 8003f14:	3360      	adds	r3, #96	; 0x60
 8003f16:	2201      	movs	r2, #1
 8003f18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	212c      	movs	r1, #44	; 0x2c
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	4413      	add	r3, r2
 8003f26:	3354      	adds	r3, #84	; 0x54
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	f083 0301 	eor.w	r3, r3, #1
 8003f2e:	b2d8      	uxtb	r0, r3
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	212c      	movs	r1, #44	; 0x2c
 8003f36:	fb01 f303 	mul.w	r3, r1, r3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3354      	adds	r3, #84	; 0x54
 8003f3e:	4602      	mov	r2, r0
 8003f40:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	b2d9      	uxtb	r1, r3
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	202c      	movs	r0, #44	; 0x2c
 8003f4c:	fb00 f303 	mul.w	r3, r0, r3
 8003f50:	4413      	add	r3, r2
 8003f52:	3360      	adds	r3, #96	; 0x60
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff fdad 	bl	8003ab8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d12b      	bne.n	8003fbe <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	212c      	movs	r1, #44	; 0x2c
 8003f6c:	fb01 f303 	mul.w	r3, r1, r3
 8003f70:	4413      	add	r3, r2
 8003f72:	3348      	adds	r3, #72	; 0x48
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	202c      	movs	r0, #44	; 0x2c
 8003f7c:	fb00 f202 	mul.w	r2, r0, r2
 8003f80:	440a      	add	r2, r1
 8003f82:	3240      	adds	r2, #64	; 0x40
 8003f84:	8812      	ldrh	r2, [r2, #0]
 8003f86:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 81be 	beq.w	8004310 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	212c      	movs	r1, #44	; 0x2c
 8003f9a:	fb01 f303 	mul.w	r3, r1, r3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3354      	adds	r3, #84	; 0x54
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	f083 0301 	eor.w	r3, r3, #1
 8003fa8:	b2d8      	uxtb	r0, r3
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	212c      	movs	r1, #44	; 0x2c
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3354      	adds	r3, #84	; 0x54
 8003fb8:	4602      	mov	r2, r0
 8003fba:	701a      	strb	r2, [r3, #0]
}
 8003fbc:	e1a8      	b.n	8004310 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	212c      	movs	r1, #44	; 0x2c
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	4413      	add	r3, r2
 8003fca:	3354      	adds	r3, #84	; 0x54
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	f083 0301 	eor.w	r3, r3, #1
 8003fd2:	b2d8      	uxtb	r0, r3
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	212c      	movs	r1, #44	; 0x2c
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	3354      	adds	r3, #84	; 0x54
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	701a      	strb	r2, [r3, #0]
}
 8003fe6:	e193      	b.n	8004310 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	f040 8106 	bne.w	800420c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4413      	add	r3, r2
 8004008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	0151      	lsls	r1, r2, #5
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	440a      	add	r2, r1
 8004016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800401a:	f023 0302 	bic.w	r3, r3, #2
 800401e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	212c      	movs	r1, #44	; 0x2c
 8004026:	fb01 f303 	mul.w	r3, r1, r3
 800402a:	4413      	add	r3, r2
 800402c:	3361      	adds	r3, #97	; 0x61
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d109      	bne.n	8004048 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	212c      	movs	r1, #44	; 0x2c
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	4413      	add	r3, r2
 8004040:	3360      	adds	r3, #96	; 0x60
 8004042:	2201      	movs	r2, #1
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	e0c9      	b.n	80041dc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	212c      	movs	r1, #44	; 0x2c
 800404e:	fb01 f303 	mul.w	r3, r1, r3
 8004052:	4413      	add	r3, r2
 8004054:	3361      	adds	r3, #97	; 0x61
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b05      	cmp	r3, #5
 800405a:	d109      	bne.n	8004070 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	212c      	movs	r1, #44	; 0x2c
 8004062:	fb01 f303 	mul.w	r3, r1, r3
 8004066:	4413      	add	r3, r2
 8004068:	3360      	adds	r3, #96	; 0x60
 800406a:	2205      	movs	r2, #5
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	e0b5      	b.n	80041dc <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	212c      	movs	r1, #44	; 0x2c
 8004076:	fb01 f303 	mul.w	r3, r1, r3
 800407a:	4413      	add	r3, r2
 800407c:	3361      	adds	r3, #97	; 0x61
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b06      	cmp	r3, #6
 8004082:	d009      	beq.n	8004098 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	212c      	movs	r1, #44	; 0x2c
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	4413      	add	r3, r2
 8004090:	3361      	adds	r3, #97	; 0x61
 8004092:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004094:	2b08      	cmp	r3, #8
 8004096:	d150      	bne.n	800413a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	212c      	movs	r1, #44	; 0x2c
 800409e:	fb01 f303 	mul.w	r3, r1, r3
 80040a2:	4413      	add	r3, r2
 80040a4:	335c      	adds	r3, #92	; 0x5c
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	202c      	movs	r0, #44	; 0x2c
 80040b0:	fb00 f303 	mul.w	r3, r0, r3
 80040b4:	440b      	add	r3, r1
 80040b6:	335c      	adds	r3, #92	; 0x5c
 80040b8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	212c      	movs	r1, #44	; 0x2c
 80040c0:	fb01 f303 	mul.w	r3, r1, r3
 80040c4:	4413      	add	r3, r2
 80040c6:	335c      	adds	r3, #92	; 0x5c
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d912      	bls.n	80040f4 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	212c      	movs	r1, #44	; 0x2c
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	4413      	add	r3, r2
 80040da:	335c      	adds	r3, #92	; 0x5c
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	212c      	movs	r1, #44	; 0x2c
 80040e6:	fb01 f303 	mul.w	r3, r1, r3
 80040ea:	4413      	add	r3, r2
 80040ec:	3360      	adds	r3, #96	; 0x60
 80040ee:	2204      	movs	r2, #4
 80040f0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040f2:	e073      	b.n	80041dc <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	212c      	movs	r1, #44	; 0x2c
 80040fa:	fb01 f303 	mul.w	r3, r1, r3
 80040fe:	4413      	add	r3, r2
 8004100:	3360      	adds	r3, #96	; 0x60
 8004102:	2202      	movs	r2, #2
 8004104:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800411c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004124:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4413      	add	r3, r2
 800412e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004132:	461a      	mov	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004138:	e050      	b.n	80041dc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	212c      	movs	r1, #44	; 0x2c
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	4413      	add	r3, r2
 8004146:	3361      	adds	r3, #97	; 0x61
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b03      	cmp	r3, #3
 800414c:	d122      	bne.n	8004194 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	212c      	movs	r1, #44	; 0x2c
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	4413      	add	r3, r2
 800415a:	3360      	adds	r3, #96	; 0x60
 800415c:	2202      	movs	r2, #2
 800415e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4413      	add	r3, r2
 8004168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004176:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800417e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4413      	add	r3, r2
 8004188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418c:	461a      	mov	r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	e023      	b.n	80041dc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	212c      	movs	r1, #44	; 0x2c
 800419a:	fb01 f303 	mul.w	r3, r1, r3
 800419e:	4413      	add	r3, r2
 80041a0:	3361      	adds	r3, #97	; 0x61
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b07      	cmp	r3, #7
 80041a6:	d119      	bne.n	80041dc <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	212c      	movs	r1, #44	; 0x2c
 80041ae:	fb01 f303 	mul.w	r3, r1, r3
 80041b2:	4413      	add	r3, r2
 80041b4:	335c      	adds	r3, #92	; 0x5c
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	202c      	movs	r0, #44	; 0x2c
 80041c0:	fb00 f303 	mul.w	r3, r0, r3
 80041c4:	440b      	add	r3, r1
 80041c6:	335c      	adds	r3, #92	; 0x5c
 80041c8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	212c      	movs	r1, #44	; 0x2c
 80041d0:	fb01 f303 	mul.w	r3, r1, r3
 80041d4:	4413      	add	r3, r2
 80041d6:	3360      	adds	r3, #96	; 0x60
 80041d8:	2204      	movs	r2, #4
 80041da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e8:	461a      	mov	r2, r3
 80041ea:	2302      	movs	r3, #2
 80041ec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	b2d9      	uxtb	r1, r3
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	202c      	movs	r0, #44	; 0x2c
 80041f8:	fb00 f303 	mul.w	r3, r0, r3
 80041fc:	4413      	add	r3, r2
 80041fe:	3360      	adds	r3, #96	; 0x60
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff fc57 	bl	8003ab8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800420a:	e081      	b.n	8004310 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4413      	add	r3, r2
 8004214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b10      	cmp	r3, #16
 8004220:	d176      	bne.n	8004310 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	212c      	movs	r1, #44	; 0x2c
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	4413      	add	r3, r2
 800422e:	333f      	adds	r3, #63	; 0x3f
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b03      	cmp	r3, #3
 8004234:	d121      	bne.n	800427a <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	212c      	movs	r1, #44	; 0x2c
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	4413      	add	r3, r2
 8004242:	335c      	adds	r3, #92	; 0x5c
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4413      	add	r3, r2
 8004250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	0151      	lsls	r1, r2, #5
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	440a      	add	r2, r1
 800425e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004262:	f043 0302 	orr.w	r3, r3, #2
 8004266:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	4611      	mov	r1, r2
 8004272:	4618      	mov	r0, r3
 8004274:	f004 f91c 	bl	80084b0 <USB_HC_Halt>
 8004278:	e041      	b.n	80042fe <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	212c      	movs	r1, #44	; 0x2c
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	4413      	add	r3, r2
 8004286:	333f      	adds	r3, #63	; 0x3f
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	212c      	movs	r1, #44	; 0x2c
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	4413      	add	r3, r2
 800429a:	333f      	adds	r3, #63	; 0x3f
 800429c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d12d      	bne.n	80042fe <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	212c      	movs	r1, #44	; 0x2c
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	4413      	add	r3, r2
 80042ae:	335c      	adds	r3, #92	; 0x5c
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d120      	bne.n	80042fe <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	212c      	movs	r1, #44	; 0x2c
 80042c2:	fb01 f303 	mul.w	r3, r1, r3
 80042c6:	4413      	add	r3, r2
 80042c8:	3361      	adds	r3, #97	; 0x61
 80042ca:	2203      	movs	r2, #3
 80042cc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	0151      	lsls	r1, r2, #5
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	440a      	add	r2, r1
 80042e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042e8:	f043 0302 	orr.w	r3, r3, #2
 80042ec:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f004 f8d9 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4413      	add	r3, r2
 8004306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430a:	461a      	mov	r2, r3
 800430c:	2310      	movs	r3, #16
 800430e:	6093      	str	r3, [r2, #8]
}
 8004310:	bf00      	nop
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	4413      	add	r3, r2
 800433a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b04      	cmp	r3, #4
 8004346:	d119      	bne.n	800437c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	4413      	add	r3, r2
 8004350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004354:	461a      	mov	r2, r3
 8004356:	2304      	movs	r3, #4
 8004358:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	4413      	add	r3, r2
 8004362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	0151      	lsls	r1, r2, #5
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	440a      	add	r2, r1
 8004370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004374:	f043 0302 	orr.w	r3, r3, #2
 8004378:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800437a:	e3c6      	b.n	8004b0a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	4413      	add	r3, r2
 8004384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b20      	cmp	r3, #32
 8004390:	d13e      	bne.n	8004410 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	4413      	add	r3, r2
 800439a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439e:	461a      	mov	r2, r3
 80043a0:	2320      	movs	r3, #32
 80043a2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	212c      	movs	r1, #44	; 0x2c
 80043aa:	fb01 f303 	mul.w	r3, r1, r3
 80043ae:	4413      	add	r3, r2
 80043b0:	333d      	adds	r3, #61	; 0x3d
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	f040 83a8 	bne.w	8004b0a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	212c      	movs	r1, #44	; 0x2c
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	4413      	add	r3, r2
 80043c6:	333d      	adds	r3, #61	; 0x3d
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	212c      	movs	r1, #44	; 0x2c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	3360      	adds	r3, #96	; 0x60
 80043da:	2202      	movs	r2, #2
 80043dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	0151      	lsls	r1, r2, #5
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	440a      	add	r2, r1
 80043f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043f8:	f043 0302 	orr.w	r3, r3, #2
 80043fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	4611      	mov	r1, r2
 8004408:	4618      	mov	r0, r3
 800440a:	f004 f851 	bl	80084b0 <USB_HC_Halt>
}
 800440e:	e37c      	b.n	8004b0a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	4413      	add	r3, r2
 8004418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004426:	d122      	bne.n	800446e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	0151      	lsls	r1, r2, #5
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	440a      	add	r2, r1
 800443e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004442:	f043 0302 	orr.w	r3, r3, #2
 8004446:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	4611      	mov	r1, r2
 8004452:	4618      	mov	r0, r3
 8004454:	f004 f82c 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	4413      	add	r3, r2
 8004460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004464:	461a      	mov	r2, r3
 8004466:	f44f 7300 	mov.w	r3, #512	; 0x200
 800446a:	6093      	str	r3, [r2, #8]
}
 800446c:	e34d      	b.n	8004b0a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	4413      	add	r3, r2
 8004476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b01      	cmp	r3, #1
 8004482:	d150      	bne.n	8004526 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	212c      	movs	r1, #44	; 0x2c
 800448a:	fb01 f303 	mul.w	r3, r1, r3
 800448e:	4413      	add	r3, r2
 8004490:	335c      	adds	r3, #92	; 0x5c
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	4413      	add	r3, r2
 800449e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d111      	bne.n	80044d0 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	212c      	movs	r1, #44	; 0x2c
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	4413      	add	r3, r2
 80044b8:	333d      	adds	r3, #61	; 0x3d
 80044ba:	2201      	movs	r2, #1
 80044bc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ca:	461a      	mov	r2, r3
 80044cc:	2340      	movs	r3, #64	; 0x40
 80044ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	0151      	lsls	r1, r2, #5
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	440a      	add	r2, r1
 80044e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044ea:	f043 0302 	orr.w	r3, r3, #2
 80044ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	4611      	mov	r1, r2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f003 ffd8 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	4413      	add	r3, r2
 8004508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450c:	461a      	mov	r2, r3
 800450e:	2301      	movs	r3, #1
 8004510:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	212c      	movs	r1, #44	; 0x2c
 8004518:	fb01 f303 	mul.w	r3, r1, r3
 800451c:	4413      	add	r3, r2
 800451e:	3361      	adds	r3, #97	; 0x61
 8004520:	2201      	movs	r2, #1
 8004522:	701a      	strb	r2, [r3, #0]
}
 8004524:	e2f1      	b.n	8004b0a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	4413      	add	r3, r2
 800452e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d13c      	bne.n	80045b6 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	212c      	movs	r1, #44	; 0x2c
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	4413      	add	r3, r2
 8004548:	3361      	adds	r3, #97	; 0x61
 800454a:	2204      	movs	r2, #4
 800454c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	212c      	movs	r1, #44	; 0x2c
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	4413      	add	r3, r2
 800455a:	333d      	adds	r3, #61	; 0x3d
 800455c:	2201      	movs	r2, #1
 800455e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	212c      	movs	r1, #44	; 0x2c
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	4413      	add	r3, r2
 800456c:	335c      	adds	r3, #92	; 0x5c
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	4413      	add	r3, r2
 800457a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	0151      	lsls	r1, r2, #5
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	440a      	add	r2, r1
 8004588:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800458c:	f043 0302 	orr.w	r3, r3, #2
 8004590:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	4611      	mov	r1, r2
 800459c:	4618      	mov	r0, r3
 800459e:	f003 ff87 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ae:	461a      	mov	r2, r3
 80045b0:	2340      	movs	r3, #64	; 0x40
 80045b2:	6093      	str	r3, [r2, #8]
}
 80045b4:	e2a9      	b.n	8004b0a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d12a      	bne.n	8004622 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d8:	461a      	mov	r2, r3
 80045da:	2308      	movs	r3, #8
 80045dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	0151      	lsls	r1, r2, #5
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	440a      	add	r2, r1
 80045f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045f8:	f043 0302 	orr.w	r3, r3, #2
 80045fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	4611      	mov	r1, r2
 8004608:	4618      	mov	r0, r3
 800460a:	f003 ff51 	bl	80084b0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	212c      	movs	r1, #44	; 0x2c
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	4413      	add	r3, r2
 800461a:	3361      	adds	r3, #97	; 0x61
 800461c:	2205      	movs	r2, #5
 800461e:	701a      	strb	r2, [r3, #0]
}
 8004620:	e273      	b.n	8004b0a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	4413      	add	r3, r2
 800462a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b10      	cmp	r3, #16
 8004636:	d150      	bne.n	80046da <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	212c      	movs	r1, #44	; 0x2c
 800463e:	fb01 f303 	mul.w	r3, r1, r3
 8004642:	4413      	add	r3, r2
 8004644:	335c      	adds	r3, #92	; 0x5c
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	212c      	movs	r1, #44	; 0x2c
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	4413      	add	r3, r2
 8004656:	3361      	adds	r3, #97	; 0x61
 8004658:	2203      	movs	r2, #3
 800465a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	212c      	movs	r1, #44	; 0x2c
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	4413      	add	r3, r2
 8004668:	333d      	adds	r3, #61	; 0x3d
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d112      	bne.n	8004696 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	212c      	movs	r1, #44	; 0x2c
 8004676:	fb01 f303 	mul.w	r3, r1, r3
 800467a:	4413      	add	r3, r2
 800467c:	333c      	adds	r3, #60	; 0x3c
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d108      	bne.n	8004696 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	212c      	movs	r1, #44	; 0x2c
 800468a:	fb01 f303 	mul.w	r3, r1, r3
 800468e:	4413      	add	r3, r2
 8004690:	333d      	adds	r3, #61	; 0x3d
 8004692:	2201      	movs	r2, #1
 8004694:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	4413      	add	r3, r2
 800469e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	0151      	lsls	r1, r2, #5
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	440a      	add	r2, r1
 80046ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046b0:	f043 0302 	orr.w	r3, r3, #2
 80046b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	4611      	mov	r1, r2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f003 fef5 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d2:	461a      	mov	r2, r3
 80046d4:	2310      	movs	r3, #16
 80046d6:	6093      	str	r3, [r2, #8]
}
 80046d8:	e217      	b.n	8004b0a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ec:	2b80      	cmp	r3, #128	; 0x80
 80046ee:	d174      	bne.n	80047da <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d121      	bne.n	800473c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	212c      	movs	r1, #44	; 0x2c
 80046fe:	fb01 f303 	mul.w	r3, r1, r3
 8004702:	4413      	add	r3, r2
 8004704:	3361      	adds	r3, #97	; 0x61
 8004706:	2206      	movs	r2, #6
 8004708:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	4413      	add	r3, r2
 8004712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	0151      	lsls	r1, r2, #5
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	440a      	add	r2, r1
 8004720:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004724:	f043 0302 	orr.w	r3, r3, #2
 8004728:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	4611      	mov	r1, r2
 8004734:	4618      	mov	r0, r3
 8004736:	f003 febb 	bl	80084b0 <USB_HC_Halt>
 800473a:	e044      	b.n	80047c6 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	212c      	movs	r1, #44	; 0x2c
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	4413      	add	r3, r2
 8004748:	335c      	adds	r3, #92	; 0x5c
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	202c      	movs	r0, #44	; 0x2c
 8004754:	fb00 f303 	mul.w	r3, r0, r3
 8004758:	440b      	add	r3, r1
 800475a:	335c      	adds	r3, #92	; 0x5c
 800475c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	212c      	movs	r1, #44	; 0x2c
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	4413      	add	r3, r2
 800476a:	335c      	adds	r3, #92	; 0x5c
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d920      	bls.n	80047b4 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	212c      	movs	r1, #44	; 0x2c
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	4413      	add	r3, r2
 800477e:	335c      	adds	r3, #92	; 0x5c
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	212c      	movs	r1, #44	; 0x2c
 800478a:	fb01 f303 	mul.w	r3, r1, r3
 800478e:	4413      	add	r3, r2
 8004790:	3360      	adds	r3, #96	; 0x60
 8004792:	2204      	movs	r2, #4
 8004794:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	b2d9      	uxtb	r1, r3
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	202c      	movs	r0, #44	; 0x2c
 80047a0:	fb00 f303 	mul.w	r3, r0, r3
 80047a4:	4413      	add	r3, r2
 80047a6:	3360      	adds	r3, #96	; 0x60
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff f983 	bl	8003ab8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80047b2:	e008      	b.n	80047c6 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	212c      	movs	r1, #44	; 0x2c
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	4413      	add	r3, r2
 80047c0:	3360      	adds	r3, #96	; 0x60
 80047c2:	2202      	movs	r2, #2
 80047c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d2:	461a      	mov	r2, r3
 80047d4:	2380      	movs	r3, #128	; 0x80
 80047d6:	6093      	str	r3, [r2, #8]
}
 80047d8:	e197      	b.n	8004b0a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f0:	d134      	bne.n	800485c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	0151      	lsls	r1, r2, #5
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	440a      	add	r2, r1
 8004808:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800480c:	f043 0302 	orr.w	r3, r3, #2
 8004810:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	4611      	mov	r1, r2
 800481c:	4618      	mov	r0, r3
 800481e:	f003 fe47 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	4413      	add	r3, r2
 800482a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482e:	461a      	mov	r2, r3
 8004830:	2310      	movs	r3, #16
 8004832:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	4413      	add	r3, r2
 800483c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004840:	461a      	mov	r2, r3
 8004842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004846:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	212c      	movs	r1, #44	; 0x2c
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	4413      	add	r3, r2
 8004854:	3361      	adds	r3, #97	; 0x61
 8004856:	2208      	movs	r2, #8
 8004858:	701a      	strb	r2, [r3, #0]
}
 800485a:	e156      	b.n	8004b0a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	4413      	add	r3, r2
 8004864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b02      	cmp	r3, #2
 8004870:	f040 814b 	bne.w	8004b0a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	4413      	add	r3, r2
 800487c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	0151      	lsls	r1, r2, #5
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	440a      	add	r2, r1
 800488a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800488e:	f023 0302 	bic.w	r3, r3, #2
 8004892:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	212c      	movs	r1, #44	; 0x2c
 800489a:	fb01 f303 	mul.w	r3, r1, r3
 800489e:	4413      	add	r3, r2
 80048a0:	3361      	adds	r3, #97	; 0x61
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d179      	bne.n	800499c <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	212c      	movs	r1, #44	; 0x2c
 80048ae:	fb01 f303 	mul.w	r3, r1, r3
 80048b2:	4413      	add	r3, r2
 80048b4:	3360      	adds	r3, #96	; 0x60
 80048b6:	2201      	movs	r2, #1
 80048b8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	212c      	movs	r1, #44	; 0x2c
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	4413      	add	r3, r2
 80048c6:	333f      	adds	r3, #63	; 0x3f
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d00a      	beq.n	80048e4 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	212c      	movs	r1, #44	; 0x2c
 80048d4:	fb01 f303 	mul.w	r3, r1, r3
 80048d8:	4413      	add	r3, r2
 80048da:	333f      	adds	r3, #63	; 0x3f
 80048dc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80048de:	2b03      	cmp	r3, #3
 80048e0:	f040 80fc 	bne.w	8004adc <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d142      	bne.n	8004972 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	212c      	movs	r1, #44	; 0x2c
 80048f2:	fb01 f303 	mul.w	r3, r1, r3
 80048f6:	4413      	add	r3, r2
 80048f8:	334c      	adds	r3, #76	; 0x4c
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80ed 	beq.w	8004adc <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	212c      	movs	r1, #44	; 0x2c
 8004908:	fb01 f303 	mul.w	r3, r1, r3
 800490c:	4413      	add	r3, r2
 800490e:	334c      	adds	r3, #76	; 0x4c
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	202c      	movs	r0, #44	; 0x2c
 8004918:	fb00 f202 	mul.w	r2, r0, r2
 800491c:	440a      	add	r2, r1
 800491e:	3240      	adds	r2, #64	; 0x40
 8004920:	8812      	ldrh	r2, [r2, #0]
 8004922:	4413      	add	r3, r2
 8004924:	3b01      	subs	r3, #1
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	202c      	movs	r0, #44	; 0x2c
 800492c:	fb00 f202 	mul.w	r2, r0, r2
 8004930:	440a      	add	r2, r1
 8004932:	3240      	adds	r2, #64	; 0x40
 8004934:	8812      	ldrh	r2, [r2, #0]
 8004936:	fbb3 f3f2 	udiv	r3, r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 80ca 	beq.w	8004adc <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	212c      	movs	r1, #44	; 0x2c
 800494e:	fb01 f303 	mul.w	r3, r1, r3
 8004952:	4413      	add	r3, r2
 8004954:	3355      	adds	r3, #85	; 0x55
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	f083 0301 	eor.w	r3, r3, #1
 800495c:	b2d8      	uxtb	r0, r3
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	212c      	movs	r1, #44	; 0x2c
 8004964:	fb01 f303 	mul.w	r3, r1, r3
 8004968:	4413      	add	r3, r2
 800496a:	3355      	adds	r3, #85	; 0x55
 800496c:	4602      	mov	r2, r0
 800496e:	701a      	strb	r2, [r3, #0]
 8004970:	e0b4      	b.n	8004adc <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	212c      	movs	r1, #44	; 0x2c
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	4413      	add	r3, r2
 800497e:	3355      	adds	r3, #85	; 0x55
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	f083 0301 	eor.w	r3, r3, #1
 8004986:	b2d8      	uxtb	r0, r3
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	212c      	movs	r1, #44	; 0x2c
 800498e:	fb01 f303 	mul.w	r3, r1, r3
 8004992:	4413      	add	r3, r2
 8004994:	3355      	adds	r3, #85	; 0x55
 8004996:	4602      	mov	r2, r0
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	e09f      	b.n	8004adc <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	212c      	movs	r1, #44	; 0x2c
 80049a2:	fb01 f303 	mul.w	r3, r1, r3
 80049a6:	4413      	add	r3, r2
 80049a8:	3361      	adds	r3, #97	; 0x61
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d109      	bne.n	80049c4 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	212c      	movs	r1, #44	; 0x2c
 80049b6:	fb01 f303 	mul.w	r3, r1, r3
 80049ba:	4413      	add	r3, r2
 80049bc:	3360      	adds	r3, #96	; 0x60
 80049be:	2202      	movs	r2, #2
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	e08b      	b.n	8004adc <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	212c      	movs	r1, #44	; 0x2c
 80049ca:	fb01 f303 	mul.w	r3, r1, r3
 80049ce:	4413      	add	r3, r2
 80049d0:	3361      	adds	r3, #97	; 0x61
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d109      	bne.n	80049ec <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	212c      	movs	r1, #44	; 0x2c
 80049de:	fb01 f303 	mul.w	r3, r1, r3
 80049e2:	4413      	add	r3, r2
 80049e4:	3360      	adds	r3, #96	; 0x60
 80049e6:	2202      	movs	r2, #2
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	e077      	b.n	8004adc <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	212c      	movs	r1, #44	; 0x2c
 80049f2:	fb01 f303 	mul.w	r3, r1, r3
 80049f6:	4413      	add	r3, r2
 80049f8:	3361      	adds	r3, #97	; 0x61
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b05      	cmp	r3, #5
 80049fe:	d109      	bne.n	8004a14 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	212c      	movs	r1, #44	; 0x2c
 8004a06:	fb01 f303 	mul.w	r3, r1, r3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3360      	adds	r3, #96	; 0x60
 8004a0e:	2205      	movs	r2, #5
 8004a10:	701a      	strb	r2, [r3, #0]
 8004a12:	e063      	b.n	8004adc <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	212c      	movs	r1, #44	; 0x2c
 8004a1a:	fb01 f303 	mul.w	r3, r1, r3
 8004a1e:	4413      	add	r3, r2
 8004a20:	3361      	adds	r3, #97	; 0x61
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b06      	cmp	r3, #6
 8004a26:	d009      	beq.n	8004a3c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	212c      	movs	r1, #44	; 0x2c
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	3361      	adds	r3, #97	; 0x61
 8004a36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d14f      	bne.n	8004adc <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	212c      	movs	r1, #44	; 0x2c
 8004a42:	fb01 f303 	mul.w	r3, r1, r3
 8004a46:	4413      	add	r3, r2
 8004a48:	335c      	adds	r3, #92	; 0x5c
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	202c      	movs	r0, #44	; 0x2c
 8004a54:	fb00 f303 	mul.w	r3, r0, r3
 8004a58:	440b      	add	r3, r1
 8004a5a:	335c      	adds	r3, #92	; 0x5c
 8004a5c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	212c      	movs	r1, #44	; 0x2c
 8004a64:	fb01 f303 	mul.w	r3, r1, r3
 8004a68:	4413      	add	r3, r2
 8004a6a:	335c      	adds	r3, #92	; 0x5c
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d912      	bls.n	8004a98 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	212c      	movs	r1, #44	; 0x2c
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	335c      	adds	r3, #92	; 0x5c
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	212c      	movs	r1, #44	; 0x2c
 8004a8a:	fb01 f303 	mul.w	r3, r1, r3
 8004a8e:	4413      	add	r3, r2
 8004a90:	3360      	adds	r3, #96	; 0x60
 8004a92:	2204      	movs	r2, #4
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	e021      	b.n	8004adc <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	212c      	movs	r1, #44	; 0x2c
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3360      	adds	r3, #96	; 0x60
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ac0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ac8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae8:	461a      	mov	r2, r3
 8004aea:	2302      	movs	r3, #2
 8004aec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	b2d9      	uxtb	r1, r3
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	202c      	movs	r0, #44	; 0x2c
 8004af8:	fb00 f303 	mul.w	r3, r0, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	3360      	adds	r3, #96	; 0x60
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7fe ffd7 	bl	8003ab8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004b0a:	bf00      	nop
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b08a      	sub	sp, #40	; 0x28
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	0c5b      	lsrs	r3, r3, #17
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b46:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d004      	beq.n	8004b58 <HCD_RXQLVL_IRQHandler+0x46>
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b05      	cmp	r3, #5
 8004b52:	f000 80a9 	beq.w	8004ca8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004b56:	e0aa      	b.n	8004cae <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 80a6 	beq.w	8004cac <HCD_RXQLVL_IRQHandler+0x19a>
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	212c      	movs	r1, #44	; 0x2c
 8004b66:	fb01 f303 	mul.w	r3, r1, r3
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3344      	adds	r3, #68	; 0x44
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 809b 	beq.w	8004cac <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	212c      	movs	r1, #44	; 0x2c
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
 8004b80:	4413      	add	r3, r2
 8004b82:	3350      	adds	r3, #80	; 0x50
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	441a      	add	r2, r3
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	202c      	movs	r0, #44	; 0x2c
 8004b90:	fb00 f303 	mul.w	r3, r0, r3
 8004b94:	440b      	add	r3, r1
 8004b96:	334c      	adds	r3, #76	; 0x4c
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d87a      	bhi.n	8004c94 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6818      	ldr	r0, [r3, #0]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	212c      	movs	r1, #44	; 0x2c
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	4413      	add	r3, r2
 8004bae:	3344      	adds	r3, #68	; 0x44
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	b292      	uxth	r2, r2
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	f003 fabc 	bl	8008134 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	212c      	movs	r1, #44	; 0x2c
 8004bc2:	fb01 f303 	mul.w	r3, r1, r3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	3344      	adds	r3, #68	; 0x44
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	441a      	add	r2, r3
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	202c      	movs	r0, #44	; 0x2c
 8004bd6:	fb00 f303 	mul.w	r3, r0, r3
 8004bda:	440b      	add	r3, r1
 8004bdc:	3344      	adds	r3, #68	; 0x44
 8004bde:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	212c      	movs	r1, #44	; 0x2c
 8004be6:	fb01 f303 	mul.w	r3, r1, r3
 8004bea:	4413      	add	r3, r2
 8004bec:	3350      	adds	r3, #80	; 0x50
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	441a      	add	r2, r3
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	202c      	movs	r0, #44	; 0x2c
 8004bfa:	fb00 f303 	mul.w	r3, r0, r3
 8004bfe:	440b      	add	r3, r1
 8004c00:	3350      	adds	r3, #80	; 0x50
 8004c02:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	0cdb      	lsrs	r3, r3, #19
 8004c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c18:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	212c      	movs	r1, #44	; 0x2c
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	4413      	add	r3, r2
 8004c26:	3340      	adds	r3, #64	; 0x40
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d13c      	bne.n	8004cac <HCD_RXQLVL_IRQHandler+0x19a>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d039      	beq.n	8004cac <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c4e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c56:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c64:	461a      	mov	r2, r3
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	212c      	movs	r1, #44	; 0x2c
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	4413      	add	r3, r2
 8004c76:	3354      	adds	r3, #84	; 0x54
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	f083 0301 	eor.w	r3, r3, #1
 8004c7e:	b2d8      	uxtb	r0, r3
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	212c      	movs	r1, #44	; 0x2c
 8004c86:	fb01 f303 	mul.w	r3, r1, r3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	3354      	adds	r3, #84	; 0x54
 8004c8e:	4602      	mov	r2, r0
 8004c90:	701a      	strb	r2, [r3, #0]
      break;
 8004c92:	e00b      	b.n	8004cac <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	212c      	movs	r1, #44	; 0x2c
 8004c9a:	fb01 f303 	mul.w	r3, r1, r3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	3360      	adds	r3, #96	; 0x60
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	701a      	strb	r2, [r3, #0]
      break;
 8004ca6:	e001      	b.n	8004cac <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004ca8:	bf00      	nop
 8004caa:	e000      	b.n	8004cae <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004cac:	bf00      	nop
  }
}
 8004cae:	bf00      	nop
 8004cb0:	3728      	adds	r7, #40	; 0x28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b086      	sub	sp, #24
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ce2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d10b      	bne.n	8004d06 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d102      	bne.n	8004cfe <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7fe feb5 	bl	8003a68 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f043 0302 	orr.w	r3, r3, #2
 8004d04:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d132      	bne.n	8004d76 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f043 0308 	orr.w	r3, r3, #8
 8004d16:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d126      	bne.n	8004d70 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d113      	bne.n	8004d52 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004d30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d34:	d106      	bne.n	8004d44 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2102      	movs	r1, #2
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f003 fb33 	bl	80083a8 <USB_InitFSLSPClkSel>
 8004d42:	e011      	b.n	8004d68 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2101      	movs	r1, #1
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f003 fb2c 	bl	80083a8 <USB_InitFSLSPClkSel>
 8004d50:	e00a      	b.n	8004d68 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d106      	bne.n	8004d68 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d60:	461a      	mov	r2, r3
 8004d62:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004d66:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fe fe91 	bl	8003a90 <HAL_HCD_PortEnabled_Callback>
 8004d6e:	e002      	b.n	8004d76 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7fe fe97 	bl	8003aa4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d103      	bne.n	8004d88 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f043 0320 	orr.w	r3, r3, #32
 8004d86:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	6013      	str	r3, [r2, #0]
}
 8004d94:	bf00      	nop
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e12b      	b.n	8005006 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fc fb78 	bl	80014b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2224      	movs	r2, #36	; 0x24
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e00:	f001 f940 	bl	8006084 <HAL_RCC_GetPCLK1Freq>
 8004e04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	4a81      	ldr	r2, [pc, #516]	; (8005010 <HAL_I2C_Init+0x274>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d807      	bhi.n	8004e20 <HAL_I2C_Init+0x84>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4a80      	ldr	r2, [pc, #512]	; (8005014 <HAL_I2C_Init+0x278>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	bf94      	ite	ls
 8004e18:	2301      	movls	r3, #1
 8004e1a:	2300      	movhi	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	e006      	b.n	8004e2e <HAL_I2C_Init+0x92>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4a7d      	ldr	r2, [pc, #500]	; (8005018 <HAL_I2C_Init+0x27c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	bf94      	ite	ls
 8004e28:	2301      	movls	r3, #1
 8004e2a:	2300      	movhi	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e0e7      	b.n	8005006 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4a78      	ldr	r2, [pc, #480]	; (800501c <HAL_I2C_Init+0x280>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	0c9b      	lsrs	r3, r3, #18
 8004e40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	4a6a      	ldr	r2, [pc, #424]	; (8005010 <HAL_I2C_Init+0x274>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d802      	bhi.n	8004e70 <HAL_I2C_Init+0xd4>
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	e009      	b.n	8004e84 <HAL_I2C_Init+0xe8>
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e76:	fb02 f303 	mul.w	r3, r2, r3
 8004e7a:	4a69      	ldr	r2, [pc, #420]	; (8005020 <HAL_I2C_Init+0x284>)
 8004e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e80:	099b      	lsrs	r3, r3, #6
 8004e82:	3301      	adds	r3, #1
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	495c      	ldr	r1, [pc, #368]	; (8005010 <HAL_I2C_Init+0x274>)
 8004ea0:	428b      	cmp	r3, r1
 8004ea2:	d819      	bhi.n	8004ed8 <HAL_I2C_Init+0x13c>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	1e59      	subs	r1, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eb2:	1c59      	adds	r1, r3, #1
 8004eb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004eb8:	400b      	ands	r3, r1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <HAL_I2C_Init+0x138>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1e59      	subs	r1, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ecc:	3301      	adds	r3, #1
 8004ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed2:	e051      	b.n	8004f78 <HAL_I2C_Init+0x1dc>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	e04f      	b.n	8004f78 <HAL_I2C_Init+0x1dc>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d111      	bne.n	8004f04 <HAL_I2C_Init+0x168>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	1e58      	subs	r0, r3, #1
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6859      	ldr	r1, [r3, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	440b      	add	r3, r1
 8004eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	bf0c      	ite	eq
 8004efc:	2301      	moveq	r3, #1
 8004efe:	2300      	movne	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	e012      	b.n	8004f2a <HAL_I2C_Init+0x18e>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	1e58      	subs	r0, r3, #1
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6859      	ldr	r1, [r3, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	0099      	lsls	r1, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bf0c      	ite	eq
 8004f24:	2301      	moveq	r3, #1
 8004f26:	2300      	movne	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_I2C_Init+0x196>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e022      	b.n	8004f78 <HAL_I2C_Init+0x1dc>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10e      	bne.n	8004f58 <HAL_I2C_Init+0x1bc>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	1e58      	subs	r0, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6859      	ldr	r1, [r3, #4]
 8004f42:	460b      	mov	r3, r1
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	440b      	add	r3, r1
 8004f48:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f56:	e00f      	b.n	8004f78 <HAL_I2C_Init+0x1dc>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	1e58      	subs	r0, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6859      	ldr	r1, [r3, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	0099      	lsls	r1, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f6e:	3301      	adds	r3, #1
 8004f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	6809      	ldr	r1, [r1, #0]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69da      	ldr	r2, [r3, #28]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004fa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6911      	ldr	r1, [r2, #16]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	68d2      	ldr	r2, [r2, #12]
 8004fb2:	4311      	orrs	r1, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695a      	ldr	r2, [r3, #20]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	000186a0 	.word	0x000186a0
 8005014:	001e847f 	.word	0x001e847f
 8005018:	003d08ff 	.word	0x003d08ff
 800501c:	431bde83 	.word	0x431bde83
 8005020:	10624dd3 	.word	0x10624dd3

08005024 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b20      	cmp	r3, #32
 8005038:	d129      	bne.n	800508e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2224      	movs	r2, #36	; 0x24
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0201 	bic.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0210 	bic.w	r2, r2, #16
 8005060:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0201 	orr.w	r2, r2, #1
 8005080:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	e000      	b.n	8005090 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800508e:	2302      	movs	r3, #2
  }
}
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80050a6:	2300      	movs	r3, #0
 80050a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d12a      	bne.n	800510c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2224      	movs	r2, #36	; 0x24
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0201 	bic.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80050d6:	89fb      	ldrh	r3, [r7, #14]
 80050d8:	f023 030f 	bic.w	r3, r3, #15
 80050dc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	89fb      	ldrh	r3, [r7, #14]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	89fa      	ldrh	r2, [r7, #14]
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0201 	orr.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	e000      	b.n	800510e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
  }
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e0bf      	b.n	80052ae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fc faa2 	bl	800168c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800515e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6999      	ldr	r1, [r3, #24]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005174:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6899      	ldr	r1, [r3, #8]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	4b4a      	ldr	r3, [pc, #296]	; (80052b8 <HAL_LTDC_Init+0x19c>)
 8005190:	400b      	ands	r3, r1
 8005192:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	041b      	lsls	r3, r3, #16
 800519a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6899      	ldr	r1, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699a      	ldr	r2, [r3, #24]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68d9      	ldr	r1, [r3, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	4b3e      	ldr	r3, [pc, #248]	; (80052b8 <HAL_LTDC_Init+0x19c>)
 80051be:	400b      	ands	r3, r1
 80051c0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	041b      	lsls	r3, r3, #16
 80051c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68d9      	ldr	r1, [r3, #12]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1a      	ldr	r2, [r3, #32]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6919      	ldr	r1, [r3, #16]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	4b33      	ldr	r3, [pc, #204]	; (80052b8 <HAL_LTDC_Init+0x19c>)
 80051ec:	400b      	ands	r3, r1
 80051ee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	041b      	lsls	r3, r3, #16
 80051f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6919      	ldr	r1, [r3, #16]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6959      	ldr	r1, [r3, #20]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4b27      	ldr	r3, [pc, #156]	; (80052b8 <HAL_LTDC_Init+0x19c>)
 800521a:	400b      	ands	r3, r1
 800521c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005222:	041b      	lsls	r3, r3, #16
 8005224:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6959      	ldr	r1, [r3, #20]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800524c:	041b      	lsls	r3, r3, #16
 800524e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800525e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0206 	orr.w	r2, r2, #6
 800528a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699a      	ldr	r2, [r3, #24]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	f000f800 	.word	0xf000f800

080052bc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d023      	beq.n	8005326 <HAL_LTDC_IRQHandler+0x6a>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01e      	beq.n	8005326 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0204 	bic.w	r2, r2, #4
 80052f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2204      	movs	r2, #4
 80052fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005306:	f043 0201 	orr.w	r2, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2204      	movs	r2, #4
 8005314:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f86f 	bl	8005404 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d023      	beq.n	8005378 <HAL_LTDC_IRQHandler+0xbc>
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d01e      	beq.n	8005378 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0202 	bic.w	r2, r2, #2
 8005348:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2202      	movs	r2, #2
 8005350:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005358:	f043 0202 	orr.w	r2, r3, #2
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2204      	movs	r2, #4
 8005366:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f846 	bl	8005404 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d01b      	beq.n	80053ba <HAL_LTDC_IRQHandler+0xfe>
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d016      	beq.n	80053ba <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0201 	bic.w	r2, r2, #1
 800539a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2201      	movs	r2, #1
 80053a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f82f 	bl	8005418 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01b      	beq.n	80053fc <HAL_LTDC_IRQHandler+0x140>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d016      	beq.n	80053fc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0208 	bic.w	r2, r2, #8
 80053dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2208      	movs	r2, #8
 80053e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f818 	bl	800542c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005440:	b5b0      	push	{r4, r5, r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_LTDC_ConfigLayer+0x1a>
 8005456:	2302      	movs	r3, #2
 8005458:	e02c      	b.n	80054b4 <HAL_LTDC_ConfigLayer+0x74>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2202      	movs	r2, #2
 8005466:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2134      	movs	r1, #52	; 0x34
 8005470:	fb01 f303 	mul.w	r3, r1, r3
 8005474:	4413      	add	r3, r2
 8005476:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	4614      	mov	r4, r2
 800547e:	461d      	mov	r5, r3
 8005480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800548a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	68b9      	ldr	r1, [r7, #8]
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f811 	bl	80054bc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2201      	movs	r2, #1
 80054a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bdb0      	pop	{r4, r5, r7, pc}

080054bc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80054bc:	b480      	push	{r7}
 80054be:	b089      	sub	sp, #36	; 0x24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	0c1b      	lsrs	r3, r3, #16
 80054d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054d8:	4413      	add	r3, r2
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	01db      	lsls	r3, r3, #7
 80054e8:	4413      	add	r3, r2
 80054ea:	3384      	adds	r3, #132	; 0x84
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	6812      	ldr	r2, [r2, #0]
 80054f2:	4611      	mov	r1, r2
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	01d2      	lsls	r2, r2, #7
 80054f8:	440a      	add	r2, r1
 80054fa:	3284      	adds	r2, #132	; 0x84
 80054fc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005500:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	0c1b      	lsrs	r3, r3, #16
 800550e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005512:	4413      	add	r3, r2
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4619      	mov	r1, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	01db      	lsls	r3, r3, #7
 8005520:	440b      	add	r3, r1
 8005522:	3384      	adds	r3, #132	; 0x84
 8005524:	4619      	mov	r1, r3
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	4313      	orrs	r3, r2
 800552a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800553a:	4413      	add	r3, r2
 800553c:	041b      	lsls	r3, r3, #16
 800553e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	01db      	lsls	r3, r3, #7
 800554a:	4413      	add	r3, r2
 800554c:	3384      	adds	r3, #132	; 0x84
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	6812      	ldr	r2, [r2, #0]
 8005554:	4611      	mov	r1, r2
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	01d2      	lsls	r2, r2, #7
 800555a:	440a      	add	r2, r1
 800555c:	3284      	adds	r2, #132	; 0x84
 800555e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005562:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005572:	4413      	add	r3, r2
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4619      	mov	r1, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	01db      	lsls	r3, r3, #7
 8005580:	440b      	add	r3, r1
 8005582:	3384      	adds	r3, #132	; 0x84
 8005584:	4619      	mov	r1, r3
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4313      	orrs	r3, r2
 800558a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	01db      	lsls	r3, r3, #7
 8005596:	4413      	add	r3, r2
 8005598:	3384      	adds	r3, #132	; 0x84
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	6812      	ldr	r2, [r2, #0]
 80055a0:	4611      	mov	r1, r2
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	01d2      	lsls	r2, r2, #7
 80055a6:	440a      	add	r2, r1
 80055a8:	3284      	adds	r2, #132	; 0x84
 80055aa:	f023 0307 	bic.w	r3, r3, #7
 80055ae:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	461a      	mov	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	01db      	lsls	r3, r3, #7
 80055ba:	4413      	add	r3, r2
 80055bc:	3384      	adds	r3, #132	; 0x84
 80055be:	461a      	mov	r2, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80055cc:	021b      	lsls	r3, r3, #8
 80055ce:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80055d6:	041b      	lsls	r3, r3, #16
 80055d8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	061b      	lsls	r3, r3, #24
 80055e0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	01db      	lsls	r3, r3, #7
 80055ec:	4413      	add	r3, r2
 80055ee:	3384      	adds	r3, #132	; 0x84
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	01db      	lsls	r3, r3, #7
 80055fc:	4413      	add	r3, r2
 80055fe:	3384      	adds	r3, #132	; 0x84
 8005600:	461a      	mov	r2, r3
 8005602:	2300      	movs	r3, #0
 8005604:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800560c:	461a      	mov	r2, r3
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	431a      	orrs	r2, r3
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	431a      	orrs	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4619      	mov	r1, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	01db      	lsls	r3, r3, #7
 8005620:	440b      	add	r3, r1
 8005622:	3384      	adds	r3, #132	; 0x84
 8005624:	4619      	mov	r1, r3
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	4313      	orrs	r3, r2
 800562a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	461a      	mov	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	01db      	lsls	r3, r3, #7
 8005636:	4413      	add	r3, r2
 8005638:	3384      	adds	r3, #132	; 0x84
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	6812      	ldr	r2, [r2, #0]
 8005640:	4611      	mov	r1, r2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	01d2      	lsls	r2, r2, #7
 8005646:	440a      	add	r2, r1
 8005648:	3284      	adds	r2, #132	; 0x84
 800564a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800564e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	01db      	lsls	r3, r3, #7
 800565a:	4413      	add	r3, r2
 800565c:	3384      	adds	r3, #132	; 0x84
 800565e:	461a      	mov	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	01db      	lsls	r3, r3, #7
 8005670:	4413      	add	r3, r2
 8005672:	3384      	adds	r3, #132	; 0x84
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	6812      	ldr	r2, [r2, #0]
 800567a:	4611      	mov	r1, r2
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	01d2      	lsls	r2, r2, #7
 8005680:	440a      	add	r2, r1
 8005682:	3284      	adds	r2, #132	; 0x84
 8005684:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005688:	f023 0307 	bic.w	r3, r3, #7
 800568c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	69da      	ldr	r2, [r3, #28]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	68f9      	ldr	r1, [r7, #12]
 8005698:	6809      	ldr	r1, [r1, #0]
 800569a:	4608      	mov	r0, r1
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	01c9      	lsls	r1, r1, #7
 80056a0:	4401      	add	r1, r0
 80056a2:	3184      	adds	r1, #132	; 0x84
 80056a4:	4313      	orrs	r3, r2
 80056a6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	01db      	lsls	r3, r3, #7
 80056b2:	4413      	add	r3, r2
 80056b4:	3384      	adds	r3, #132	; 0x84
 80056b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	01db      	lsls	r3, r3, #7
 80056c2:	4413      	add	r3, r2
 80056c4:	3384      	adds	r3, #132	; 0x84
 80056c6:	461a      	mov	r2, r3
 80056c8:	2300      	movs	r3, #0
 80056ca:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	01db      	lsls	r3, r3, #7
 80056d6:	4413      	add	r3, r2
 80056d8:	3384      	adds	r3, #132	; 0x84
 80056da:	461a      	mov	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d102      	bne.n	80056f0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80056ea:	2304      	movs	r3, #4
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	e01b      	b.n	8005728 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d102      	bne.n	80056fe <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80056f8:	2303      	movs	r3, #3
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	e014      	b.n	8005728 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	2b04      	cmp	r3, #4
 8005704:	d00b      	beq.n	800571e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800570a:	2b02      	cmp	r3, #2
 800570c:	d007      	beq.n	800571e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005712:	2b03      	cmp	r3, #3
 8005714:	d003      	beq.n	800571e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800571a:	2b07      	cmp	r3, #7
 800571c:	d102      	bne.n	8005724 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800571e:	2302      	movs	r3, #2
 8005720:	61fb      	str	r3, [r7, #28]
 8005722:	e001      	b.n	8005728 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005724:	2301      	movs	r3, #1
 8005726:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	461a      	mov	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	01db      	lsls	r3, r3, #7
 8005732:	4413      	add	r3, r2
 8005734:	3384      	adds	r3, #132	; 0x84
 8005736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	6812      	ldr	r2, [r2, #0]
 800573c:	4611      	mov	r1, r2
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	01d2      	lsls	r2, r2, #7
 8005742:	440a      	add	r2, r1
 8005744:	3284      	adds	r2, #132	; 0x84
 8005746:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800574a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005750:	69fa      	ldr	r2, [r7, #28]
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	041a      	lsls	r2, r3, #16
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	6859      	ldr	r1, [r3, #4]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	1acb      	subs	r3, r1, r3
 8005762:	69f9      	ldr	r1, [r7, #28]
 8005764:	fb01 f303 	mul.w	r3, r1, r3
 8005768:	3303      	adds	r3, #3
 800576a:	68f9      	ldr	r1, [r7, #12]
 800576c:	6809      	ldr	r1, [r1, #0]
 800576e:	4608      	mov	r0, r1
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	01c9      	lsls	r1, r1, #7
 8005774:	4401      	add	r1, r0
 8005776:	3184      	adds	r1, #132	; 0x84
 8005778:	4313      	orrs	r3, r2
 800577a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	01db      	lsls	r3, r3, #7
 8005786:	4413      	add	r3, r2
 8005788:	3384      	adds	r3, #132	; 0x84
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	6812      	ldr	r2, [r2, #0]
 8005790:	4611      	mov	r1, r2
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	01d2      	lsls	r2, r2, #7
 8005796:	440a      	add	r2, r1
 8005798:	3284      	adds	r2, #132	; 0x84
 800579a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800579e:	f023 0307 	bic.w	r3, r3, #7
 80057a2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	461a      	mov	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	01db      	lsls	r3, r3, #7
 80057ae:	4413      	add	r3, r2
 80057b0:	3384      	adds	r3, #132	; 0x84
 80057b2:	461a      	mov	r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	01db      	lsls	r3, r3, #7
 80057c4:	4413      	add	r3, r2
 80057c6:	3384      	adds	r3, #132	; 0x84
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	6812      	ldr	r2, [r2, #0]
 80057ce:	4611      	mov	r1, r2
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	01d2      	lsls	r2, r2, #7
 80057d4:	440a      	add	r2, r1
 80057d6:	3284      	adds	r2, #132	; 0x84
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	6013      	str	r3, [r2, #0]
}
 80057de:	bf00      	nop
 80057e0:	3724      	adds	r7, #36	; 0x24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
	...

080057ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e264      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d075      	beq.n	80058f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800580a:	4ba3      	ldr	r3, [pc, #652]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 030c 	and.w	r3, r3, #12
 8005812:	2b04      	cmp	r3, #4
 8005814:	d00c      	beq.n	8005830 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005816:	4ba0      	ldr	r3, [pc, #640]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800581e:	2b08      	cmp	r3, #8
 8005820:	d112      	bne.n	8005848 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005822:	4b9d      	ldr	r3, [pc, #628]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800582e:	d10b      	bne.n	8005848 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005830:	4b99      	ldr	r3, [pc, #612]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d05b      	beq.n	80058f4 <HAL_RCC_OscConfig+0x108>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d157      	bne.n	80058f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e23f      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005850:	d106      	bne.n	8005860 <HAL_RCC_OscConfig+0x74>
 8005852:	4b91      	ldr	r3, [pc, #580]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a90      	ldr	r2, [pc, #576]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	e01d      	b.n	800589c <HAL_RCC_OscConfig+0xb0>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005868:	d10c      	bne.n	8005884 <HAL_RCC_OscConfig+0x98>
 800586a:	4b8b      	ldr	r3, [pc, #556]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a8a      	ldr	r2, [pc, #552]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	4b88      	ldr	r3, [pc, #544]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a87      	ldr	r2, [pc, #540]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 800587c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	e00b      	b.n	800589c <HAL_RCC_OscConfig+0xb0>
 8005884:	4b84      	ldr	r3, [pc, #528]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a83      	ldr	r2, [pc, #524]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 800588a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	4b81      	ldr	r3, [pc, #516]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a80      	ldr	r2, [pc, #512]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800589a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d013      	beq.n	80058cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a4:	f7fd f9cc 	bl	8002c40 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058ac:	f7fd f9c8 	bl	8002c40 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b64      	cmp	r3, #100	; 0x64
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e204      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058be:	4b76      	ldr	r3, [pc, #472]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0f0      	beq.n	80058ac <HAL_RCC_OscConfig+0xc0>
 80058ca:	e014      	b.n	80058f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058cc:	f7fd f9b8 	bl	8002c40 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058d4:	f7fd f9b4 	bl	8002c40 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b64      	cmp	r3, #100	; 0x64
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e1f0      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058e6:	4b6c      	ldr	r3, [pc, #432]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1f0      	bne.n	80058d4 <HAL_RCC_OscConfig+0xe8>
 80058f2:	e000      	b.n	80058f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d063      	beq.n	80059ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005902:	4b65      	ldr	r3, [pc, #404]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 030c 	and.w	r3, r3, #12
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00b      	beq.n	8005926 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800590e:	4b62      	ldr	r3, [pc, #392]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005916:	2b08      	cmp	r3, #8
 8005918:	d11c      	bne.n	8005954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800591a:	4b5f      	ldr	r3, [pc, #380]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d116      	bne.n	8005954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005926:	4b5c      	ldr	r3, [pc, #368]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <HAL_RCC_OscConfig+0x152>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d001      	beq.n	800593e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e1c4      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593e:	4b56      	ldr	r3, [pc, #344]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	4952      	ldr	r1, [pc, #328]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 800594e:	4313      	orrs	r3, r2
 8005950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005952:	e03a      	b.n	80059ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d020      	beq.n	800599e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800595c:	4b4f      	ldr	r3, [pc, #316]	; (8005a9c <HAL_RCC_OscConfig+0x2b0>)
 800595e:	2201      	movs	r2, #1
 8005960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005962:	f7fd f96d 	bl	8002c40 <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800596a:	f7fd f969 	bl	8002c40 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e1a5      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597c:	4b46      	ldr	r3, [pc, #280]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f0      	beq.n	800596a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005988:	4b43      	ldr	r3, [pc, #268]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	4940      	ldr	r1, [pc, #256]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005998:	4313      	orrs	r3, r2
 800599a:	600b      	str	r3, [r1, #0]
 800599c:	e015      	b.n	80059ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800599e:	4b3f      	ldr	r3, [pc, #252]	; (8005a9c <HAL_RCC_OscConfig+0x2b0>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a4:	f7fd f94c 	bl	8002c40 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ac:	f7fd f948 	bl	8002c40 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e184      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059be:	4b36      	ldr	r3, [pc, #216]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d030      	beq.n	8005a38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d016      	beq.n	8005a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059de:	4b30      	ldr	r3, [pc, #192]	; (8005aa0 <HAL_RCC_OscConfig+0x2b4>)
 80059e0:	2201      	movs	r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e4:	f7fd f92c 	bl	8002c40 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059ec:	f7fd f928 	bl	8002c40 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e164      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059fe:	4b26      	ldr	r3, [pc, #152]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0x200>
 8005a0a:	e015      	b.n	8005a38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a0c:	4b24      	ldr	r3, [pc, #144]	; (8005aa0 <HAL_RCC_OscConfig+0x2b4>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a12:	f7fd f915 	bl	8002c40 <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a18:	e008      	b.n	8005a2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a1a:	f7fd f911 	bl	8002c40 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d901      	bls.n	8005a2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e14d      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a2c:	4b1a      	ldr	r3, [pc, #104]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1f0      	bne.n	8005a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0304 	and.w	r3, r3, #4
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 80a0 	beq.w	8005b86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a46:	2300      	movs	r3, #0
 8005a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a4a:	4b13      	ldr	r3, [pc, #76]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10f      	bne.n	8005a76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a56:	2300      	movs	r3, #0
 8005a58:	60bb      	str	r3, [r7, #8]
 8005a5a:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	4a0e      	ldr	r2, [pc, #56]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a64:	6413      	str	r3, [r2, #64]	; 0x40
 8005a66:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <HAL_RCC_OscConfig+0x2ac>)
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a6e:	60bb      	str	r3, [r7, #8]
 8005a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a72:	2301      	movs	r3, #1
 8005a74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a76:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <HAL_RCC_OscConfig+0x2b8>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d121      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a82:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <HAL_RCC_OscConfig+0x2b8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a07      	ldr	r2, [pc, #28]	; (8005aa4 <HAL_RCC_OscConfig+0x2b8>)
 8005a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a8e:	f7fd f8d7 	bl	8002c40 <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a94:	e011      	b.n	8005aba <HAL_RCC_OscConfig+0x2ce>
 8005a96:	bf00      	nop
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	42470000 	.word	0x42470000
 8005aa0:	42470e80 	.word	0x42470e80
 8005aa4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa8:	f7fd f8ca 	bl	8002c40 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e106      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aba:	4b85      	ldr	r3, [pc, #532]	; (8005cd0 <HAL_RCC_OscConfig+0x4e4>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0f0      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d106      	bne.n	8005adc <HAL_RCC_OscConfig+0x2f0>
 8005ace:	4b81      	ldr	r3, [pc, #516]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	4a80      	ldr	r2, [pc, #512]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005ad4:	f043 0301 	orr.w	r3, r3, #1
 8005ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8005ada:	e01c      	b.n	8005b16 <HAL_RCC_OscConfig+0x32a>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	2b05      	cmp	r3, #5
 8005ae2:	d10c      	bne.n	8005afe <HAL_RCC_OscConfig+0x312>
 8005ae4:	4b7b      	ldr	r3, [pc, #492]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae8:	4a7a      	ldr	r2, [pc, #488]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005aea:	f043 0304 	orr.w	r3, r3, #4
 8005aee:	6713      	str	r3, [r2, #112]	; 0x70
 8005af0:	4b78      	ldr	r3, [pc, #480]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af4:	4a77      	ldr	r2, [pc, #476]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005af6:	f043 0301 	orr.w	r3, r3, #1
 8005afa:	6713      	str	r3, [r2, #112]	; 0x70
 8005afc:	e00b      	b.n	8005b16 <HAL_RCC_OscConfig+0x32a>
 8005afe:	4b75      	ldr	r3, [pc, #468]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b02:	4a74      	ldr	r2, [pc, #464]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	6713      	str	r3, [r2, #112]	; 0x70
 8005b0a:	4b72      	ldr	r3, [pc, #456]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0e:	4a71      	ldr	r2, [pc, #452]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005b10:	f023 0304 	bic.w	r3, r3, #4
 8005b14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d015      	beq.n	8005b4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b1e:	f7fd f88f 	bl	8002c40 <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b24:	e00a      	b.n	8005b3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b26:	f7fd f88b 	bl	8002c40 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e0c5      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b3c:	4b65      	ldr	r3, [pc, #404]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0ee      	beq.n	8005b26 <HAL_RCC_OscConfig+0x33a>
 8005b48:	e014      	b.n	8005b74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b4a:	f7fd f879 	bl	8002c40 <HAL_GetTick>
 8005b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b50:	e00a      	b.n	8005b68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b52:	f7fd f875 	bl	8002c40 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e0af      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b68:	4b5a      	ldr	r3, [pc, #360]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1ee      	bne.n	8005b52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d105      	bne.n	8005b86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b7a:	4b56      	ldr	r3, [pc, #344]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	4a55      	ldr	r2, [pc, #340]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 809b 	beq.w	8005cc6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b90:	4b50      	ldr	r3, [pc, #320]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 030c 	and.w	r3, r3, #12
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d05c      	beq.n	8005c56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d141      	bne.n	8005c28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba4:	4b4c      	ldr	r3, [pc, #304]	; (8005cd8 <HAL_RCC_OscConfig+0x4ec>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005baa:	f7fd f849 	bl	8002c40 <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bb2:	f7fd f845 	bl	8002c40 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e081      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc4:	4b43      	ldr	r3, [pc, #268]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1f0      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69da      	ldr	r2, [r3, #28]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	019b      	lsls	r3, r3, #6
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	085b      	lsrs	r3, r3, #1
 8005be8:	3b01      	subs	r3, #1
 8005bea:	041b      	lsls	r3, r3, #16
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	061b      	lsls	r3, r3, #24
 8005bf4:	4937      	ldr	r1, [pc, #220]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bfa:	4b37      	ldr	r3, [pc, #220]	; (8005cd8 <HAL_RCC_OscConfig+0x4ec>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c00:	f7fd f81e 	bl	8002c40 <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c08:	f7fd f81a 	bl	8002c40 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e056      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c1a:	4b2e      	ldr	r3, [pc, #184]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0f0      	beq.n	8005c08 <HAL_RCC_OscConfig+0x41c>
 8005c26:	e04e      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c28:	4b2b      	ldr	r3, [pc, #172]	; (8005cd8 <HAL_RCC_OscConfig+0x4ec>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c2e:	f7fd f807 	bl	8002c40 <HAL_GetTick>
 8005c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c34:	e008      	b.n	8005c48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c36:	f7fd f803 	bl	8002c40 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e03f      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c48:	4b22      	ldr	r3, [pc, #136]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1f0      	bne.n	8005c36 <HAL_RCC_OscConfig+0x44a>
 8005c54:	e037      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e032      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c62:	4b1c      	ldr	r3, [pc, #112]	; (8005cd4 <HAL_RCC_OscConfig+0x4e8>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d028      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d121      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d11a      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c92:	4013      	ands	r3, r2
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d111      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	085b      	lsrs	r3, r3, #1
 8005caa:	3b01      	subs	r3, #1
 8005cac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d107      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d001      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40007000 	.word	0x40007000
 8005cd4:	40023800 	.word	0x40023800
 8005cd8:	42470060 	.word	0x42470060

08005cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0cc      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cf0:	4b68      	ldr	r3, [pc, #416]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 030f 	and.w	r3, r3, #15
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d90c      	bls.n	8005d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfe:	4b65      	ldr	r3, [pc, #404]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d06:	4b63      	ldr	r3, [pc, #396]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d001      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e0b8      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d020      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d30:	4b59      	ldr	r3, [pc, #356]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	4a58      	ldr	r2, [pc, #352]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d48:	4b53      	ldr	r3, [pc, #332]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	4a52      	ldr	r2, [pc, #328]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d54:	4b50      	ldr	r3, [pc, #320]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	494d      	ldr	r1, [pc, #308]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d044      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d107      	bne.n	8005d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d7a:	4b47      	ldr	r3, [pc, #284]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d119      	bne.n	8005dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e07f      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d003      	beq.n	8005d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d107      	bne.n	8005daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d9a:	4b3f      	ldr	r3, [pc, #252]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e06f      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005daa:	4b3b      	ldr	r3, [pc, #236]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e067      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dba:	4b37      	ldr	r3, [pc, #220]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f023 0203 	bic.w	r2, r3, #3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	4934      	ldr	r1, [pc, #208]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dcc:	f7fc ff38 	bl	8002c40 <HAL_GetTick>
 8005dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd2:	e00a      	b.n	8005dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd4:	f7fc ff34 	bl	8002c40 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e04f      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dea:	4b2b      	ldr	r3, [pc, #172]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 020c 	and.w	r2, r3, #12
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d1eb      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dfc:	4b25      	ldr	r3, [pc, #148]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d20c      	bcs.n	8005e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0a:	4b22      	ldr	r3, [pc, #136]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e12:	4b20      	ldr	r3, [pc, #128]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d001      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e032      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d008      	beq.n	8005e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e30:	4b19      	ldr	r3, [pc, #100]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	4916      	ldr	r1, [pc, #88]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d009      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e4e:	4b12      	ldr	r3, [pc, #72]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	490e      	ldr	r1, [pc, #56]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e62:	f000 f821 	bl	8005ea8 <HAL_RCC_GetSysClockFreq>
 8005e66:	4602      	mov	r2, r0
 8005e68:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	091b      	lsrs	r3, r3, #4
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	490a      	ldr	r1, [pc, #40]	; (8005e9c <HAL_RCC_ClockConfig+0x1c0>)
 8005e74:	5ccb      	ldrb	r3, [r1, r3]
 8005e76:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7a:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e7e:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fc fb00 	bl	8002488 <HAL_InitTick>

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40023c00 	.word	0x40023c00
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	08009b00 	.word	0x08009b00
 8005ea0:	20000008 	.word	0x20000008
 8005ea4:	2000000c 	.word	0x2000000c

08005ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ea8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	607b      	str	r3, [r7, #4]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	2300      	movs	r3, #0
 8005eba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ec0:	4b67      	ldr	r3, [pc, #412]	; (8006060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f003 030c 	and.w	r3, r3, #12
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d00d      	beq.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	f200 80bd 	bhi.w	800604c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_RCC_GetSysClockFreq+0x34>
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d003      	beq.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005eda:	e0b7      	b.n	800604c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005edc:	4b61      	ldr	r3, [pc, #388]	; (8006064 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ede:	60bb      	str	r3, [r7, #8]
       break;
 8005ee0:	e0b7      	b.n	8006052 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ee2:	4b61      	ldr	r3, [pc, #388]	; (8006068 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005ee4:	60bb      	str	r3, [r7, #8]
      break;
 8005ee6:	e0b4      	b.n	8006052 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ee8:	4b5d      	ldr	r3, [pc, #372]	; (8006060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ef0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ef2:	4b5b      	ldr	r3, [pc, #364]	; (8006060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d04d      	beq.n	8005f9a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005efe:	4b58      	ldr	r3, [pc, #352]	; (8006060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	099b      	lsrs	r3, r3, #6
 8005f04:	461a      	mov	r2, r3
 8005f06:	f04f 0300 	mov.w	r3, #0
 8005f0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f0e:	f04f 0100 	mov.w	r1, #0
 8005f12:	ea02 0800 	and.w	r8, r2, r0
 8005f16:	ea03 0901 	and.w	r9, r3, r1
 8005f1a:	4640      	mov	r0, r8
 8005f1c:	4649      	mov	r1, r9
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	f04f 0300 	mov.w	r3, #0
 8005f26:	014b      	lsls	r3, r1, #5
 8005f28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f2c:	0142      	lsls	r2, r0, #5
 8005f2e:	4610      	mov	r0, r2
 8005f30:	4619      	mov	r1, r3
 8005f32:	ebb0 0008 	subs.w	r0, r0, r8
 8005f36:	eb61 0109 	sbc.w	r1, r1, r9
 8005f3a:	f04f 0200 	mov.w	r2, #0
 8005f3e:	f04f 0300 	mov.w	r3, #0
 8005f42:	018b      	lsls	r3, r1, #6
 8005f44:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f48:	0182      	lsls	r2, r0, #6
 8005f4a:	1a12      	subs	r2, r2, r0
 8005f4c:	eb63 0301 	sbc.w	r3, r3, r1
 8005f50:	f04f 0000 	mov.w	r0, #0
 8005f54:	f04f 0100 	mov.w	r1, #0
 8005f58:	00d9      	lsls	r1, r3, #3
 8005f5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f5e:	00d0      	lsls	r0, r2, #3
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	eb12 0208 	adds.w	r2, r2, r8
 8005f68:	eb43 0309 	adc.w	r3, r3, r9
 8005f6c:	f04f 0000 	mov.w	r0, #0
 8005f70:	f04f 0100 	mov.w	r1, #0
 8005f74:	0259      	lsls	r1, r3, #9
 8005f76:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005f7a:	0250      	lsls	r0, r2, #9
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4610      	mov	r0, r2
 8005f82:	4619      	mov	r1, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	461a      	mov	r2, r3
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	f7fa fe0c 	bl	8000ba8 <__aeabi_uldivmod>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4613      	mov	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	e04a      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f9a:	4b31      	ldr	r3, [pc, #196]	; (8006060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	099b      	lsrs	r3, r3, #6
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005faa:	f04f 0100 	mov.w	r1, #0
 8005fae:	ea02 0400 	and.w	r4, r2, r0
 8005fb2:	ea03 0501 	and.w	r5, r3, r1
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	4629      	mov	r1, r5
 8005fba:	f04f 0200 	mov.w	r2, #0
 8005fbe:	f04f 0300 	mov.w	r3, #0
 8005fc2:	014b      	lsls	r3, r1, #5
 8005fc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005fc8:	0142      	lsls	r2, r0, #5
 8005fca:	4610      	mov	r0, r2
 8005fcc:	4619      	mov	r1, r3
 8005fce:	1b00      	subs	r0, r0, r4
 8005fd0:	eb61 0105 	sbc.w	r1, r1, r5
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	018b      	lsls	r3, r1, #6
 8005fde:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005fe2:	0182      	lsls	r2, r0, #6
 8005fe4:	1a12      	subs	r2, r2, r0
 8005fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8005fea:	f04f 0000 	mov.w	r0, #0
 8005fee:	f04f 0100 	mov.w	r1, #0
 8005ff2:	00d9      	lsls	r1, r3, #3
 8005ff4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ff8:	00d0      	lsls	r0, r2, #3
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	1912      	adds	r2, r2, r4
 8006000:	eb45 0303 	adc.w	r3, r5, r3
 8006004:	f04f 0000 	mov.w	r0, #0
 8006008:	f04f 0100 	mov.w	r1, #0
 800600c:	0299      	lsls	r1, r3, #10
 800600e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006012:	0290      	lsls	r0, r2, #10
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4610      	mov	r0, r2
 800601a:	4619      	mov	r1, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	461a      	mov	r2, r3
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	f7fa fdc0 	bl	8000ba8 <__aeabi_uldivmod>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	4613      	mov	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006030:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	0c1b      	lsrs	r3, r3, #16
 8006036:	f003 0303 	and.w	r3, r3, #3
 800603a:	3301      	adds	r3, #1
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	fbb2 f3f3 	udiv	r3, r2, r3
 8006048:	60bb      	str	r3, [r7, #8]
      break;
 800604a:	e002      	b.n	8006052 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800604e:	60bb      	str	r3, [r7, #8]
      break;
 8006050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006052:	68bb      	ldr	r3, [r7, #8]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800605e:	bf00      	nop
 8006060:	40023800 	.word	0x40023800
 8006064:	00f42400 	.word	0x00f42400
 8006068:	007a1200 	.word	0x007a1200

0800606c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006070:	4b03      	ldr	r3, [pc, #12]	; (8006080 <HAL_RCC_GetHCLKFreq+0x14>)
 8006072:	681b      	ldr	r3, [r3, #0]
}
 8006074:	4618      	mov	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20000008 	.word	0x20000008

08006084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006088:	f7ff fff0 	bl	800606c <HAL_RCC_GetHCLKFreq>
 800608c:	4602      	mov	r2, r0
 800608e:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	0a9b      	lsrs	r3, r3, #10
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	4903      	ldr	r1, [pc, #12]	; (80060a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800609a:	5ccb      	ldrb	r3, [r1, r3]
 800609c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	40023800 	.word	0x40023800
 80060a8:	08009b10 	.word	0x08009b10

080060ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060b0:	f7ff ffdc 	bl	800606c <HAL_RCC_GetHCLKFreq>
 80060b4:	4602      	mov	r2, r0
 80060b6:	4b05      	ldr	r3, [pc, #20]	; (80060cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	0b5b      	lsrs	r3, r3, #13
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	4903      	ldr	r1, [pc, #12]	; (80060d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060c2:	5ccb      	ldrb	r3, [r1, r3]
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40023800 	.word	0x40023800
 80060d0:	08009b10 	.word	0x08009b10

080060d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	220f      	movs	r2, #15
 80060e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80060e4:	4b12      	ldr	r3, [pc, #72]	; (8006130 <HAL_RCC_GetClockConfig+0x5c>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 0203 	and.w	r2, r3, #3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80060f0:	4b0f      	ldr	r3, [pc, #60]	; (8006130 <HAL_RCC_GetClockConfig+0x5c>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80060fc:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <HAL_RCC_GetClockConfig+0x5c>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006108:	4b09      	ldr	r3, [pc, #36]	; (8006130 <HAL_RCC_GetClockConfig+0x5c>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	08db      	lsrs	r3, r3, #3
 800610e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006116:	4b07      	ldr	r3, [pc, #28]	; (8006134 <HAL_RCC_GetClockConfig+0x60>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 020f 	and.w	r2, r3, #15
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	601a      	str	r2, [r3, #0]
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	40023800 	.word	0x40023800
 8006134:	40023c00 	.word	0x40023c00

08006138 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10b      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800615c:	2b00      	cmp	r3, #0
 800615e:	d105      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006168:	2b00      	cmp	r3, #0
 800616a:	d075      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800616c:	4bad      	ldr	r3, [pc, #692]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006172:	f7fc fd65 	bl	8002c40 <HAL_GetTick>
 8006176:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006178:	e008      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800617a:	f7fc fd61 	bl	8002c40 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e18b      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800618c:	4ba6      	ldr	r3, [pc, #664]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1f0      	bne.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d009      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	019a      	lsls	r2, r3, #6
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	071b      	lsls	r3, r3, #28
 80061b0:	499d      	ldr	r1, [pc, #628]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01f      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80061c4:	4b98      	ldr	r3, [pc, #608]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ca:	0f1b      	lsrs	r3, r3, #28
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	019a      	lsls	r2, r3, #6
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	061b      	lsls	r3, r3, #24
 80061de:	431a      	orrs	r2, r3
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	071b      	lsls	r3, r3, #28
 80061e4:	4990      	ldr	r1, [pc, #576]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80061ec:	4b8e      	ldr	r3, [pc, #568]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061f2:	f023 021f 	bic.w	r2, r3, #31
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	498a      	ldr	r1, [pc, #552]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00d      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	019a      	lsls	r2, r3, #6
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	061b      	lsls	r3, r3, #24
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	071b      	lsls	r3, r3, #28
 8006224:	4980      	ldr	r1, [pc, #512]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800622c:	4b7d      	ldr	r3, [pc, #500]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800622e:	2201      	movs	r2, #1
 8006230:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006232:	f7fc fd05 	bl	8002c40 <HAL_GetTick>
 8006236:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006238:	e008      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800623a:	f7fc fd01 	bl	8002c40 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e12b      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800624c:	4b76      	ldr	r3, [pc, #472]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0f0      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d105      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800626c:	2b00      	cmp	r3, #0
 800626e:	d079      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006270:	4b6e      	ldr	r3, [pc, #440]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006276:	f7fc fce3 	bl	8002c40 <HAL_GetTick>
 800627a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800627c:	e008      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800627e:	f7fc fcdf 	bl	8002c40 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e109      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006290:	4b65      	ldr	r3, [pc, #404]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800629c:	d0ef      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0304 	and.w	r3, r3, #4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d020      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80062aa:	4b5f      	ldr	r3, [pc, #380]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b0:	0f1b      	lsrs	r3, r3, #28
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	019a      	lsls	r2, r3, #6
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	061b      	lsls	r3, r3, #24
 80062c4:	431a      	orrs	r2, r3
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	071b      	lsls	r3, r3, #28
 80062ca:	4957      	ldr	r1, [pc, #348]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80062d2:	4b55      	ldr	r3, [pc, #340]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	4950      	ldr	r1, [pc, #320]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0308 	and.w	r3, r3, #8
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01e      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80062f8:	4b4b      	ldr	r3, [pc, #300]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fe:	0e1b      	lsrs	r3, r3, #24
 8006300:	f003 030f 	and.w	r3, r3, #15
 8006304:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	019a      	lsls	r2, r3, #6
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	061b      	lsls	r3, r3, #24
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	071b      	lsls	r3, r3, #28
 8006318:	4943      	ldr	r1, [pc, #268]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006320:	4b41      	ldr	r3, [pc, #260]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006326:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	493e      	ldr	r1, [pc, #248]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006336:	4b3d      	ldr	r3, [pc, #244]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006338:	2201      	movs	r2, #1
 800633a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800633c:	f7fc fc80 	bl	8002c40 <HAL_GetTick>
 8006340:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006342:	e008      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006344:	f7fc fc7c 	bl	8002c40 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e0a6      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006356:	4b34      	ldr	r3, [pc, #208]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800635e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006362:	d1ef      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 808d 	beq.w	800648c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	4b2c      	ldr	r3, [pc, #176]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	4a2b      	ldr	r2, [pc, #172]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800637c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006380:	6413      	str	r3, [r2, #64]	; 0x40
 8006382:	4b29      	ldr	r3, [pc, #164]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800638e:	4b28      	ldr	r3, [pc, #160]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a27      	ldr	r2, [pc, #156]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006398:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800639a:	f7fc fc51 	bl	8002c40 <HAL_GetTick>
 800639e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063a0:	e008      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80063a2:	f7fc fc4d 	bl	8002c40 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d901      	bls.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e077      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063b4:	4b1e      	ldr	r3, [pc, #120]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0f0      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063c0:	4b19      	ldr	r3, [pc, #100]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80063c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d039      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d032      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063de:	4b12      	ldr	r3, [pc, #72]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80063e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063e8:	4b12      	ldr	r3, [pc, #72]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80063ea:	2201      	movs	r2, #1
 80063ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063ee:	4b11      	ldr	r3, [pc, #68]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80063f4:	4a0c      	ldr	r2, [pc, #48]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80063fa:	4b0b      	ldr	r3, [pc, #44]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80063fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b01      	cmp	r3, #1
 8006404:	d11e      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006406:	f7fc fc1b 	bl	8002c40 <HAL_GetTick>
 800640a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800640c:	e014      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800640e:	f7fc fc17 	bl	8002c40 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	f241 3288 	movw	r2, #5000	; 0x1388
 800641c:	4293      	cmp	r3, r2
 800641e:	d90b      	bls.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e03f      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006424:	42470068 	.word	0x42470068
 8006428:	40023800 	.word	0x40023800
 800642c:	42470070 	.word	0x42470070
 8006430:	40007000 	.word	0x40007000
 8006434:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006438:	4b1c      	ldr	r3, [pc, #112]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800643a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0e4      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800644c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006450:	d10d      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006452:	4b16      	ldr	r3, [pc, #88]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006466:	4911      	ldr	r1, [pc, #68]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006468:	4313      	orrs	r3, r2
 800646a:	608b      	str	r3, [r1, #8]
 800646c:	e005      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800646e:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	4a0e      	ldr	r2, [pc, #56]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006474:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006478:	6093      	str	r3, [r2, #8]
 800647a:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800647c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006486:	4909      	ldr	r1, [pc, #36]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006488:	4313      	orrs	r3, r2
 800648a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0310 	and.w	r3, r3, #16
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800649e:	4b04      	ldr	r3, [pc, #16]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80064a0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	40023800 	.word	0x40023800
 80064b0:	424711e0 	.word	0x424711e0

080064b4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e025      	b.n	8006514 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d106      	bne.n	80064e2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7fa fe51 	bl	8001184 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2202      	movs	r2, #2
 80064e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3304      	adds	r3, #4
 80064f2:	4619      	mov	r1, r3
 80064f4:	4610      	mov	r0, r2
 80064f6:	f001 fc47 	bl	8007d88 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6818      	ldr	r0, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	461a      	mov	r2, r3
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	f001 fcb2 	bl	8007e6e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e07b      	b.n	8006626 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	2b00      	cmp	r3, #0
 8006534:	d108      	bne.n	8006548 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800653e:	d009      	beq.n	8006554 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	61da      	str	r2, [r3, #28]
 8006546:	e005      	b.n	8006554 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fb fcf6 	bl	8001f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800658a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065c4:	431a      	orrs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d8:	ea42 0103 	orr.w	r1, r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	0c1b      	lsrs	r3, r3, #16
 80065f2:	f003 0104 	and.w	r1, r3, #4
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	f003 0210 	and.w	r2, r3, #16
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69da      	ldr	r2, [r3, #28]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006614:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e041      	b.n	80066c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7fc f8ab 	bl	80027b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2202      	movs	r2, #2
 800665e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3304      	adds	r3, #4
 800666a:	4619      	mov	r1, r3
 800666c:	4610      	mov	r0, r2
 800666e:	f000 fac1 	bl	8006bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d001      	beq.n	80066e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e04e      	b.n	8006782 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 0201 	orr.w	r2, r2, #1
 80066fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a23      	ldr	r2, [pc, #140]	; (8006790 <HAL_TIM_Base_Start_IT+0xc4>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d022      	beq.n	800674c <HAL_TIM_Base_Start_IT+0x80>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800670e:	d01d      	beq.n	800674c <HAL_TIM_Base_Start_IT+0x80>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a1f      	ldr	r2, [pc, #124]	; (8006794 <HAL_TIM_Base_Start_IT+0xc8>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d018      	beq.n	800674c <HAL_TIM_Base_Start_IT+0x80>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a1e      	ldr	r2, [pc, #120]	; (8006798 <HAL_TIM_Base_Start_IT+0xcc>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d013      	beq.n	800674c <HAL_TIM_Base_Start_IT+0x80>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a1c      	ldr	r2, [pc, #112]	; (800679c <HAL_TIM_Base_Start_IT+0xd0>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00e      	beq.n	800674c <HAL_TIM_Base_Start_IT+0x80>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a1b      	ldr	r2, [pc, #108]	; (80067a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d009      	beq.n	800674c <HAL_TIM_Base_Start_IT+0x80>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a19      	ldr	r2, [pc, #100]	; (80067a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d004      	beq.n	800674c <HAL_TIM_Base_Start_IT+0x80>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a18      	ldr	r2, [pc, #96]	; (80067a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d111      	bne.n	8006770 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b06      	cmp	r3, #6
 800675c:	d010      	beq.n	8006780 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f042 0201 	orr.w	r2, r2, #1
 800676c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800676e:	e007      	b.n	8006780 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40010000 	.word	0x40010000
 8006794:	40000400 	.word	0x40000400
 8006798:	40000800 	.word	0x40000800
 800679c:	40000c00 	.word	0x40000c00
 80067a0:	40010400 	.word	0x40010400
 80067a4:	40014000 	.word	0x40014000
 80067a8:	40001800 	.word	0x40001800

080067ac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0201 	bic.w	r2, r2, #1
 80067c2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6a1a      	ldr	r2, [r3, #32]
 80067ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80067ce:	4013      	ands	r3, r2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10f      	bne.n	80067f4 <HAL_TIM_Base_Stop_IT+0x48>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6a1a      	ldr	r2, [r3, #32]
 80067da:	f240 4344 	movw	r3, #1092	; 0x444
 80067de:	4013      	ands	r3, r2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d107      	bne.n	80067f4 <HAL_TIM_Base_Stop_IT+0x48>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0201 	bic.w	r2, r2, #1
 80067f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b02      	cmp	r3, #2
 800681e:	d122      	bne.n	8006866 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b02      	cmp	r3, #2
 800682c:	d11b      	bne.n	8006866 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f06f 0202 	mvn.w	r2, #2
 8006836:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	f003 0303 	and.w	r3, r3, #3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f9b2 	bl	8006bb6 <HAL_TIM_IC_CaptureCallback>
 8006852:	e005      	b.n	8006860 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f9a4 	bl	8006ba2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f9b5 	bl	8006bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b04      	cmp	r3, #4
 8006872:	d122      	bne.n	80068ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f003 0304 	and.w	r3, r3, #4
 800687e:	2b04      	cmp	r3, #4
 8006880:	d11b      	bne.n	80068ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f06f 0204 	mvn.w	r2, #4
 800688a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f988 	bl	8006bb6 <HAL_TIM_IC_CaptureCallback>
 80068a6:	e005      	b.n	80068b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f97a 	bl	8006ba2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f98b 	bl	8006bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	f003 0308 	and.w	r3, r3, #8
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d122      	bne.n	800690e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f003 0308 	and.w	r3, r3, #8
 80068d2:	2b08      	cmp	r3, #8
 80068d4:	d11b      	bne.n	800690e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f06f 0208 	mvn.w	r2, #8
 80068de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2204      	movs	r2, #4
 80068e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	f003 0303 	and.w	r3, r3, #3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f95e 	bl	8006bb6 <HAL_TIM_IC_CaptureCallback>
 80068fa:	e005      	b.n	8006908 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f950 	bl	8006ba2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f961 	bl	8006bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	f003 0310 	and.w	r3, r3, #16
 8006918:	2b10      	cmp	r3, #16
 800691a:	d122      	bne.n	8006962 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f003 0310 	and.w	r3, r3, #16
 8006926:	2b10      	cmp	r3, #16
 8006928:	d11b      	bne.n	8006962 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f06f 0210 	mvn.w	r2, #16
 8006932:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2208      	movs	r2, #8
 8006938:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f934 	bl	8006bb6 <HAL_TIM_IC_CaptureCallback>
 800694e:	e005      	b.n	800695c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f926 	bl	8006ba2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f937 	bl	8006bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b01      	cmp	r3, #1
 800696e:	d10e      	bne.n	800698e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b01      	cmp	r3, #1
 800697c:	d107      	bne.n	800698e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f06f 0201 	mvn.w	r2, #1
 8006986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7fb f917 	bl	8001bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006998:	2b80      	cmp	r3, #128	; 0x80
 800699a:	d10e      	bne.n	80069ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a6:	2b80      	cmp	r3, #128	; 0x80
 80069a8:	d107      	bne.n	80069ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fadd 	bl	8006f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c4:	2b40      	cmp	r3, #64	; 0x40
 80069c6:	d10e      	bne.n	80069e6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d2:	2b40      	cmp	r3, #64	; 0x40
 80069d4:	d107      	bne.n	80069e6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f8fc 	bl	8006bde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	f003 0320 	and.w	r3, r3, #32
 80069f0:	2b20      	cmp	r3, #32
 80069f2:	d10e      	bne.n	8006a12 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	d107      	bne.n	8006a12 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f06f 0220 	mvn.w	r2, #32
 8006a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 faa7 	bl	8006f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a12:	bf00      	nop
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d101      	bne.n	8006a32 <HAL_TIM_ConfigClockSource+0x18>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	e0b3      	b.n	8006b9a <HAL_TIM_ConfigClockSource+0x180>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a50:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a58:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a6a:	d03e      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0xd0>
 8006a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a70:	f200 8087 	bhi.w	8006b82 <HAL_TIM_ConfigClockSource+0x168>
 8006a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a78:	f000 8085 	beq.w	8006b86 <HAL_TIM_ConfigClockSource+0x16c>
 8006a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a80:	d87f      	bhi.n	8006b82 <HAL_TIM_ConfigClockSource+0x168>
 8006a82:	2b70      	cmp	r3, #112	; 0x70
 8006a84:	d01a      	beq.n	8006abc <HAL_TIM_ConfigClockSource+0xa2>
 8006a86:	2b70      	cmp	r3, #112	; 0x70
 8006a88:	d87b      	bhi.n	8006b82 <HAL_TIM_ConfigClockSource+0x168>
 8006a8a:	2b60      	cmp	r3, #96	; 0x60
 8006a8c:	d050      	beq.n	8006b30 <HAL_TIM_ConfigClockSource+0x116>
 8006a8e:	2b60      	cmp	r3, #96	; 0x60
 8006a90:	d877      	bhi.n	8006b82 <HAL_TIM_ConfigClockSource+0x168>
 8006a92:	2b50      	cmp	r3, #80	; 0x50
 8006a94:	d03c      	beq.n	8006b10 <HAL_TIM_ConfigClockSource+0xf6>
 8006a96:	2b50      	cmp	r3, #80	; 0x50
 8006a98:	d873      	bhi.n	8006b82 <HAL_TIM_ConfigClockSource+0x168>
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	d058      	beq.n	8006b50 <HAL_TIM_ConfigClockSource+0x136>
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	d86f      	bhi.n	8006b82 <HAL_TIM_ConfigClockSource+0x168>
 8006aa2:	2b30      	cmp	r3, #48	; 0x30
 8006aa4:	d064      	beq.n	8006b70 <HAL_TIM_ConfigClockSource+0x156>
 8006aa6:	2b30      	cmp	r3, #48	; 0x30
 8006aa8:	d86b      	bhi.n	8006b82 <HAL_TIM_ConfigClockSource+0x168>
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d060      	beq.n	8006b70 <HAL_TIM_ConfigClockSource+0x156>
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d867      	bhi.n	8006b82 <HAL_TIM_ConfigClockSource+0x168>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d05c      	beq.n	8006b70 <HAL_TIM_ConfigClockSource+0x156>
 8006ab6:	2b10      	cmp	r3, #16
 8006ab8:	d05a      	beq.n	8006b70 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006aba:	e062      	b.n	8006b82 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6818      	ldr	r0, [r3, #0]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	6899      	ldr	r1, [r3, #8]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f000 f9ac 	bl	8006e28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ade:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	609a      	str	r2, [r3, #8]
      break;
 8006ae8:	e04e      	b.n	8006b88 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6818      	ldr	r0, [r3, #0]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	6899      	ldr	r1, [r3, #8]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f000 f995 	bl	8006e28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b0c:	609a      	str	r2, [r3, #8]
      break;
 8006b0e:	e03b      	b.n	8006b88 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6818      	ldr	r0, [r3, #0]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	6859      	ldr	r1, [r3, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	f000 f909 	bl	8006d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2150      	movs	r1, #80	; 0x50
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 f962 	bl	8006df2 <TIM_ITRx_SetConfig>
      break;
 8006b2e:	e02b      	b.n	8006b88 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	6859      	ldr	r1, [r3, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	f000 f928 	bl	8006d92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2160      	movs	r1, #96	; 0x60
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 f952 	bl	8006df2 <TIM_ITRx_SetConfig>
      break;
 8006b4e:	e01b      	b.n	8006b88 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6818      	ldr	r0, [r3, #0]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	6859      	ldr	r1, [r3, #4]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	f000 f8e9 	bl	8006d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2140      	movs	r1, #64	; 0x40
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 f942 	bl	8006df2 <TIM_ITRx_SetConfig>
      break;
 8006b6e:	e00b      	b.n	8006b88 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	f000 f939 	bl	8006df2 <TIM_ITRx_SetConfig>
        break;
 8006b80:	e002      	b.n	8006b88 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b82:	bf00      	nop
 8006b84:	e000      	b.n	8006b88 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
	...

08006bf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a40      	ldr	r2, [pc, #256]	; (8006d08 <TIM_Base_SetConfig+0x114>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d013      	beq.n	8006c34 <TIM_Base_SetConfig+0x40>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c12:	d00f      	beq.n	8006c34 <TIM_Base_SetConfig+0x40>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a3d      	ldr	r2, [pc, #244]	; (8006d0c <TIM_Base_SetConfig+0x118>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00b      	beq.n	8006c34 <TIM_Base_SetConfig+0x40>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a3c      	ldr	r2, [pc, #240]	; (8006d10 <TIM_Base_SetConfig+0x11c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d007      	beq.n	8006c34 <TIM_Base_SetConfig+0x40>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a3b      	ldr	r2, [pc, #236]	; (8006d14 <TIM_Base_SetConfig+0x120>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d003      	beq.n	8006c34 <TIM_Base_SetConfig+0x40>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a3a      	ldr	r2, [pc, #232]	; (8006d18 <TIM_Base_SetConfig+0x124>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d108      	bne.n	8006c46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a2f      	ldr	r2, [pc, #188]	; (8006d08 <TIM_Base_SetConfig+0x114>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d02b      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c54:	d027      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a2c      	ldr	r2, [pc, #176]	; (8006d0c <TIM_Base_SetConfig+0x118>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d023      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a2b      	ldr	r2, [pc, #172]	; (8006d10 <TIM_Base_SetConfig+0x11c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d01f      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a2a      	ldr	r2, [pc, #168]	; (8006d14 <TIM_Base_SetConfig+0x120>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d01b      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a29      	ldr	r2, [pc, #164]	; (8006d18 <TIM_Base_SetConfig+0x124>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d017      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a28      	ldr	r2, [pc, #160]	; (8006d1c <TIM_Base_SetConfig+0x128>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d013      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a27      	ldr	r2, [pc, #156]	; (8006d20 <TIM_Base_SetConfig+0x12c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d00f      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a26      	ldr	r2, [pc, #152]	; (8006d24 <TIM_Base_SetConfig+0x130>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d00b      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a25      	ldr	r2, [pc, #148]	; (8006d28 <TIM_Base_SetConfig+0x134>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d007      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a24      	ldr	r2, [pc, #144]	; (8006d2c <TIM_Base_SetConfig+0x138>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d003      	beq.n	8006ca6 <TIM_Base_SetConfig+0xb2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a23      	ldr	r2, [pc, #140]	; (8006d30 <TIM_Base_SetConfig+0x13c>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d108      	bne.n	8006cb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a0a      	ldr	r2, [pc, #40]	; (8006d08 <TIM_Base_SetConfig+0x114>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d003      	beq.n	8006cec <TIM_Base_SetConfig+0xf8>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a0c      	ldr	r2, [pc, #48]	; (8006d18 <TIM_Base_SetConfig+0x124>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d103      	bne.n	8006cf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	691a      	ldr	r2, [r3, #16]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	615a      	str	r2, [r3, #20]
}
 8006cfa:	bf00      	nop
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	40010000 	.word	0x40010000
 8006d0c:	40000400 	.word	0x40000400
 8006d10:	40000800 	.word	0x40000800
 8006d14:	40000c00 	.word	0x40000c00
 8006d18:	40010400 	.word	0x40010400
 8006d1c:	40014000 	.word	0x40014000
 8006d20:	40014400 	.word	0x40014400
 8006d24:	40014800 	.word	0x40014800
 8006d28:	40001800 	.word	0x40001800
 8006d2c:	40001c00 	.word	0x40001c00
 8006d30:	40002000 	.word	0x40002000

08006d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	f023 0201 	bic.w	r2, r3, #1
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	011b      	lsls	r3, r3, #4
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f023 030a 	bic.w	r3, r3, #10
 8006d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	621a      	str	r2, [r3, #32]
}
 8006d86:	bf00      	nop
 8006d88:	371c      	adds	r7, #28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b087      	sub	sp, #28
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	f023 0210 	bic.w	r2, r3, #16
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	031b      	lsls	r3, r3, #12
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	621a      	str	r2, [r3, #32]
}
 8006de6:	bf00      	nop
 8006de8:	371c      	adds	r7, #28
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b085      	sub	sp, #20
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f043 0307 	orr.w	r3, r3, #7
 8006e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	609a      	str	r2, [r3, #8]
}
 8006e1c:	bf00      	nop
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	021a      	lsls	r2, r3, #8
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	609a      	str	r2, [r3, #8]
}
 8006e5c:	bf00      	nop
 8006e5e:	371c      	adds	r7, #28
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d101      	bne.n	8006e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	e05a      	b.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a21      	ldr	r2, [pc, #132]	; (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d022      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ecc:	d01d      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a1d      	ldr	r2, [pc, #116]	; (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d018      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1b      	ldr	r2, [pc, #108]	; (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d013      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a1a      	ldr	r2, [pc, #104]	; (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d00e      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a18      	ldr	r2, [pc, #96]	; (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d009      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a17      	ldr	r2, [pc, #92]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d004      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a15      	ldr	r2, [pc, #84]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d10c      	bne.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	40010000 	.word	0x40010000
 8006f48:	40000400 	.word	0x40000400
 8006f4c:	40000800 	.word	0x40000800
 8006f50:	40000c00 	.word	0x40000c00
 8006f54:	40010400 	.word	0x40010400
 8006f58:	40014000 	.word	0x40014000
 8006f5c:	40001800 	.word	0x40001800

08006f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e03f      	b.n	800701a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d106      	bne.n	8006fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7fb fc90 	bl	80028d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2224      	movs	r2, #36	; 0x24
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fd13 	bl	80079f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691a      	ldr	r2, [r3, #16]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	695a      	ldr	r2, [r3, #20]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2220      	movs	r2, #32
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2220      	movs	r2, #32
 8007014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b08a      	sub	sp, #40	; 0x28
 8007026:	af02      	add	r7, sp, #8
 8007028:	60f8      	str	r0, [r7, #12]
 800702a:	60b9      	str	r1, [r7, #8]
 800702c:	603b      	str	r3, [r7, #0]
 800702e:	4613      	mov	r3, r2
 8007030:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b20      	cmp	r3, #32
 8007040:	d17c      	bne.n	800713c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d002      	beq.n	800704e <HAL_UART_Transmit+0x2c>
 8007048:	88fb      	ldrh	r3, [r7, #6]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e075      	b.n	800713e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_UART_Transmit+0x3e>
 800705c:	2302      	movs	r3, #2
 800705e:	e06e      	b.n	800713e <HAL_UART_Transmit+0x11c>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2221      	movs	r2, #33	; 0x21
 8007072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007076:	f7fb fde3 	bl	8002c40 <HAL_GetTick>
 800707a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	88fa      	ldrh	r2, [r7, #6]
 8007080:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	88fa      	ldrh	r2, [r7, #6]
 8007086:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007090:	d108      	bne.n	80070a4 <HAL_UART_Transmit+0x82>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d104      	bne.n	80070a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	61bb      	str	r3, [r7, #24]
 80070a2:	e003      	b.n	80070ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070a8:	2300      	movs	r3, #0
 80070aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80070b4:	e02a      	b.n	800710c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2200      	movs	r2, #0
 80070be:	2180      	movs	r1, #128	; 0x80
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 fad5 	bl	8007670 <UART_WaitOnFlagUntilTimeout>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e036      	b.n	800713e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10b      	bne.n	80070ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	3302      	adds	r3, #2
 80070ea:	61bb      	str	r3, [r7, #24]
 80070ec:	e007      	b.n	80070fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	781a      	ldrb	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	3301      	adds	r3, #1
 80070fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007102:	b29b      	uxth	r3, r3
 8007104:	3b01      	subs	r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007110:	b29b      	uxth	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1cf      	bne.n	80070b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2200      	movs	r2, #0
 800711e:	2140      	movs	r1, #64	; 0x40
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 faa5 	bl	8007670 <UART_WaitOnFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e006      	b.n	800713e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2220      	movs	r2, #32
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	e000      	b.n	800713e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800713c:	2302      	movs	r3, #2
  }
}
 800713e:	4618      	mov	r0, r3
 8007140:	3720      	adds	r7, #32
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b08a      	sub	sp, #40	; 0x28
 800714a:	af02      	add	r7, sp, #8
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	603b      	str	r3, [r7, #0]
 8007152:	4613      	mov	r3, r2
 8007154:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b20      	cmp	r3, #32
 8007164:	f040 808c 	bne.w	8007280 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <HAL_UART_Receive+0x2e>
 800716e:	88fb      	ldrh	r3, [r7, #6]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e084      	b.n	8007282 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800717e:	2b01      	cmp	r3, #1
 8007180:	d101      	bne.n	8007186 <HAL_UART_Receive+0x40>
 8007182:	2302      	movs	r3, #2
 8007184:	e07d      	b.n	8007282 <HAL_UART_Receive+0x13c>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2222      	movs	r2, #34	; 0x22
 8007198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071a2:	f7fb fd4d 	bl	8002c40 <HAL_GetTick>
 80071a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	88fa      	ldrh	r2, [r7, #6]
 80071ac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	88fa      	ldrh	r2, [r7, #6]
 80071b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071bc:	d108      	bne.n	80071d0 <HAL_UART_Receive+0x8a>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d104      	bne.n	80071d0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80071c6:	2300      	movs	r3, #0
 80071c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	61bb      	str	r3, [r7, #24]
 80071ce:	e003      	b.n	80071d8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071d4:	2300      	movs	r3, #0
 80071d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80071e0:	e043      	b.n	800726a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2200      	movs	r2, #0
 80071ea:	2120      	movs	r1, #32
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 fa3f 	bl	8007670 <UART_WaitOnFlagUntilTimeout>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e042      	b.n	8007282 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10c      	bne.n	800721c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	b29b      	uxth	r3, r3
 800720a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720e:	b29a      	uxth	r2, r3
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	3302      	adds	r3, #2
 8007218:	61bb      	str	r3, [r7, #24]
 800721a:	e01f      	b.n	800725c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007224:	d007      	beq.n	8007236 <HAL_UART_Receive+0xf0>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10a      	bne.n	8007244 <HAL_UART_Receive+0xfe>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d106      	bne.n	8007244 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	b2da      	uxtb	r2, r3
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	701a      	strb	r2, [r3, #0]
 8007242:	e008      	b.n	8007256 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	b2db      	uxtb	r3, r3
 800724c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007250:	b2da      	uxtb	r2, r3
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	3301      	adds	r3, #1
 800725a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007260:	b29b      	uxth	r3, r3
 8007262:	3b01      	subs	r3, #1
 8007264:	b29a      	uxth	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800726e:	b29b      	uxth	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1b6      	bne.n	80071e2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2220      	movs	r2, #32
 8007278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	e000      	b.n	8007282 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007280:	2302      	movs	r3, #2
  }
}
 8007282:	4618      	mov	r0, r3
 8007284:	3720      	adds	r7, #32
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	60f8      	str	r0, [r7, #12]
 8007292:	60b9      	str	r1, [r7, #8]
 8007294:	4613      	mov	r3, r2
 8007296:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b20      	cmp	r3, #32
 80072a2:	d11d      	bne.n	80072e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <HAL_UART_Receive_IT+0x26>
 80072aa:	88fb      	ldrh	r3, [r7, #6]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e016      	b.n	80072e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d101      	bne.n	80072c2 <HAL_UART_Receive_IT+0x38>
 80072be:	2302      	movs	r3, #2
 80072c0:	e00f      	b.n	80072e2 <HAL_UART_Receive_IT+0x58>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80072d0:	88fb      	ldrh	r3, [r7, #6]
 80072d2:	461a      	mov	r2, r3
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 fa14 	bl	8007704 <UART_Start_Receive_IT>
 80072dc:	4603      	mov	r3, r0
 80072de:	e000      	b.n	80072e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80072e0:	2302      	movs	r3, #2
  }
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	; 0x28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800730c:	2300      	movs	r3, #0
 800730e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007310:	2300      	movs	r3, #0
 8007312:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	f003 030f 	and.w	r3, r3, #15
 800731a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10d      	bne.n	800733e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	f003 0320 	and.w	r3, r3, #32
 8007328:	2b00      	cmp	r3, #0
 800732a:	d008      	beq.n	800733e <HAL_UART_IRQHandler+0x52>
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	f003 0320 	and.w	r3, r3, #32
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fac7 	bl	80078ca <UART_Receive_IT>
      return;
 800733c:	e17c      	b.n	8007638 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 80b1 	beq.w	80074a8 <HAL_UART_IRQHandler+0x1bc>
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b00      	cmp	r3, #0
 800734e:	d105      	bne.n	800735c <HAL_UART_IRQHandler+0x70>
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 80a6 	beq.w	80074a8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00a      	beq.n	800737c <HAL_UART_IRQHandler+0x90>
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736c:	2b00      	cmp	r3, #0
 800736e:	d005      	beq.n	800737c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	f043 0201 	orr.w	r2, r3, #1
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	f003 0304 	and.w	r3, r3, #4
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <HAL_UART_IRQHandler+0xb0>
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	d005      	beq.n	800739c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	f043 0202 	orr.w	r2, r3, #2
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <HAL_UART_IRQHandler+0xd0>
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d005      	beq.n	80073bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	f043 0204 	orr.w	r2, r3, #4
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	f003 0308 	and.w	r3, r3, #8
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00f      	beq.n	80073e6 <HAL_UART_IRQHandler+0xfa>
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	f003 0320 	and.w	r3, r3, #32
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d104      	bne.n	80073da <HAL_UART_IRQHandler+0xee>
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d005      	beq.n	80073e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	f043 0208 	orr.w	r2, r3, #8
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 811f 	beq.w	800762e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	f003 0320 	and.w	r3, r3, #32
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d007      	beq.n	800740a <HAL_UART_IRQHandler+0x11e>
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	f003 0320 	and.w	r3, r3, #32
 8007400:	2b00      	cmp	r3, #0
 8007402:	d002      	beq.n	800740a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fa60 	bl	80078ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007414:	2b40      	cmp	r3, #64	; 0x40
 8007416:	bf0c      	ite	eq
 8007418:	2301      	moveq	r3, #1
 800741a:	2300      	movne	r3, #0
 800741c:	b2db      	uxtb	r3, r3
 800741e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007424:	f003 0308 	and.w	r3, r3, #8
 8007428:	2b00      	cmp	r3, #0
 800742a:	d102      	bne.n	8007432 <HAL_UART_IRQHandler+0x146>
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d031      	beq.n	8007496 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f9a0 	bl	8007778 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007442:	2b40      	cmp	r3, #64	; 0x40
 8007444:	d123      	bne.n	800748e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	695a      	ldr	r2, [r3, #20]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007454:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745a:	2b00      	cmp	r3, #0
 800745c:	d013      	beq.n	8007486 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007462:	4a77      	ldr	r2, [pc, #476]	; (8007640 <HAL_UART_IRQHandler+0x354>)
 8007464:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	4618      	mov	r0, r3
 800746c:	f7fb fd86 	bl	8002f7c <HAL_DMA_Abort_IT>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d016      	beq.n	80074a4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007480:	4610      	mov	r0, r2
 8007482:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007484:	e00e      	b.n	80074a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f8dc 	bl	8007644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800748c:	e00a      	b.n	80074a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f8d8 	bl	8007644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007494:	e006      	b.n	80074a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f8d4 	bl	8007644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80074a2:	e0c4      	b.n	800762e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074a4:	bf00      	nop
    return;
 80074a6:	e0c2      	b.n	800762e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	f040 80a2 	bne.w	80075f6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	f003 0310 	and.w	r3, r3, #16
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 809c 	beq.w	80075f6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	f003 0310 	and.w	r3, r3, #16
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 8096 	beq.w	80075f6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074ca:	2300      	movs	r3, #0
 80074cc:	60fb      	str	r3, [r7, #12]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	60fb      	str	r3, [r7, #12]
 80074de:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ea:	2b40      	cmp	r3, #64	; 0x40
 80074ec:	d14f      	bne.n	800758e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80074f8:	8a3b      	ldrh	r3, [r7, #16]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 8099 	beq.w	8007632 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007504:	8a3a      	ldrh	r2, [r7, #16]
 8007506:	429a      	cmp	r2, r3
 8007508:	f080 8093 	bcs.w	8007632 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	8a3a      	ldrh	r2, [r7, #16]
 8007510:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800751c:	d02b      	beq.n	8007576 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800752c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	695a      	ldr	r2, [r3, #20]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0201 	bic.w	r2, r2, #1
 800753c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	695a      	ldr	r2, [r3, #20]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800754c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2220      	movs	r2, #32
 8007552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68da      	ldr	r2, [r3, #12]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f022 0210 	bic.w	r2, r2, #16
 800756a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007570:	4618      	mov	r0, r3
 8007572:	f7fb fc93 	bl	8002e9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800757e:	b29b      	uxth	r3, r3
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	b29b      	uxth	r3, r3
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f866 	bl	8007658 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800758c:	e051      	b.n	8007632 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007596:	b29b      	uxth	r3, r3
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d047      	beq.n	8007636 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80075a6:	8a7b      	ldrh	r3, [r7, #18]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d044      	beq.n	8007636 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80075ba:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	695a      	ldr	r2, [r3, #20]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f022 0201 	bic.w	r2, r2, #1
 80075ca:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68da      	ldr	r2, [r3, #12]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0210 	bic.w	r2, r2, #16
 80075e8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075ea:	8a7b      	ldrh	r3, [r7, #18]
 80075ec:	4619      	mov	r1, r3
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f832 	bl	8007658 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80075f4:	e01f      	b.n	8007636 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d008      	beq.n	8007612 <HAL_UART_IRQHandler+0x326>
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f8f5 	bl	80077fa <UART_Transmit_IT>
    return;
 8007610:	e012      	b.n	8007638 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00d      	beq.n	8007638 <HAL_UART_IRQHandler+0x34c>
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007622:	2b00      	cmp	r3, #0
 8007624:	d008      	beq.n	8007638 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f937 	bl	800789a <UART_EndTransmit_IT>
    return;
 800762c:	e004      	b.n	8007638 <HAL_UART_IRQHandler+0x34c>
    return;
 800762e:	bf00      	nop
 8007630:	e002      	b.n	8007638 <HAL_UART_IRQHandler+0x34c>
      return;
 8007632:	bf00      	nop
 8007634:	e000      	b.n	8007638 <HAL_UART_IRQHandler+0x34c>
      return;
 8007636:	bf00      	nop
  }
}
 8007638:	3728      	adds	r7, #40	; 0x28
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	080077d3 	.word	0x080077d3

08007644 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	603b      	str	r3, [r7, #0]
 800767c:	4613      	mov	r3, r2
 800767e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007680:	e02c      	b.n	80076dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007688:	d028      	beq.n	80076dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d007      	beq.n	80076a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007690:	f7fb fad6 	bl	8002c40 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	69ba      	ldr	r2, [r7, #24]
 800769c:	429a      	cmp	r2, r3
 800769e:	d21d      	bcs.n	80076dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80076ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	695a      	ldr	r2, [r3, #20]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0201 	bic.w	r2, r2, #1
 80076be:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e00f      	b.n	80076fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	4013      	ands	r3, r2
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	bf0c      	ite	eq
 80076ec:	2301      	moveq	r3, #1
 80076ee:	2300      	movne	r3, #0
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	461a      	mov	r2, r3
 80076f4:	79fb      	ldrb	r3, [r7, #7]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d0c3      	beq.n	8007682 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	4613      	mov	r3, r2
 8007710:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	88fa      	ldrh	r2, [r7, #6]
 800771c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	88fa      	ldrh	r2, [r7, #6]
 8007722:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2222      	movs	r2, #34	; 0x22
 800772e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68da      	ldr	r2, [r3, #12]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007748:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	695a      	ldr	r2, [r3, #20]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f042 0201 	orr.w	r2, r2, #1
 8007758:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f042 0220 	orr.w	r2, r2, #32
 8007768:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68da      	ldr	r2, [r3, #12]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800778e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	695a      	ldr	r2, [r3, #20]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 0201 	bic.w	r2, r2, #1
 800779e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d107      	bne.n	80077b8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0210 	bic.w	r2, r2, #16
 80077b6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077c6:	bf00      	nop
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b084      	sub	sp, #16
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f7ff ff29 	bl	8007644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077f2:	bf00      	nop
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b085      	sub	sp, #20
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b21      	cmp	r3, #33	; 0x21
 800780c:	d13e      	bne.n	800788c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007816:	d114      	bne.n	8007842 <UART_Transmit_IT+0x48>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d110      	bne.n	8007842 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007834:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	1c9a      	adds	r2, r3, #2
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	621a      	str	r2, [r3, #32]
 8007840:	e008      	b.n	8007854 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	1c59      	adds	r1, r3, #1
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	6211      	str	r1, [r2, #32]
 800784c:	781a      	ldrb	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	b29b      	uxth	r3, r3
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	4619      	mov	r1, r3
 8007862:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10f      	bne.n	8007888 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007876:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68da      	ldr	r2, [r3, #12]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007886:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007888:	2300      	movs	r3, #0
 800788a:	e000      	b.n	800788e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800788c:	2302      	movs	r3, #2
  }
}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68da      	ldr	r2, [r3, #12]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7fb f8b2 	bl	8002a24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b22      	cmp	r3, #34	; 0x22
 80078dc:	f040 8087 	bne.w	80079ee <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e8:	d117      	bne.n	800791a <UART_Receive_IT+0x50>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d113      	bne.n	800791a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	b29b      	uxth	r3, r3
 8007904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007908:	b29a      	uxth	r2, r3
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007912:	1c9a      	adds	r2, r3, #2
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	629a      	str	r2, [r3, #40]	; 0x28
 8007918:	e026      	b.n	8007968 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007920:	2300      	movs	r3, #0
 8007922:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800792c:	d007      	beq.n	800793e <UART_Receive_IT+0x74>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10a      	bne.n	800794c <UART_Receive_IT+0x82>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d106      	bne.n	800794c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	b2da      	uxtb	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	e008      	b.n	800795e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007958:	b2da      	uxtb	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800796c:	b29b      	uxth	r3, r3
 800796e:	3b01      	subs	r3, #1
 8007970:	b29b      	uxth	r3, r3
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	4619      	mov	r1, r3
 8007976:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007978:	2b00      	cmp	r3, #0
 800797a:	d136      	bne.n	80079ea <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68da      	ldr	r2, [r3, #12]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 0220 	bic.w	r2, r2, #32
 800798a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68da      	ldr	r2, [r3, #12]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800799a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695a      	ldr	r2, [r3, #20]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0201 	bic.w	r2, r2, #1
 80079aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d10e      	bne.n	80079da <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 0210 	bic.w	r2, r2, #16
 80079ca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7ff fe40 	bl	8007658 <HAL_UARTEx_RxEventCallback>
 80079d8:	e002      	b.n	80079e0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7fb f82c 	bl	8002a38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	e002      	b.n	80079f0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	e000      	b.n	80079f0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80079ee:	2302      	movs	r3, #2
  }
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fc:	b09f      	sub	sp, #124	; 0x7c
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a0e:	68d9      	ldr	r1, [r3, #12]
 8007a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	ea40 0301 	orr.w	r3, r0, r1
 8007a18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a1c:	689a      	ldr	r2, [r3, #8]
 8007a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	431a      	orrs	r2, r3
 8007a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a3c:	f021 010c 	bic.w	r1, r1, #12
 8007a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a46:	430b      	orrs	r3, r1
 8007a48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	695b      	ldr	r3, [r3, #20]
 8007a50:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a56:	6999      	ldr	r1, [r3, #24]
 8007a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	ea40 0301 	orr.w	r3, r0, r1
 8007a60:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	4bc5      	ldr	r3, [pc, #788]	; (8007d7c <UART_SetConfig+0x384>)
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d004      	beq.n	8007a76 <UART_SetConfig+0x7e>
 8007a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	4bc3      	ldr	r3, [pc, #780]	; (8007d80 <UART_SetConfig+0x388>)
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d103      	bne.n	8007a7e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a76:	f7fe fb19 	bl	80060ac <HAL_RCC_GetPCLK2Freq>
 8007a7a:	6778      	str	r0, [r7, #116]	; 0x74
 8007a7c:	e002      	b.n	8007a84 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a7e:	f7fe fb01 	bl	8006084 <HAL_RCC_GetPCLK1Freq>
 8007a82:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a8c:	f040 80b6 	bne.w	8007bfc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a92:	461c      	mov	r4, r3
 8007a94:	f04f 0500 	mov.w	r5, #0
 8007a98:	4622      	mov	r2, r4
 8007a9a:	462b      	mov	r3, r5
 8007a9c:	1891      	adds	r1, r2, r2
 8007a9e:	6439      	str	r1, [r7, #64]	; 0x40
 8007aa0:	415b      	adcs	r3, r3
 8007aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8007aa4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007aa8:	1912      	adds	r2, r2, r4
 8007aaa:	eb45 0303 	adc.w	r3, r5, r3
 8007aae:	f04f 0000 	mov.w	r0, #0
 8007ab2:	f04f 0100 	mov.w	r1, #0
 8007ab6:	00d9      	lsls	r1, r3, #3
 8007ab8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007abc:	00d0      	lsls	r0, r2, #3
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	1911      	adds	r1, r2, r4
 8007ac4:	6639      	str	r1, [r7, #96]	; 0x60
 8007ac6:	416b      	adcs	r3, r5
 8007ac8:	667b      	str	r3, [r7, #100]	; 0x64
 8007aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f04f 0300 	mov.w	r3, #0
 8007ad4:	1891      	adds	r1, r2, r2
 8007ad6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ad8:	415b      	adcs	r3, r3
 8007ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007adc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ae0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007ae4:	f7f9 f860 	bl	8000ba8 <__aeabi_uldivmod>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4ba5      	ldr	r3, [pc, #660]	; (8007d84 <UART_SetConfig+0x38c>)
 8007aee:	fba3 2302 	umull	r2, r3, r3, r2
 8007af2:	095b      	lsrs	r3, r3, #5
 8007af4:	011e      	lsls	r6, r3, #4
 8007af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007af8:	461c      	mov	r4, r3
 8007afa:	f04f 0500 	mov.w	r5, #0
 8007afe:	4622      	mov	r2, r4
 8007b00:	462b      	mov	r3, r5
 8007b02:	1891      	adds	r1, r2, r2
 8007b04:	6339      	str	r1, [r7, #48]	; 0x30
 8007b06:	415b      	adcs	r3, r3
 8007b08:	637b      	str	r3, [r7, #52]	; 0x34
 8007b0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007b0e:	1912      	adds	r2, r2, r4
 8007b10:	eb45 0303 	adc.w	r3, r5, r3
 8007b14:	f04f 0000 	mov.w	r0, #0
 8007b18:	f04f 0100 	mov.w	r1, #0
 8007b1c:	00d9      	lsls	r1, r3, #3
 8007b1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b22:	00d0      	lsls	r0, r2, #3
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	1911      	adds	r1, r2, r4
 8007b2a:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b2c:	416b      	adcs	r3, r5
 8007b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	461a      	mov	r2, r3
 8007b36:	f04f 0300 	mov.w	r3, #0
 8007b3a:	1891      	adds	r1, r2, r2
 8007b3c:	62b9      	str	r1, [r7, #40]	; 0x28
 8007b3e:	415b      	adcs	r3, r3
 8007b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007b4a:	f7f9 f82d 	bl	8000ba8 <__aeabi_uldivmod>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4b8c      	ldr	r3, [pc, #560]	; (8007d84 <UART_SetConfig+0x38c>)
 8007b54:	fba3 1302 	umull	r1, r3, r3, r2
 8007b58:	095b      	lsrs	r3, r3, #5
 8007b5a:	2164      	movs	r1, #100	; 0x64
 8007b5c:	fb01 f303 	mul.w	r3, r1, r3
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	00db      	lsls	r3, r3, #3
 8007b64:	3332      	adds	r3, #50	; 0x32
 8007b66:	4a87      	ldr	r2, [pc, #540]	; (8007d84 <UART_SetConfig+0x38c>)
 8007b68:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6c:	095b      	lsrs	r3, r3, #5
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b74:	441e      	add	r6, r3
 8007b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f04f 0100 	mov.w	r1, #0
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	1894      	adds	r4, r2, r2
 8007b84:	623c      	str	r4, [r7, #32]
 8007b86:	415b      	adcs	r3, r3
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
 8007b8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b8e:	1812      	adds	r2, r2, r0
 8007b90:	eb41 0303 	adc.w	r3, r1, r3
 8007b94:	f04f 0400 	mov.w	r4, #0
 8007b98:	f04f 0500 	mov.w	r5, #0
 8007b9c:	00dd      	lsls	r5, r3, #3
 8007b9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ba2:	00d4      	lsls	r4, r2, #3
 8007ba4:	4622      	mov	r2, r4
 8007ba6:	462b      	mov	r3, r5
 8007ba8:	1814      	adds	r4, r2, r0
 8007baa:	653c      	str	r4, [r7, #80]	; 0x50
 8007bac:	414b      	adcs	r3, r1
 8007bae:	657b      	str	r3, [r7, #84]	; 0x54
 8007bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	f04f 0300 	mov.w	r3, #0
 8007bba:	1891      	adds	r1, r2, r2
 8007bbc:	61b9      	str	r1, [r7, #24]
 8007bbe:	415b      	adcs	r3, r3
 8007bc0:	61fb      	str	r3, [r7, #28]
 8007bc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bc6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007bca:	f7f8 ffed 	bl	8000ba8 <__aeabi_uldivmod>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4b6c      	ldr	r3, [pc, #432]	; (8007d84 <UART_SetConfig+0x38c>)
 8007bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8007bd8:	095b      	lsrs	r3, r3, #5
 8007bda:	2164      	movs	r1, #100	; 0x64
 8007bdc:	fb01 f303 	mul.w	r3, r1, r3
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	3332      	adds	r3, #50	; 0x32
 8007be6:	4a67      	ldr	r2, [pc, #412]	; (8007d84 <UART_SetConfig+0x38c>)
 8007be8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bec:	095b      	lsrs	r3, r3, #5
 8007bee:	f003 0207 	and.w	r2, r3, #7
 8007bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4432      	add	r2, r6
 8007bf8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007bfa:	e0b9      	b.n	8007d70 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bfe:	461c      	mov	r4, r3
 8007c00:	f04f 0500 	mov.w	r5, #0
 8007c04:	4622      	mov	r2, r4
 8007c06:	462b      	mov	r3, r5
 8007c08:	1891      	adds	r1, r2, r2
 8007c0a:	6139      	str	r1, [r7, #16]
 8007c0c:	415b      	adcs	r3, r3
 8007c0e:	617b      	str	r3, [r7, #20]
 8007c10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c14:	1912      	adds	r2, r2, r4
 8007c16:	eb45 0303 	adc.w	r3, r5, r3
 8007c1a:	f04f 0000 	mov.w	r0, #0
 8007c1e:	f04f 0100 	mov.w	r1, #0
 8007c22:	00d9      	lsls	r1, r3, #3
 8007c24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c28:	00d0      	lsls	r0, r2, #3
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	eb12 0804 	adds.w	r8, r2, r4
 8007c32:	eb43 0905 	adc.w	r9, r3, r5
 8007c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f04f 0100 	mov.w	r1, #0
 8007c40:	f04f 0200 	mov.w	r2, #0
 8007c44:	f04f 0300 	mov.w	r3, #0
 8007c48:	008b      	lsls	r3, r1, #2
 8007c4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c4e:	0082      	lsls	r2, r0, #2
 8007c50:	4640      	mov	r0, r8
 8007c52:	4649      	mov	r1, r9
 8007c54:	f7f8 ffa8 	bl	8000ba8 <__aeabi_uldivmod>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4b49      	ldr	r3, [pc, #292]	; (8007d84 <UART_SetConfig+0x38c>)
 8007c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c62:	095b      	lsrs	r3, r3, #5
 8007c64:	011e      	lsls	r6, r3, #4
 8007c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f04f 0100 	mov.w	r1, #0
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	1894      	adds	r4, r2, r2
 8007c74:	60bc      	str	r4, [r7, #8]
 8007c76:	415b      	adcs	r3, r3
 8007c78:	60fb      	str	r3, [r7, #12]
 8007c7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c7e:	1812      	adds	r2, r2, r0
 8007c80:	eb41 0303 	adc.w	r3, r1, r3
 8007c84:	f04f 0400 	mov.w	r4, #0
 8007c88:	f04f 0500 	mov.w	r5, #0
 8007c8c:	00dd      	lsls	r5, r3, #3
 8007c8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c92:	00d4      	lsls	r4, r2, #3
 8007c94:	4622      	mov	r2, r4
 8007c96:	462b      	mov	r3, r5
 8007c98:	1814      	adds	r4, r2, r0
 8007c9a:	64bc      	str	r4, [r7, #72]	; 0x48
 8007c9c:	414b      	adcs	r3, r1
 8007c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f04f 0100 	mov.w	r1, #0
 8007caa:	f04f 0200 	mov.w	r2, #0
 8007cae:	f04f 0300 	mov.w	r3, #0
 8007cb2:	008b      	lsls	r3, r1, #2
 8007cb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007cb8:	0082      	lsls	r2, r0, #2
 8007cba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007cbe:	f7f8 ff73 	bl	8000ba8 <__aeabi_uldivmod>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4b2f      	ldr	r3, [pc, #188]	; (8007d84 <UART_SetConfig+0x38c>)
 8007cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8007ccc:	095b      	lsrs	r3, r3, #5
 8007cce:	2164      	movs	r1, #100	; 0x64
 8007cd0:	fb01 f303 	mul.w	r3, r1, r3
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	3332      	adds	r3, #50	; 0x32
 8007cda:	4a2a      	ldr	r2, [pc, #168]	; (8007d84 <UART_SetConfig+0x38c>)
 8007cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce0:	095b      	lsrs	r3, r3, #5
 8007ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ce6:	441e      	add	r6, r3
 8007ce8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cea:	4618      	mov	r0, r3
 8007cec:	f04f 0100 	mov.w	r1, #0
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	1894      	adds	r4, r2, r2
 8007cf6:	603c      	str	r4, [r7, #0]
 8007cf8:	415b      	adcs	r3, r3
 8007cfa:	607b      	str	r3, [r7, #4]
 8007cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d00:	1812      	adds	r2, r2, r0
 8007d02:	eb41 0303 	adc.w	r3, r1, r3
 8007d06:	f04f 0400 	mov.w	r4, #0
 8007d0a:	f04f 0500 	mov.w	r5, #0
 8007d0e:	00dd      	lsls	r5, r3, #3
 8007d10:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d14:	00d4      	lsls	r4, r2, #3
 8007d16:	4622      	mov	r2, r4
 8007d18:	462b      	mov	r3, r5
 8007d1a:	eb12 0a00 	adds.w	sl, r2, r0
 8007d1e:	eb43 0b01 	adc.w	fp, r3, r1
 8007d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f04f 0100 	mov.w	r1, #0
 8007d2c:	f04f 0200 	mov.w	r2, #0
 8007d30:	f04f 0300 	mov.w	r3, #0
 8007d34:	008b      	lsls	r3, r1, #2
 8007d36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d3a:	0082      	lsls	r2, r0, #2
 8007d3c:	4650      	mov	r0, sl
 8007d3e:	4659      	mov	r1, fp
 8007d40:	f7f8 ff32 	bl	8000ba8 <__aeabi_uldivmod>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <UART_SetConfig+0x38c>)
 8007d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8007d4e:	095b      	lsrs	r3, r3, #5
 8007d50:	2164      	movs	r1, #100	; 0x64
 8007d52:	fb01 f303 	mul.w	r3, r1, r3
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	011b      	lsls	r3, r3, #4
 8007d5a:	3332      	adds	r3, #50	; 0x32
 8007d5c:	4a09      	ldr	r2, [pc, #36]	; (8007d84 <UART_SetConfig+0x38c>)
 8007d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d62:	095b      	lsrs	r3, r3, #5
 8007d64:	f003 020f 	and.w	r2, r3, #15
 8007d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4432      	add	r2, r6
 8007d6e:	609a      	str	r2, [r3, #8]
}
 8007d70:	bf00      	nop
 8007d72:	377c      	adds	r7, #124	; 0x7c
 8007d74:	46bd      	mov	sp, r7
 8007d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7a:	bf00      	nop
 8007d7c:	40011000 	.word	0x40011000
 8007d80:	40011400 	.word	0x40011400
 8007d84:	51eb851f 	.word	0x51eb851f

08007d88 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d029      	beq.n	8007df6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007dae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007db2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007dbc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007dc2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007dc8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007dce:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007dd4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007dda:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007de0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007de6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	e034      	b.n	8007e60 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e02:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e0c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007e12:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007e26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e2a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e34:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007e3a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007e40:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007e46:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007e4c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b087      	sub	sp, #28
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	60f8      	str	r0, [r7, #12]
 8007e76:	60b9      	str	r1, [r7, #8]
 8007e78:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d02e      	beq.n	8007ee6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007e94:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007ea4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007eae:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007eb8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007ec2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007ecc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	609a      	str	r2, [r3, #8]
 8007ee4:	e03b      	b.n	8007f5e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ef2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ef6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	3b01      	subs	r3, #1
 8007f06:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007f1c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007f2c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007f36:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007f40:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	371c      	adds	r7, #28
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	f107 001c 	add.w	r0, r7, #28
 8007f7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d122      	bne.n	8007fca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d105      	bne.n	8007fbe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f902 	bl	80081c8 <USB_CoreReset>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73fb      	strb	r3, [r7, #15]
 8007fc8:	e01a      	b.n	8008000 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f8f6 	bl	80081c8 <USB_CoreReset>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d106      	bne.n	8007ff4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	639a      	str	r2, [r3, #56]	; 0x38
 8007ff2:	e005      	b.n	8008000 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	2b01      	cmp	r3, #1
 8008004:	d10b      	bne.n	800801e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f043 0206 	orr.w	r2, r3, #6
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f043 0220 	orr.w	r2, r3, #32
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800801e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800802a:	b004      	add	sp, #16
 800802c:	4770      	bx	lr

0800802e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f023 0201 	bic.w	r2, r3, #1
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d106      	bne.n	800807c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	60da      	str	r2, [r3, #12]
 800807a:	e00b      	b.n	8008094 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d106      	bne.n	8008090 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	60da      	str	r2, [r3, #12]
 800808e:	e001      	b.n	8008094 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e003      	b.n	800809c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008094:	2032      	movs	r0, #50	; 0x32
 8008096:	f7fa fddf 	bl	8002c58 <HAL_Delay>

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	019b      	lsls	r3, r3, #6
 80080b6:	f043 0220 	orr.w	r2, r3, #32
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3301      	adds	r3, #1
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4a09      	ldr	r2, [pc, #36]	; (80080ec <USB_FlushTxFifo+0x48>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d901      	bls.n	80080d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e006      	b.n	80080de <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	f003 0320 	and.w	r3, r3, #32
 80080d8:	2b20      	cmp	r3, #32
 80080da:	d0f0      	beq.n	80080be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	00030d40 	.word	0x00030d40

080080f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80080f8:	2300      	movs	r3, #0
 80080fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2210      	movs	r2, #16
 8008100:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3301      	adds	r3, #1
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4a09      	ldr	r2, [pc, #36]	; (8008130 <USB_FlushRxFifo+0x40>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d901      	bls.n	8008114 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e006      	b.n	8008122 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	f003 0310 	and.w	r3, r3, #16
 800811c:	2b10      	cmp	r3, #16
 800811e:	d0f0      	beq.n	8008102 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	00030d40 	.word	0x00030d40

08008134 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008134:	b480      	push	{r7}
 8008136:	b089      	sub	sp, #36	; 0x24
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4613      	mov	r3, r2
 8008140:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800814a:	88fb      	ldrh	r3, [r7, #6]
 800814c:	3303      	adds	r3, #3
 800814e:	089b      	lsrs	r3, r3, #2
 8008150:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008152:	2300      	movs	r3, #0
 8008154:	61bb      	str	r3, [r7, #24]
 8008156:	e00b      	b.n	8008170 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	601a      	str	r2, [r3, #0]
    pDest++;
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	3304      	adds	r3, #4
 8008168:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	3301      	adds	r3, #1
 800816e:	61bb      	str	r3, [r7, #24]
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	429a      	cmp	r2, r3
 8008176:	d3ef      	bcc.n	8008158 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008178:	69fb      	ldr	r3, [r7, #28]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3724      	adds	r7, #36	; 0x24
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008186:	b480      	push	{r7}
 8008188:	b085      	sub	sp, #20
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	4013      	ands	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800819e:	68fb      	ldr	r3, [r7, #12]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	f003 0301 	and.w	r3, r3, #1
}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3301      	adds	r3, #1
 80081d8:	60fb      	str	r3, [r7, #12]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	4a13      	ldr	r2, [pc, #76]	; (800822c <USB_CoreReset+0x64>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d901      	bls.n	80081e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e01b      	b.n	800821e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	daf2      	bge.n	80081d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	f043 0201 	orr.w	r2, r3, #1
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3301      	adds	r3, #1
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	4a09      	ldr	r2, [pc, #36]	; (800822c <USB_CoreReset+0x64>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d901      	bls.n	8008210 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e006      	b.n	800821e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b01      	cmp	r3, #1
 800821a:	d0f0      	beq.n	80081fe <USB_CoreReset+0x36>

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	00030d40 	.word	0x00030d40

08008230 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008230:	b084      	sub	sp, #16
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	f107 001c 	add.w	r0, r7, #28
 800823e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800824c:	461a      	mov	r2, r3
 800824e:	2300      	movs	r3, #0
 8008250:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008256:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008262:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800827a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827e:	2b00      	cmp	r3, #0
 8008280:	d018      	beq.n	80082b4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	2b01      	cmp	r3, #1
 8008286:	d10a      	bne.n	800829e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008296:	f043 0304 	orr.w	r3, r3, #4
 800829a:	6013      	str	r3, [r2, #0]
 800829c:	e014      	b.n	80082c8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082ac:	f023 0304 	bic.w	r3, r3, #4
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	e009      	b.n	80082c8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082c2:	f023 0304 	bic.w	r3, r3, #4
 80082c6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80082c8:	2110      	movs	r1, #16
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7ff feea 	bl	80080a4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff ff0d 	bl	80080f0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	e015      	b.n	8008308 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e8:	461a      	mov	r2, r3
 80082ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082ee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082fc:	461a      	mov	r2, r3
 80082fe:	2300      	movs	r3, #0
 8008300:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	3301      	adds	r3, #1
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	429a      	cmp	r2, r3
 800830e:	d3e5      	bcc.n	80082dc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008310:	2101      	movs	r1, #1
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f882 	bl	800841c <USB_DriveVbus>

  HAL_Delay(200U);
 8008318:	20c8      	movs	r0, #200	; 0xc8
 800831a:	f7fa fc9d 	bl	8002c58 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800832a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00b      	beq.n	8008350 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800833e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a14      	ldr	r2, [pc, #80]	; (8008394 <USB_HostInit+0x164>)
 8008344:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a13      	ldr	r2, [pc, #76]	; (8008398 <USB_HostInit+0x168>)
 800834a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800834e:	e009      	b.n	8008364 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2280      	movs	r2, #128	; 0x80
 8008354:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a10      	ldr	r2, [pc, #64]	; (800839c <USB_HostInit+0x16c>)
 800835a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a10      	ldr	r2, [pc, #64]	; (80083a0 <USB_HostInit+0x170>)
 8008360:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	2b00      	cmp	r3, #0
 8008368:	d105      	bne.n	8008376 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	f043 0210 	orr.w	r2, r3, #16
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	699a      	ldr	r2, [r3, #24]
 800837a:	4b0a      	ldr	r3, [pc, #40]	; (80083a4 <USB_HostInit+0x174>)
 800837c:	4313      	orrs	r3, r2
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800838e:	b004      	add	sp, #16
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	01000200 	.word	0x01000200
 8008398:	00e00300 	.word	0x00e00300
 800839c:	00600080 	.word	0x00600080
 80083a0:	004000e0 	.word	0x004000e0
 80083a4:	a3200008 	.word	0xa3200008

080083a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083c6:	f023 0303 	bic.w	r3, r3, #3
 80083ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	78fb      	ldrb	r3, [r7, #3]
 80083d6:	f003 0303 	and.w	r3, r3, #3
 80083da:	68f9      	ldr	r1, [r7, #12]
 80083dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80083e0:	4313      	orrs	r3, r2
 80083e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80083e4:	78fb      	ldrb	r3, [r7, #3]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d107      	bne.n	80083fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083f0:	461a      	mov	r2, r3
 80083f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80083f6:	6053      	str	r3, [r2, #4]
 80083f8:	e009      	b.n	800840e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80083fa:	78fb      	ldrb	r3, [r7, #3]
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d106      	bne.n	800840e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008406:	461a      	mov	r2, r3
 8008408:	f241 7370 	movw	r3, #6000	; 0x1770
 800840c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008440:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d109      	bne.n	8008460 <USB_DriveVbus+0x44>
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d106      	bne.n	8008460 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800845a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800845e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800846a:	d109      	bne.n	8008480 <USB_DriveVbus+0x64>
 800846c:	78fb      	ldrb	r3, [r7, #3]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d106      	bne.n	8008480 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800847a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800847e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800848e:	b480      	push	{r7}
 8008490:	b085      	sub	sp, #20
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	b29b      	uxth	r3, r3
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b089      	sub	sp, #36	; 0x24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80084c0:	78fb      	ldrb	r3, [r7, #3]
 80084c2:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	0c9b      	lsrs	r3, r3, #18
 80084d8:	f003 0303 	and.w	r3, r3, #3
 80084dc:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	0fdb      	lsrs	r3, r3, #31
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f003 0320 	and.w	r3, r3, #32
 80084fc:	2b20      	cmp	r3, #32
 80084fe:	d104      	bne.n	800850a <USB_HC_Halt+0x5a>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	e0e8      	b.n	80086dc <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <USB_HC_Halt+0x66>
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	2b02      	cmp	r3, #2
 8008514:	d173      	bne.n	80085fe <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	4413      	add	r3, r2
 800851e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	0151      	lsls	r1, r2, #5
 8008528:	69ba      	ldr	r2, [r7, #24]
 800852a:	440a      	add	r2, r1
 800852c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008530:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008534:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f003 0320 	and.w	r3, r3, #32
 800853e:	2b00      	cmp	r3, #0
 8008540:	f040 80cb 	bne.w	80086da <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d143      	bne.n	80085d8 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	4413      	add	r3, r2
 8008558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	0151      	lsls	r1, r2, #5
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	440a      	add	r2, r1
 8008566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800856a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800856e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	4413      	add	r3, r2
 8008578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	0151      	lsls	r1, r2, #5
 8008582:	69ba      	ldr	r2, [r7, #24]
 8008584:	440a      	add	r2, r1
 8008586:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800858a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800858e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	4413      	add	r3, r2
 8008598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	0151      	lsls	r1, r2, #5
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	440a      	add	r2, r1
 80085a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085ae:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	3301      	adds	r3, #1
 80085b4:	61fb      	str	r3, [r7, #28]
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085bc:	d81d      	bhi.n	80085fa <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	015a      	lsls	r2, r3, #5
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	4413      	add	r3, r2
 80085c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085d4:	d0ec      	beq.n	80085b0 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085d6:	e080      	b.n	80086da <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	0151      	lsls	r1, r2, #5
 80085ea:	69ba      	ldr	r2, [r7, #24]
 80085ec:	440a      	add	r2, r1
 80085ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085f6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085f8:	e06f      	b.n	80086da <USB_HC_Halt+0x22a>
            break;
 80085fa:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085fc:	e06d      	b.n	80086da <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	4413      	add	r3, r2
 8008606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	0151      	lsls	r1, r2, #5
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	440a      	add	r2, r1
 8008614:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008618:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800861c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d143      	bne.n	80086b6 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	4413      	add	r3, r2
 8008636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	697a      	ldr	r2, [r7, #20]
 800863e:	0151      	lsls	r1, r2, #5
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	440a      	add	r2, r1
 8008644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008648:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800864c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	015a      	lsls	r2, r3, #5
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	4413      	add	r3, r2
 8008656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	0151      	lsls	r1, r2, #5
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	440a      	add	r2, r1
 8008664:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008668:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800866c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	015a      	lsls	r2, r3, #5
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	4413      	add	r3, r2
 8008676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	0151      	lsls	r1, r2, #5
 8008680:	69ba      	ldr	r2, [r7, #24]
 8008682:	440a      	add	r2, r1
 8008684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008688:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800868c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	3301      	adds	r3, #1
 8008692:	61fb      	str	r3, [r7, #28]
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800869a:	d81d      	bhi.n	80086d8 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086b2:	d0ec      	beq.n	800868e <USB_HC_Halt+0x1de>
 80086b4:	e011      	b.n	80086da <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	015a      	lsls	r2, r3, #5
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	4413      	add	r3, r2
 80086be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	0151      	lsls	r1, r2, #5
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	440a      	add	r2, r1
 80086cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086d4:	6013      	str	r3, [r2, #0]
 80086d6:	e000      	b.n	80086da <USB_HC_Halt+0x22a>
          break;
 80086d8:	bf00      	nop
    }
  }

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3724      	adds	r7, #36	; 0x24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <__errno>:
 80086e8:	4b01      	ldr	r3, [pc, #4]	; (80086f0 <__errno+0x8>)
 80086ea:	6818      	ldr	r0, [r3, #0]
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	20000014 	.word	0x20000014

080086f4 <__libc_init_array>:
 80086f4:	b570      	push	{r4, r5, r6, lr}
 80086f6:	4d0d      	ldr	r5, [pc, #52]	; (800872c <__libc_init_array+0x38>)
 80086f8:	4c0d      	ldr	r4, [pc, #52]	; (8008730 <__libc_init_array+0x3c>)
 80086fa:	1b64      	subs	r4, r4, r5
 80086fc:	10a4      	asrs	r4, r4, #2
 80086fe:	2600      	movs	r6, #0
 8008700:	42a6      	cmp	r6, r4
 8008702:	d109      	bne.n	8008718 <__libc_init_array+0x24>
 8008704:	4d0b      	ldr	r5, [pc, #44]	; (8008734 <__libc_init_array+0x40>)
 8008706:	4c0c      	ldr	r4, [pc, #48]	; (8008738 <__libc_init_array+0x44>)
 8008708:	f001 f9a2 	bl	8009a50 <_init>
 800870c:	1b64      	subs	r4, r4, r5
 800870e:	10a4      	asrs	r4, r4, #2
 8008710:	2600      	movs	r6, #0
 8008712:	42a6      	cmp	r6, r4
 8008714:	d105      	bne.n	8008722 <__libc_init_array+0x2e>
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	f855 3b04 	ldr.w	r3, [r5], #4
 800871c:	4798      	blx	r3
 800871e:	3601      	adds	r6, #1
 8008720:	e7ee      	b.n	8008700 <__libc_init_array+0xc>
 8008722:	f855 3b04 	ldr.w	r3, [r5], #4
 8008726:	4798      	blx	r3
 8008728:	3601      	adds	r6, #1
 800872a:	e7f2      	b.n	8008712 <__libc_init_array+0x1e>
 800872c:	08009bb8 	.word	0x08009bb8
 8008730:	08009bb8 	.word	0x08009bb8
 8008734:	08009bb8 	.word	0x08009bb8
 8008738:	08009bbc 	.word	0x08009bbc

0800873c <memset>:
 800873c:	4402      	add	r2, r0
 800873e:	4603      	mov	r3, r0
 8008740:	4293      	cmp	r3, r2
 8008742:	d100      	bne.n	8008746 <memset+0xa>
 8008744:	4770      	bx	lr
 8008746:	f803 1b01 	strb.w	r1, [r3], #1
 800874a:	e7f9      	b.n	8008740 <memset+0x4>

0800874c <iprintf>:
 800874c:	b40f      	push	{r0, r1, r2, r3}
 800874e:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <iprintf+0x2c>)
 8008750:	b513      	push	{r0, r1, r4, lr}
 8008752:	681c      	ldr	r4, [r3, #0]
 8008754:	b124      	cbz	r4, 8008760 <iprintf+0x14>
 8008756:	69a3      	ldr	r3, [r4, #24]
 8008758:	b913      	cbnz	r3, 8008760 <iprintf+0x14>
 800875a:	4620      	mov	r0, r4
 800875c:	f000 fb24 	bl	8008da8 <__sinit>
 8008760:	ab05      	add	r3, sp, #20
 8008762:	9a04      	ldr	r2, [sp, #16]
 8008764:	68a1      	ldr	r1, [r4, #8]
 8008766:	9301      	str	r3, [sp, #4]
 8008768:	4620      	mov	r0, r4
 800876a:	f000 fcfd 	bl	8009168 <_vfiprintf_r>
 800876e:	b002      	add	sp, #8
 8008770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008774:	b004      	add	sp, #16
 8008776:	4770      	bx	lr
 8008778:	20000014 	.word	0x20000014

0800877c <_puts_r>:
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	460e      	mov	r6, r1
 8008780:	4605      	mov	r5, r0
 8008782:	b118      	cbz	r0, 800878c <_puts_r+0x10>
 8008784:	6983      	ldr	r3, [r0, #24]
 8008786:	b90b      	cbnz	r3, 800878c <_puts_r+0x10>
 8008788:	f000 fb0e 	bl	8008da8 <__sinit>
 800878c:	69ab      	ldr	r3, [r5, #24]
 800878e:	68ac      	ldr	r4, [r5, #8]
 8008790:	b913      	cbnz	r3, 8008798 <_puts_r+0x1c>
 8008792:	4628      	mov	r0, r5
 8008794:	f000 fb08 	bl	8008da8 <__sinit>
 8008798:	4b2c      	ldr	r3, [pc, #176]	; (800884c <_puts_r+0xd0>)
 800879a:	429c      	cmp	r4, r3
 800879c:	d120      	bne.n	80087e0 <_puts_r+0x64>
 800879e:	686c      	ldr	r4, [r5, #4]
 80087a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087a2:	07db      	lsls	r3, r3, #31
 80087a4:	d405      	bmi.n	80087b2 <_puts_r+0x36>
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	0598      	lsls	r0, r3, #22
 80087aa:	d402      	bmi.n	80087b2 <_puts_r+0x36>
 80087ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ae:	f000 fb99 	bl	8008ee4 <__retarget_lock_acquire_recursive>
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	0719      	lsls	r1, r3, #28
 80087b6:	d51d      	bpl.n	80087f4 <_puts_r+0x78>
 80087b8:	6923      	ldr	r3, [r4, #16]
 80087ba:	b1db      	cbz	r3, 80087f4 <_puts_r+0x78>
 80087bc:	3e01      	subs	r6, #1
 80087be:	68a3      	ldr	r3, [r4, #8]
 80087c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80087c4:	3b01      	subs	r3, #1
 80087c6:	60a3      	str	r3, [r4, #8]
 80087c8:	bb39      	cbnz	r1, 800881a <_puts_r+0x9e>
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	da38      	bge.n	8008840 <_puts_r+0xc4>
 80087ce:	4622      	mov	r2, r4
 80087d0:	210a      	movs	r1, #10
 80087d2:	4628      	mov	r0, r5
 80087d4:	f000 f90e 	bl	80089f4 <__swbuf_r>
 80087d8:	3001      	adds	r0, #1
 80087da:	d011      	beq.n	8008800 <_puts_r+0x84>
 80087dc:	250a      	movs	r5, #10
 80087de:	e011      	b.n	8008804 <_puts_r+0x88>
 80087e0:	4b1b      	ldr	r3, [pc, #108]	; (8008850 <_puts_r+0xd4>)
 80087e2:	429c      	cmp	r4, r3
 80087e4:	d101      	bne.n	80087ea <_puts_r+0x6e>
 80087e6:	68ac      	ldr	r4, [r5, #8]
 80087e8:	e7da      	b.n	80087a0 <_puts_r+0x24>
 80087ea:	4b1a      	ldr	r3, [pc, #104]	; (8008854 <_puts_r+0xd8>)
 80087ec:	429c      	cmp	r4, r3
 80087ee:	bf08      	it	eq
 80087f0:	68ec      	ldreq	r4, [r5, #12]
 80087f2:	e7d5      	b.n	80087a0 <_puts_r+0x24>
 80087f4:	4621      	mov	r1, r4
 80087f6:	4628      	mov	r0, r5
 80087f8:	f000 f94e 	bl	8008a98 <__swsetup_r>
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d0dd      	beq.n	80087bc <_puts_r+0x40>
 8008800:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008804:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008806:	07da      	lsls	r2, r3, #31
 8008808:	d405      	bmi.n	8008816 <_puts_r+0x9a>
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	059b      	lsls	r3, r3, #22
 800880e:	d402      	bmi.n	8008816 <_puts_r+0x9a>
 8008810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008812:	f000 fb68 	bl	8008ee6 <__retarget_lock_release_recursive>
 8008816:	4628      	mov	r0, r5
 8008818:	bd70      	pop	{r4, r5, r6, pc}
 800881a:	2b00      	cmp	r3, #0
 800881c:	da04      	bge.n	8008828 <_puts_r+0xac>
 800881e:	69a2      	ldr	r2, [r4, #24]
 8008820:	429a      	cmp	r2, r3
 8008822:	dc06      	bgt.n	8008832 <_puts_r+0xb6>
 8008824:	290a      	cmp	r1, #10
 8008826:	d004      	beq.n	8008832 <_puts_r+0xb6>
 8008828:	6823      	ldr	r3, [r4, #0]
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	6022      	str	r2, [r4, #0]
 800882e:	7019      	strb	r1, [r3, #0]
 8008830:	e7c5      	b.n	80087be <_puts_r+0x42>
 8008832:	4622      	mov	r2, r4
 8008834:	4628      	mov	r0, r5
 8008836:	f000 f8dd 	bl	80089f4 <__swbuf_r>
 800883a:	3001      	adds	r0, #1
 800883c:	d1bf      	bne.n	80087be <_puts_r+0x42>
 800883e:	e7df      	b.n	8008800 <_puts_r+0x84>
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	250a      	movs	r5, #10
 8008844:	1c5a      	adds	r2, r3, #1
 8008846:	6022      	str	r2, [r4, #0]
 8008848:	701d      	strb	r5, [r3, #0]
 800884a:	e7db      	b.n	8008804 <_puts_r+0x88>
 800884c:	08009b3c 	.word	0x08009b3c
 8008850:	08009b5c 	.word	0x08009b5c
 8008854:	08009b1c 	.word	0x08009b1c

08008858 <puts>:
 8008858:	4b02      	ldr	r3, [pc, #8]	; (8008864 <puts+0xc>)
 800885a:	4601      	mov	r1, r0
 800885c:	6818      	ldr	r0, [r3, #0]
 800885e:	f7ff bf8d 	b.w	800877c <_puts_r>
 8008862:	bf00      	nop
 8008864:	20000014 	.word	0x20000014

08008868 <setvbuf>:
 8008868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800886c:	461d      	mov	r5, r3
 800886e:	4b5d      	ldr	r3, [pc, #372]	; (80089e4 <setvbuf+0x17c>)
 8008870:	681f      	ldr	r7, [r3, #0]
 8008872:	4604      	mov	r4, r0
 8008874:	460e      	mov	r6, r1
 8008876:	4690      	mov	r8, r2
 8008878:	b127      	cbz	r7, 8008884 <setvbuf+0x1c>
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	b913      	cbnz	r3, 8008884 <setvbuf+0x1c>
 800887e:	4638      	mov	r0, r7
 8008880:	f000 fa92 	bl	8008da8 <__sinit>
 8008884:	4b58      	ldr	r3, [pc, #352]	; (80089e8 <setvbuf+0x180>)
 8008886:	429c      	cmp	r4, r3
 8008888:	d167      	bne.n	800895a <setvbuf+0xf2>
 800888a:	687c      	ldr	r4, [r7, #4]
 800888c:	f1b8 0f02 	cmp.w	r8, #2
 8008890:	d006      	beq.n	80088a0 <setvbuf+0x38>
 8008892:	f1b8 0f01 	cmp.w	r8, #1
 8008896:	f200 809f 	bhi.w	80089d8 <setvbuf+0x170>
 800889a:	2d00      	cmp	r5, #0
 800889c:	f2c0 809c 	blt.w	80089d8 <setvbuf+0x170>
 80088a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088a2:	07db      	lsls	r3, r3, #31
 80088a4:	d405      	bmi.n	80088b2 <setvbuf+0x4a>
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	0598      	lsls	r0, r3, #22
 80088aa:	d402      	bmi.n	80088b2 <setvbuf+0x4a>
 80088ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088ae:	f000 fb19 	bl	8008ee4 <__retarget_lock_acquire_recursive>
 80088b2:	4621      	mov	r1, r4
 80088b4:	4638      	mov	r0, r7
 80088b6:	f000 f9e3 	bl	8008c80 <_fflush_r>
 80088ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088bc:	b141      	cbz	r1, 80088d0 <setvbuf+0x68>
 80088be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088c2:	4299      	cmp	r1, r3
 80088c4:	d002      	beq.n	80088cc <setvbuf+0x64>
 80088c6:	4638      	mov	r0, r7
 80088c8:	f000 fb7a 	bl	8008fc0 <_free_r>
 80088cc:	2300      	movs	r3, #0
 80088ce:	6363      	str	r3, [r4, #52]	; 0x34
 80088d0:	2300      	movs	r3, #0
 80088d2:	61a3      	str	r3, [r4, #24]
 80088d4:	6063      	str	r3, [r4, #4]
 80088d6:	89a3      	ldrh	r3, [r4, #12]
 80088d8:	0619      	lsls	r1, r3, #24
 80088da:	d503      	bpl.n	80088e4 <setvbuf+0x7c>
 80088dc:	6921      	ldr	r1, [r4, #16]
 80088de:	4638      	mov	r0, r7
 80088e0:	f000 fb6e 	bl	8008fc0 <_free_r>
 80088e4:	89a3      	ldrh	r3, [r4, #12]
 80088e6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80088ea:	f023 0303 	bic.w	r3, r3, #3
 80088ee:	f1b8 0f02 	cmp.w	r8, #2
 80088f2:	81a3      	strh	r3, [r4, #12]
 80088f4:	d06c      	beq.n	80089d0 <setvbuf+0x168>
 80088f6:	ab01      	add	r3, sp, #4
 80088f8:	466a      	mov	r2, sp
 80088fa:	4621      	mov	r1, r4
 80088fc:	4638      	mov	r0, r7
 80088fe:	f000 faf3 	bl	8008ee8 <__swhatbuf_r>
 8008902:	89a3      	ldrh	r3, [r4, #12]
 8008904:	4318      	orrs	r0, r3
 8008906:	81a0      	strh	r0, [r4, #12]
 8008908:	2d00      	cmp	r5, #0
 800890a:	d130      	bne.n	800896e <setvbuf+0x106>
 800890c:	9d00      	ldr	r5, [sp, #0]
 800890e:	4628      	mov	r0, r5
 8008910:	f000 fb4e 	bl	8008fb0 <malloc>
 8008914:	4606      	mov	r6, r0
 8008916:	2800      	cmp	r0, #0
 8008918:	d155      	bne.n	80089c6 <setvbuf+0x15e>
 800891a:	f8dd 9000 	ldr.w	r9, [sp]
 800891e:	45a9      	cmp	r9, r5
 8008920:	d14a      	bne.n	80089b8 <setvbuf+0x150>
 8008922:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008926:	2200      	movs	r2, #0
 8008928:	60a2      	str	r2, [r4, #8]
 800892a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800892e:	6022      	str	r2, [r4, #0]
 8008930:	6122      	str	r2, [r4, #16]
 8008932:	2201      	movs	r2, #1
 8008934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008938:	6162      	str	r2, [r4, #20]
 800893a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800893c:	f043 0302 	orr.w	r3, r3, #2
 8008940:	07d2      	lsls	r2, r2, #31
 8008942:	81a3      	strh	r3, [r4, #12]
 8008944:	d405      	bmi.n	8008952 <setvbuf+0xea>
 8008946:	f413 7f00 	tst.w	r3, #512	; 0x200
 800894a:	d102      	bne.n	8008952 <setvbuf+0xea>
 800894c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800894e:	f000 faca 	bl	8008ee6 <__retarget_lock_release_recursive>
 8008952:	4628      	mov	r0, r5
 8008954:	b003      	add	sp, #12
 8008956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800895a:	4b24      	ldr	r3, [pc, #144]	; (80089ec <setvbuf+0x184>)
 800895c:	429c      	cmp	r4, r3
 800895e:	d101      	bne.n	8008964 <setvbuf+0xfc>
 8008960:	68bc      	ldr	r4, [r7, #8]
 8008962:	e793      	b.n	800888c <setvbuf+0x24>
 8008964:	4b22      	ldr	r3, [pc, #136]	; (80089f0 <setvbuf+0x188>)
 8008966:	429c      	cmp	r4, r3
 8008968:	bf08      	it	eq
 800896a:	68fc      	ldreq	r4, [r7, #12]
 800896c:	e78e      	b.n	800888c <setvbuf+0x24>
 800896e:	2e00      	cmp	r6, #0
 8008970:	d0cd      	beq.n	800890e <setvbuf+0xa6>
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	b913      	cbnz	r3, 800897c <setvbuf+0x114>
 8008976:	4638      	mov	r0, r7
 8008978:	f000 fa16 	bl	8008da8 <__sinit>
 800897c:	f1b8 0f01 	cmp.w	r8, #1
 8008980:	bf08      	it	eq
 8008982:	89a3      	ldrheq	r3, [r4, #12]
 8008984:	6026      	str	r6, [r4, #0]
 8008986:	bf04      	itt	eq
 8008988:	f043 0301 	orreq.w	r3, r3, #1
 800898c:	81a3      	strheq	r3, [r4, #12]
 800898e:	89a2      	ldrh	r2, [r4, #12]
 8008990:	f012 0308 	ands.w	r3, r2, #8
 8008994:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008998:	d01c      	beq.n	80089d4 <setvbuf+0x16c>
 800899a:	07d3      	lsls	r3, r2, #31
 800899c:	bf41      	itttt	mi
 800899e:	2300      	movmi	r3, #0
 80089a0:	426d      	negmi	r5, r5
 80089a2:	60a3      	strmi	r3, [r4, #8]
 80089a4:	61a5      	strmi	r5, [r4, #24]
 80089a6:	bf58      	it	pl
 80089a8:	60a5      	strpl	r5, [r4, #8]
 80089aa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80089ac:	f015 0501 	ands.w	r5, r5, #1
 80089b0:	d115      	bne.n	80089de <setvbuf+0x176>
 80089b2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80089b6:	e7c8      	b.n	800894a <setvbuf+0xe2>
 80089b8:	4648      	mov	r0, r9
 80089ba:	f000 faf9 	bl	8008fb0 <malloc>
 80089be:	4606      	mov	r6, r0
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d0ae      	beq.n	8008922 <setvbuf+0xba>
 80089c4:	464d      	mov	r5, r9
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089cc:	81a3      	strh	r3, [r4, #12]
 80089ce:	e7d0      	b.n	8008972 <setvbuf+0x10a>
 80089d0:	2500      	movs	r5, #0
 80089d2:	e7a8      	b.n	8008926 <setvbuf+0xbe>
 80089d4:	60a3      	str	r3, [r4, #8]
 80089d6:	e7e8      	b.n	80089aa <setvbuf+0x142>
 80089d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80089dc:	e7b9      	b.n	8008952 <setvbuf+0xea>
 80089de:	2500      	movs	r5, #0
 80089e0:	e7b7      	b.n	8008952 <setvbuf+0xea>
 80089e2:	bf00      	nop
 80089e4:	20000014 	.word	0x20000014
 80089e8:	08009b3c 	.word	0x08009b3c
 80089ec:	08009b5c 	.word	0x08009b5c
 80089f0:	08009b1c 	.word	0x08009b1c

080089f4 <__swbuf_r>:
 80089f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f6:	460e      	mov	r6, r1
 80089f8:	4614      	mov	r4, r2
 80089fa:	4605      	mov	r5, r0
 80089fc:	b118      	cbz	r0, 8008a06 <__swbuf_r+0x12>
 80089fe:	6983      	ldr	r3, [r0, #24]
 8008a00:	b90b      	cbnz	r3, 8008a06 <__swbuf_r+0x12>
 8008a02:	f000 f9d1 	bl	8008da8 <__sinit>
 8008a06:	4b21      	ldr	r3, [pc, #132]	; (8008a8c <__swbuf_r+0x98>)
 8008a08:	429c      	cmp	r4, r3
 8008a0a:	d12b      	bne.n	8008a64 <__swbuf_r+0x70>
 8008a0c:	686c      	ldr	r4, [r5, #4]
 8008a0e:	69a3      	ldr	r3, [r4, #24]
 8008a10:	60a3      	str	r3, [r4, #8]
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	071a      	lsls	r2, r3, #28
 8008a16:	d52f      	bpl.n	8008a78 <__swbuf_r+0x84>
 8008a18:	6923      	ldr	r3, [r4, #16]
 8008a1a:	b36b      	cbz	r3, 8008a78 <__swbuf_r+0x84>
 8008a1c:	6923      	ldr	r3, [r4, #16]
 8008a1e:	6820      	ldr	r0, [r4, #0]
 8008a20:	1ac0      	subs	r0, r0, r3
 8008a22:	6963      	ldr	r3, [r4, #20]
 8008a24:	b2f6      	uxtb	r6, r6
 8008a26:	4283      	cmp	r3, r0
 8008a28:	4637      	mov	r7, r6
 8008a2a:	dc04      	bgt.n	8008a36 <__swbuf_r+0x42>
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f000 f926 	bl	8008c80 <_fflush_r>
 8008a34:	bb30      	cbnz	r0, 8008a84 <__swbuf_r+0x90>
 8008a36:	68a3      	ldr	r3, [r4, #8]
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	60a3      	str	r3, [r4, #8]
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	1c5a      	adds	r2, r3, #1
 8008a40:	6022      	str	r2, [r4, #0]
 8008a42:	701e      	strb	r6, [r3, #0]
 8008a44:	6963      	ldr	r3, [r4, #20]
 8008a46:	3001      	adds	r0, #1
 8008a48:	4283      	cmp	r3, r0
 8008a4a:	d004      	beq.n	8008a56 <__swbuf_r+0x62>
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	07db      	lsls	r3, r3, #31
 8008a50:	d506      	bpl.n	8008a60 <__swbuf_r+0x6c>
 8008a52:	2e0a      	cmp	r6, #10
 8008a54:	d104      	bne.n	8008a60 <__swbuf_r+0x6c>
 8008a56:	4621      	mov	r1, r4
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f000 f911 	bl	8008c80 <_fflush_r>
 8008a5e:	b988      	cbnz	r0, 8008a84 <__swbuf_r+0x90>
 8008a60:	4638      	mov	r0, r7
 8008a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a64:	4b0a      	ldr	r3, [pc, #40]	; (8008a90 <__swbuf_r+0x9c>)
 8008a66:	429c      	cmp	r4, r3
 8008a68:	d101      	bne.n	8008a6e <__swbuf_r+0x7a>
 8008a6a:	68ac      	ldr	r4, [r5, #8]
 8008a6c:	e7cf      	b.n	8008a0e <__swbuf_r+0x1a>
 8008a6e:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <__swbuf_r+0xa0>)
 8008a70:	429c      	cmp	r4, r3
 8008a72:	bf08      	it	eq
 8008a74:	68ec      	ldreq	r4, [r5, #12]
 8008a76:	e7ca      	b.n	8008a0e <__swbuf_r+0x1a>
 8008a78:	4621      	mov	r1, r4
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	f000 f80c 	bl	8008a98 <__swsetup_r>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d0cb      	beq.n	8008a1c <__swbuf_r+0x28>
 8008a84:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008a88:	e7ea      	b.n	8008a60 <__swbuf_r+0x6c>
 8008a8a:	bf00      	nop
 8008a8c:	08009b3c 	.word	0x08009b3c
 8008a90:	08009b5c 	.word	0x08009b5c
 8008a94:	08009b1c 	.word	0x08009b1c

08008a98 <__swsetup_r>:
 8008a98:	4b32      	ldr	r3, [pc, #200]	; (8008b64 <__swsetup_r+0xcc>)
 8008a9a:	b570      	push	{r4, r5, r6, lr}
 8008a9c:	681d      	ldr	r5, [r3, #0]
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	b125      	cbz	r5, 8008aae <__swsetup_r+0x16>
 8008aa4:	69ab      	ldr	r3, [r5, #24]
 8008aa6:	b913      	cbnz	r3, 8008aae <__swsetup_r+0x16>
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	f000 f97d 	bl	8008da8 <__sinit>
 8008aae:	4b2e      	ldr	r3, [pc, #184]	; (8008b68 <__swsetup_r+0xd0>)
 8008ab0:	429c      	cmp	r4, r3
 8008ab2:	d10f      	bne.n	8008ad4 <__swsetup_r+0x3c>
 8008ab4:	686c      	ldr	r4, [r5, #4]
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008abc:	0719      	lsls	r1, r3, #28
 8008abe:	d42c      	bmi.n	8008b1a <__swsetup_r+0x82>
 8008ac0:	06dd      	lsls	r5, r3, #27
 8008ac2:	d411      	bmi.n	8008ae8 <__swsetup_r+0x50>
 8008ac4:	2309      	movs	r3, #9
 8008ac6:	6033      	str	r3, [r6, #0]
 8008ac8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008acc:	81a3      	strh	r3, [r4, #12]
 8008ace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ad2:	e03e      	b.n	8008b52 <__swsetup_r+0xba>
 8008ad4:	4b25      	ldr	r3, [pc, #148]	; (8008b6c <__swsetup_r+0xd4>)
 8008ad6:	429c      	cmp	r4, r3
 8008ad8:	d101      	bne.n	8008ade <__swsetup_r+0x46>
 8008ada:	68ac      	ldr	r4, [r5, #8]
 8008adc:	e7eb      	b.n	8008ab6 <__swsetup_r+0x1e>
 8008ade:	4b24      	ldr	r3, [pc, #144]	; (8008b70 <__swsetup_r+0xd8>)
 8008ae0:	429c      	cmp	r4, r3
 8008ae2:	bf08      	it	eq
 8008ae4:	68ec      	ldreq	r4, [r5, #12]
 8008ae6:	e7e6      	b.n	8008ab6 <__swsetup_r+0x1e>
 8008ae8:	0758      	lsls	r0, r3, #29
 8008aea:	d512      	bpl.n	8008b12 <__swsetup_r+0x7a>
 8008aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008aee:	b141      	cbz	r1, 8008b02 <__swsetup_r+0x6a>
 8008af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008af4:	4299      	cmp	r1, r3
 8008af6:	d002      	beq.n	8008afe <__swsetup_r+0x66>
 8008af8:	4630      	mov	r0, r6
 8008afa:	f000 fa61 	bl	8008fc0 <_free_r>
 8008afe:	2300      	movs	r3, #0
 8008b00:	6363      	str	r3, [r4, #52]	; 0x34
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b08:	81a3      	strh	r3, [r4, #12]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	6063      	str	r3, [r4, #4]
 8008b0e:	6923      	ldr	r3, [r4, #16]
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	89a3      	ldrh	r3, [r4, #12]
 8008b14:	f043 0308 	orr.w	r3, r3, #8
 8008b18:	81a3      	strh	r3, [r4, #12]
 8008b1a:	6923      	ldr	r3, [r4, #16]
 8008b1c:	b94b      	cbnz	r3, 8008b32 <__swsetup_r+0x9a>
 8008b1e:	89a3      	ldrh	r3, [r4, #12]
 8008b20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b28:	d003      	beq.n	8008b32 <__swsetup_r+0x9a>
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	f000 f9ff 	bl	8008f30 <__smakebuf_r>
 8008b32:	89a0      	ldrh	r0, [r4, #12]
 8008b34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b38:	f010 0301 	ands.w	r3, r0, #1
 8008b3c:	d00a      	beq.n	8008b54 <__swsetup_r+0xbc>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60a3      	str	r3, [r4, #8]
 8008b42:	6963      	ldr	r3, [r4, #20]
 8008b44:	425b      	negs	r3, r3
 8008b46:	61a3      	str	r3, [r4, #24]
 8008b48:	6923      	ldr	r3, [r4, #16]
 8008b4a:	b943      	cbnz	r3, 8008b5e <__swsetup_r+0xc6>
 8008b4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b50:	d1ba      	bne.n	8008ac8 <__swsetup_r+0x30>
 8008b52:	bd70      	pop	{r4, r5, r6, pc}
 8008b54:	0781      	lsls	r1, r0, #30
 8008b56:	bf58      	it	pl
 8008b58:	6963      	ldrpl	r3, [r4, #20]
 8008b5a:	60a3      	str	r3, [r4, #8]
 8008b5c:	e7f4      	b.n	8008b48 <__swsetup_r+0xb0>
 8008b5e:	2000      	movs	r0, #0
 8008b60:	e7f7      	b.n	8008b52 <__swsetup_r+0xba>
 8008b62:	bf00      	nop
 8008b64:	20000014 	.word	0x20000014
 8008b68:	08009b3c 	.word	0x08009b3c
 8008b6c:	08009b5c 	.word	0x08009b5c
 8008b70:	08009b1c 	.word	0x08009b1c

08008b74 <__sflush_r>:
 8008b74:	898a      	ldrh	r2, [r1, #12]
 8008b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	0710      	lsls	r0, r2, #28
 8008b7e:	460c      	mov	r4, r1
 8008b80:	d458      	bmi.n	8008c34 <__sflush_r+0xc0>
 8008b82:	684b      	ldr	r3, [r1, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	dc05      	bgt.n	8008b94 <__sflush_r+0x20>
 8008b88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	dc02      	bgt.n	8008b94 <__sflush_r+0x20>
 8008b8e:	2000      	movs	r0, #0
 8008b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b96:	2e00      	cmp	r6, #0
 8008b98:	d0f9      	beq.n	8008b8e <__sflush_r+0x1a>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ba0:	682f      	ldr	r7, [r5, #0]
 8008ba2:	602b      	str	r3, [r5, #0]
 8008ba4:	d032      	beq.n	8008c0c <__sflush_r+0x98>
 8008ba6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ba8:	89a3      	ldrh	r3, [r4, #12]
 8008baa:	075a      	lsls	r2, r3, #29
 8008bac:	d505      	bpl.n	8008bba <__sflush_r+0x46>
 8008bae:	6863      	ldr	r3, [r4, #4]
 8008bb0:	1ac0      	subs	r0, r0, r3
 8008bb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bb4:	b10b      	cbz	r3, 8008bba <__sflush_r+0x46>
 8008bb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bb8:	1ac0      	subs	r0, r0, r3
 8008bba:	2300      	movs	r3, #0
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bc0:	6a21      	ldr	r1, [r4, #32]
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	47b0      	blx	r6
 8008bc6:	1c43      	adds	r3, r0, #1
 8008bc8:	89a3      	ldrh	r3, [r4, #12]
 8008bca:	d106      	bne.n	8008bda <__sflush_r+0x66>
 8008bcc:	6829      	ldr	r1, [r5, #0]
 8008bce:	291d      	cmp	r1, #29
 8008bd0:	d82c      	bhi.n	8008c2c <__sflush_r+0xb8>
 8008bd2:	4a2a      	ldr	r2, [pc, #168]	; (8008c7c <__sflush_r+0x108>)
 8008bd4:	40ca      	lsrs	r2, r1
 8008bd6:	07d6      	lsls	r6, r2, #31
 8008bd8:	d528      	bpl.n	8008c2c <__sflush_r+0xb8>
 8008bda:	2200      	movs	r2, #0
 8008bdc:	6062      	str	r2, [r4, #4]
 8008bde:	04d9      	lsls	r1, r3, #19
 8008be0:	6922      	ldr	r2, [r4, #16]
 8008be2:	6022      	str	r2, [r4, #0]
 8008be4:	d504      	bpl.n	8008bf0 <__sflush_r+0x7c>
 8008be6:	1c42      	adds	r2, r0, #1
 8008be8:	d101      	bne.n	8008bee <__sflush_r+0x7a>
 8008bea:	682b      	ldr	r3, [r5, #0]
 8008bec:	b903      	cbnz	r3, 8008bf0 <__sflush_r+0x7c>
 8008bee:	6560      	str	r0, [r4, #84]	; 0x54
 8008bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bf2:	602f      	str	r7, [r5, #0]
 8008bf4:	2900      	cmp	r1, #0
 8008bf6:	d0ca      	beq.n	8008b8e <__sflush_r+0x1a>
 8008bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bfc:	4299      	cmp	r1, r3
 8008bfe:	d002      	beq.n	8008c06 <__sflush_r+0x92>
 8008c00:	4628      	mov	r0, r5
 8008c02:	f000 f9dd 	bl	8008fc0 <_free_r>
 8008c06:	2000      	movs	r0, #0
 8008c08:	6360      	str	r0, [r4, #52]	; 0x34
 8008c0a:	e7c1      	b.n	8008b90 <__sflush_r+0x1c>
 8008c0c:	6a21      	ldr	r1, [r4, #32]
 8008c0e:	2301      	movs	r3, #1
 8008c10:	4628      	mov	r0, r5
 8008c12:	47b0      	blx	r6
 8008c14:	1c41      	adds	r1, r0, #1
 8008c16:	d1c7      	bne.n	8008ba8 <__sflush_r+0x34>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d0c4      	beq.n	8008ba8 <__sflush_r+0x34>
 8008c1e:	2b1d      	cmp	r3, #29
 8008c20:	d001      	beq.n	8008c26 <__sflush_r+0xb2>
 8008c22:	2b16      	cmp	r3, #22
 8008c24:	d101      	bne.n	8008c2a <__sflush_r+0xb6>
 8008c26:	602f      	str	r7, [r5, #0]
 8008c28:	e7b1      	b.n	8008b8e <__sflush_r+0x1a>
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c30:	81a3      	strh	r3, [r4, #12]
 8008c32:	e7ad      	b.n	8008b90 <__sflush_r+0x1c>
 8008c34:	690f      	ldr	r7, [r1, #16]
 8008c36:	2f00      	cmp	r7, #0
 8008c38:	d0a9      	beq.n	8008b8e <__sflush_r+0x1a>
 8008c3a:	0793      	lsls	r3, r2, #30
 8008c3c:	680e      	ldr	r6, [r1, #0]
 8008c3e:	bf08      	it	eq
 8008c40:	694b      	ldreq	r3, [r1, #20]
 8008c42:	600f      	str	r7, [r1, #0]
 8008c44:	bf18      	it	ne
 8008c46:	2300      	movne	r3, #0
 8008c48:	eba6 0807 	sub.w	r8, r6, r7
 8008c4c:	608b      	str	r3, [r1, #8]
 8008c4e:	f1b8 0f00 	cmp.w	r8, #0
 8008c52:	dd9c      	ble.n	8008b8e <__sflush_r+0x1a>
 8008c54:	6a21      	ldr	r1, [r4, #32]
 8008c56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c58:	4643      	mov	r3, r8
 8008c5a:	463a      	mov	r2, r7
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	47b0      	blx	r6
 8008c60:	2800      	cmp	r0, #0
 8008c62:	dc06      	bgt.n	8008c72 <__sflush_r+0xfe>
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c6a:	81a3      	strh	r3, [r4, #12]
 8008c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c70:	e78e      	b.n	8008b90 <__sflush_r+0x1c>
 8008c72:	4407      	add	r7, r0
 8008c74:	eba8 0800 	sub.w	r8, r8, r0
 8008c78:	e7e9      	b.n	8008c4e <__sflush_r+0xda>
 8008c7a:	bf00      	nop
 8008c7c:	20400001 	.word	0x20400001

08008c80 <_fflush_r>:
 8008c80:	b538      	push	{r3, r4, r5, lr}
 8008c82:	690b      	ldr	r3, [r1, #16]
 8008c84:	4605      	mov	r5, r0
 8008c86:	460c      	mov	r4, r1
 8008c88:	b913      	cbnz	r3, 8008c90 <_fflush_r+0x10>
 8008c8a:	2500      	movs	r5, #0
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	bd38      	pop	{r3, r4, r5, pc}
 8008c90:	b118      	cbz	r0, 8008c9a <_fflush_r+0x1a>
 8008c92:	6983      	ldr	r3, [r0, #24]
 8008c94:	b90b      	cbnz	r3, 8008c9a <_fflush_r+0x1a>
 8008c96:	f000 f887 	bl	8008da8 <__sinit>
 8008c9a:	4b14      	ldr	r3, [pc, #80]	; (8008cec <_fflush_r+0x6c>)
 8008c9c:	429c      	cmp	r4, r3
 8008c9e:	d11b      	bne.n	8008cd8 <_fflush_r+0x58>
 8008ca0:	686c      	ldr	r4, [r5, #4]
 8008ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d0ef      	beq.n	8008c8a <_fflush_r+0xa>
 8008caa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cac:	07d0      	lsls	r0, r2, #31
 8008cae:	d404      	bmi.n	8008cba <_fflush_r+0x3a>
 8008cb0:	0599      	lsls	r1, r3, #22
 8008cb2:	d402      	bmi.n	8008cba <_fflush_r+0x3a>
 8008cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cb6:	f000 f915 	bl	8008ee4 <__retarget_lock_acquire_recursive>
 8008cba:	4628      	mov	r0, r5
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	f7ff ff59 	bl	8008b74 <__sflush_r>
 8008cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cc4:	07da      	lsls	r2, r3, #31
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	d4e0      	bmi.n	8008c8c <_fflush_r+0xc>
 8008cca:	89a3      	ldrh	r3, [r4, #12]
 8008ccc:	059b      	lsls	r3, r3, #22
 8008cce:	d4dd      	bmi.n	8008c8c <_fflush_r+0xc>
 8008cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cd2:	f000 f908 	bl	8008ee6 <__retarget_lock_release_recursive>
 8008cd6:	e7d9      	b.n	8008c8c <_fflush_r+0xc>
 8008cd8:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <_fflush_r+0x70>)
 8008cda:	429c      	cmp	r4, r3
 8008cdc:	d101      	bne.n	8008ce2 <_fflush_r+0x62>
 8008cde:	68ac      	ldr	r4, [r5, #8]
 8008ce0:	e7df      	b.n	8008ca2 <_fflush_r+0x22>
 8008ce2:	4b04      	ldr	r3, [pc, #16]	; (8008cf4 <_fflush_r+0x74>)
 8008ce4:	429c      	cmp	r4, r3
 8008ce6:	bf08      	it	eq
 8008ce8:	68ec      	ldreq	r4, [r5, #12]
 8008cea:	e7da      	b.n	8008ca2 <_fflush_r+0x22>
 8008cec:	08009b3c 	.word	0x08009b3c
 8008cf0:	08009b5c 	.word	0x08009b5c
 8008cf4:	08009b1c 	.word	0x08009b1c

08008cf8 <std>:
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	b510      	push	{r4, lr}
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8008d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d06:	6083      	str	r3, [r0, #8]
 8008d08:	8181      	strh	r1, [r0, #12]
 8008d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8008d0c:	81c2      	strh	r2, [r0, #14]
 8008d0e:	6183      	str	r3, [r0, #24]
 8008d10:	4619      	mov	r1, r3
 8008d12:	2208      	movs	r2, #8
 8008d14:	305c      	adds	r0, #92	; 0x5c
 8008d16:	f7ff fd11 	bl	800873c <memset>
 8008d1a:	4b05      	ldr	r3, [pc, #20]	; (8008d30 <std+0x38>)
 8008d1c:	6263      	str	r3, [r4, #36]	; 0x24
 8008d1e:	4b05      	ldr	r3, [pc, #20]	; (8008d34 <std+0x3c>)
 8008d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d22:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <std+0x40>)
 8008d24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d26:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <std+0x44>)
 8008d28:	6224      	str	r4, [r4, #32]
 8008d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8008d2c:	bd10      	pop	{r4, pc}
 8008d2e:	bf00      	nop
 8008d30:	08009711 	.word	0x08009711
 8008d34:	08009733 	.word	0x08009733
 8008d38:	0800976b 	.word	0x0800976b
 8008d3c:	0800978f 	.word	0x0800978f

08008d40 <_cleanup_r>:
 8008d40:	4901      	ldr	r1, [pc, #4]	; (8008d48 <_cleanup_r+0x8>)
 8008d42:	f000 b8af 	b.w	8008ea4 <_fwalk_reent>
 8008d46:	bf00      	nop
 8008d48:	08008c81 	.word	0x08008c81

08008d4c <__sfmoreglue>:
 8008d4c:	b570      	push	{r4, r5, r6, lr}
 8008d4e:	1e4a      	subs	r2, r1, #1
 8008d50:	2568      	movs	r5, #104	; 0x68
 8008d52:	4355      	muls	r5, r2
 8008d54:	460e      	mov	r6, r1
 8008d56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d5a:	f000 f981 	bl	8009060 <_malloc_r>
 8008d5e:	4604      	mov	r4, r0
 8008d60:	b140      	cbz	r0, 8008d74 <__sfmoreglue+0x28>
 8008d62:	2100      	movs	r1, #0
 8008d64:	e9c0 1600 	strd	r1, r6, [r0]
 8008d68:	300c      	adds	r0, #12
 8008d6a:	60a0      	str	r0, [r4, #8]
 8008d6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d70:	f7ff fce4 	bl	800873c <memset>
 8008d74:	4620      	mov	r0, r4
 8008d76:	bd70      	pop	{r4, r5, r6, pc}

08008d78 <__sfp_lock_acquire>:
 8008d78:	4801      	ldr	r0, [pc, #4]	; (8008d80 <__sfp_lock_acquire+0x8>)
 8008d7a:	f000 b8b3 	b.w	8008ee4 <__retarget_lock_acquire_recursive>
 8008d7e:	bf00      	nop
 8008d80:	20000824 	.word	0x20000824

08008d84 <__sfp_lock_release>:
 8008d84:	4801      	ldr	r0, [pc, #4]	; (8008d8c <__sfp_lock_release+0x8>)
 8008d86:	f000 b8ae 	b.w	8008ee6 <__retarget_lock_release_recursive>
 8008d8a:	bf00      	nop
 8008d8c:	20000824 	.word	0x20000824

08008d90 <__sinit_lock_acquire>:
 8008d90:	4801      	ldr	r0, [pc, #4]	; (8008d98 <__sinit_lock_acquire+0x8>)
 8008d92:	f000 b8a7 	b.w	8008ee4 <__retarget_lock_acquire_recursive>
 8008d96:	bf00      	nop
 8008d98:	2000081f 	.word	0x2000081f

08008d9c <__sinit_lock_release>:
 8008d9c:	4801      	ldr	r0, [pc, #4]	; (8008da4 <__sinit_lock_release+0x8>)
 8008d9e:	f000 b8a2 	b.w	8008ee6 <__retarget_lock_release_recursive>
 8008da2:	bf00      	nop
 8008da4:	2000081f 	.word	0x2000081f

08008da8 <__sinit>:
 8008da8:	b510      	push	{r4, lr}
 8008daa:	4604      	mov	r4, r0
 8008dac:	f7ff fff0 	bl	8008d90 <__sinit_lock_acquire>
 8008db0:	69a3      	ldr	r3, [r4, #24]
 8008db2:	b11b      	cbz	r3, 8008dbc <__sinit+0x14>
 8008db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008db8:	f7ff bff0 	b.w	8008d9c <__sinit_lock_release>
 8008dbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008dc0:	6523      	str	r3, [r4, #80]	; 0x50
 8008dc2:	4b13      	ldr	r3, [pc, #76]	; (8008e10 <__sinit+0x68>)
 8008dc4:	4a13      	ldr	r2, [pc, #76]	; (8008e14 <__sinit+0x6c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008dca:	42a3      	cmp	r3, r4
 8008dcc:	bf04      	itt	eq
 8008dce:	2301      	moveq	r3, #1
 8008dd0:	61a3      	streq	r3, [r4, #24]
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 f820 	bl	8008e18 <__sfp>
 8008dd8:	6060      	str	r0, [r4, #4]
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f000 f81c 	bl	8008e18 <__sfp>
 8008de0:	60a0      	str	r0, [r4, #8]
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 f818 	bl	8008e18 <__sfp>
 8008de8:	2200      	movs	r2, #0
 8008dea:	60e0      	str	r0, [r4, #12]
 8008dec:	2104      	movs	r1, #4
 8008dee:	6860      	ldr	r0, [r4, #4]
 8008df0:	f7ff ff82 	bl	8008cf8 <std>
 8008df4:	68a0      	ldr	r0, [r4, #8]
 8008df6:	2201      	movs	r2, #1
 8008df8:	2109      	movs	r1, #9
 8008dfa:	f7ff ff7d 	bl	8008cf8 <std>
 8008dfe:	68e0      	ldr	r0, [r4, #12]
 8008e00:	2202      	movs	r2, #2
 8008e02:	2112      	movs	r1, #18
 8008e04:	f7ff ff78 	bl	8008cf8 <std>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	61a3      	str	r3, [r4, #24]
 8008e0c:	e7d2      	b.n	8008db4 <__sinit+0xc>
 8008e0e:	bf00      	nop
 8008e10:	08009b18 	.word	0x08009b18
 8008e14:	08008d41 	.word	0x08008d41

08008e18 <__sfp>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	4607      	mov	r7, r0
 8008e1c:	f7ff ffac 	bl	8008d78 <__sfp_lock_acquire>
 8008e20:	4b1e      	ldr	r3, [pc, #120]	; (8008e9c <__sfp+0x84>)
 8008e22:	681e      	ldr	r6, [r3, #0]
 8008e24:	69b3      	ldr	r3, [r6, #24]
 8008e26:	b913      	cbnz	r3, 8008e2e <__sfp+0x16>
 8008e28:	4630      	mov	r0, r6
 8008e2a:	f7ff ffbd 	bl	8008da8 <__sinit>
 8008e2e:	3648      	adds	r6, #72	; 0x48
 8008e30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	d503      	bpl.n	8008e40 <__sfp+0x28>
 8008e38:	6833      	ldr	r3, [r6, #0]
 8008e3a:	b30b      	cbz	r3, 8008e80 <__sfp+0x68>
 8008e3c:	6836      	ldr	r6, [r6, #0]
 8008e3e:	e7f7      	b.n	8008e30 <__sfp+0x18>
 8008e40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e44:	b9d5      	cbnz	r5, 8008e7c <__sfp+0x64>
 8008e46:	4b16      	ldr	r3, [pc, #88]	; (8008ea0 <__sfp+0x88>)
 8008e48:	60e3      	str	r3, [r4, #12]
 8008e4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e4e:	6665      	str	r5, [r4, #100]	; 0x64
 8008e50:	f000 f847 	bl	8008ee2 <__retarget_lock_init_recursive>
 8008e54:	f7ff ff96 	bl	8008d84 <__sfp_lock_release>
 8008e58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e60:	6025      	str	r5, [r4, #0]
 8008e62:	61a5      	str	r5, [r4, #24]
 8008e64:	2208      	movs	r2, #8
 8008e66:	4629      	mov	r1, r5
 8008e68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e6c:	f7ff fc66 	bl	800873c <memset>
 8008e70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e78:	4620      	mov	r0, r4
 8008e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e7c:	3468      	adds	r4, #104	; 0x68
 8008e7e:	e7d9      	b.n	8008e34 <__sfp+0x1c>
 8008e80:	2104      	movs	r1, #4
 8008e82:	4638      	mov	r0, r7
 8008e84:	f7ff ff62 	bl	8008d4c <__sfmoreglue>
 8008e88:	4604      	mov	r4, r0
 8008e8a:	6030      	str	r0, [r6, #0]
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d1d5      	bne.n	8008e3c <__sfp+0x24>
 8008e90:	f7ff ff78 	bl	8008d84 <__sfp_lock_release>
 8008e94:	230c      	movs	r3, #12
 8008e96:	603b      	str	r3, [r7, #0]
 8008e98:	e7ee      	b.n	8008e78 <__sfp+0x60>
 8008e9a:	bf00      	nop
 8008e9c:	08009b18 	.word	0x08009b18
 8008ea0:	ffff0001 	.word	0xffff0001

08008ea4 <_fwalk_reent>:
 8008ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea8:	4606      	mov	r6, r0
 8008eaa:	4688      	mov	r8, r1
 8008eac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008eb0:	2700      	movs	r7, #0
 8008eb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008eb6:	f1b9 0901 	subs.w	r9, r9, #1
 8008eba:	d505      	bpl.n	8008ec8 <_fwalk_reent+0x24>
 8008ebc:	6824      	ldr	r4, [r4, #0]
 8008ebe:	2c00      	cmp	r4, #0
 8008ec0:	d1f7      	bne.n	8008eb2 <_fwalk_reent+0xe>
 8008ec2:	4638      	mov	r0, r7
 8008ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ec8:	89ab      	ldrh	r3, [r5, #12]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d907      	bls.n	8008ede <_fwalk_reent+0x3a>
 8008ece:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	d003      	beq.n	8008ede <_fwalk_reent+0x3a>
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	4630      	mov	r0, r6
 8008eda:	47c0      	blx	r8
 8008edc:	4307      	orrs	r7, r0
 8008ede:	3568      	adds	r5, #104	; 0x68
 8008ee0:	e7e9      	b.n	8008eb6 <_fwalk_reent+0x12>

08008ee2 <__retarget_lock_init_recursive>:
 8008ee2:	4770      	bx	lr

08008ee4 <__retarget_lock_acquire_recursive>:
 8008ee4:	4770      	bx	lr

08008ee6 <__retarget_lock_release_recursive>:
 8008ee6:	4770      	bx	lr

08008ee8 <__swhatbuf_r>:
 8008ee8:	b570      	push	{r4, r5, r6, lr}
 8008eea:	460e      	mov	r6, r1
 8008eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef0:	2900      	cmp	r1, #0
 8008ef2:	b096      	sub	sp, #88	; 0x58
 8008ef4:	4614      	mov	r4, r2
 8008ef6:	461d      	mov	r5, r3
 8008ef8:	da07      	bge.n	8008f0a <__swhatbuf_r+0x22>
 8008efa:	2300      	movs	r3, #0
 8008efc:	602b      	str	r3, [r5, #0]
 8008efe:	89b3      	ldrh	r3, [r6, #12]
 8008f00:	061a      	lsls	r2, r3, #24
 8008f02:	d410      	bmi.n	8008f26 <__swhatbuf_r+0x3e>
 8008f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f08:	e00e      	b.n	8008f28 <__swhatbuf_r+0x40>
 8008f0a:	466a      	mov	r2, sp
 8008f0c:	f000 fc66 	bl	80097dc <_fstat_r>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	dbf2      	blt.n	8008efa <__swhatbuf_r+0x12>
 8008f14:	9a01      	ldr	r2, [sp, #4]
 8008f16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f1e:	425a      	negs	r2, r3
 8008f20:	415a      	adcs	r2, r3
 8008f22:	602a      	str	r2, [r5, #0]
 8008f24:	e7ee      	b.n	8008f04 <__swhatbuf_r+0x1c>
 8008f26:	2340      	movs	r3, #64	; 0x40
 8008f28:	2000      	movs	r0, #0
 8008f2a:	6023      	str	r3, [r4, #0]
 8008f2c:	b016      	add	sp, #88	; 0x58
 8008f2e:	bd70      	pop	{r4, r5, r6, pc}

08008f30 <__smakebuf_r>:
 8008f30:	898b      	ldrh	r3, [r1, #12]
 8008f32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f34:	079d      	lsls	r5, r3, #30
 8008f36:	4606      	mov	r6, r0
 8008f38:	460c      	mov	r4, r1
 8008f3a:	d507      	bpl.n	8008f4c <__smakebuf_r+0x1c>
 8008f3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f40:	6023      	str	r3, [r4, #0]
 8008f42:	6123      	str	r3, [r4, #16]
 8008f44:	2301      	movs	r3, #1
 8008f46:	6163      	str	r3, [r4, #20]
 8008f48:	b002      	add	sp, #8
 8008f4a:	bd70      	pop	{r4, r5, r6, pc}
 8008f4c:	ab01      	add	r3, sp, #4
 8008f4e:	466a      	mov	r2, sp
 8008f50:	f7ff ffca 	bl	8008ee8 <__swhatbuf_r>
 8008f54:	9900      	ldr	r1, [sp, #0]
 8008f56:	4605      	mov	r5, r0
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f000 f881 	bl	8009060 <_malloc_r>
 8008f5e:	b948      	cbnz	r0, 8008f74 <__smakebuf_r+0x44>
 8008f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f64:	059a      	lsls	r2, r3, #22
 8008f66:	d4ef      	bmi.n	8008f48 <__smakebuf_r+0x18>
 8008f68:	f023 0303 	bic.w	r3, r3, #3
 8008f6c:	f043 0302 	orr.w	r3, r3, #2
 8008f70:	81a3      	strh	r3, [r4, #12]
 8008f72:	e7e3      	b.n	8008f3c <__smakebuf_r+0xc>
 8008f74:	4b0d      	ldr	r3, [pc, #52]	; (8008fac <__smakebuf_r+0x7c>)
 8008f76:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	6020      	str	r0, [r4, #0]
 8008f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f80:	81a3      	strh	r3, [r4, #12]
 8008f82:	9b00      	ldr	r3, [sp, #0]
 8008f84:	6163      	str	r3, [r4, #20]
 8008f86:	9b01      	ldr	r3, [sp, #4]
 8008f88:	6120      	str	r0, [r4, #16]
 8008f8a:	b15b      	cbz	r3, 8008fa4 <__smakebuf_r+0x74>
 8008f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f90:	4630      	mov	r0, r6
 8008f92:	f000 fc35 	bl	8009800 <_isatty_r>
 8008f96:	b128      	cbz	r0, 8008fa4 <__smakebuf_r+0x74>
 8008f98:	89a3      	ldrh	r3, [r4, #12]
 8008f9a:	f023 0303 	bic.w	r3, r3, #3
 8008f9e:	f043 0301 	orr.w	r3, r3, #1
 8008fa2:	81a3      	strh	r3, [r4, #12]
 8008fa4:	89a0      	ldrh	r0, [r4, #12]
 8008fa6:	4305      	orrs	r5, r0
 8008fa8:	81a5      	strh	r5, [r4, #12]
 8008faa:	e7cd      	b.n	8008f48 <__smakebuf_r+0x18>
 8008fac:	08008d41 	.word	0x08008d41

08008fb0 <malloc>:
 8008fb0:	4b02      	ldr	r3, [pc, #8]	; (8008fbc <malloc+0xc>)
 8008fb2:	4601      	mov	r1, r0
 8008fb4:	6818      	ldr	r0, [r3, #0]
 8008fb6:	f000 b853 	b.w	8009060 <_malloc_r>
 8008fba:	bf00      	nop
 8008fbc:	20000014 	.word	0x20000014

08008fc0 <_free_r>:
 8008fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fc2:	2900      	cmp	r1, #0
 8008fc4:	d048      	beq.n	8009058 <_free_r+0x98>
 8008fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fca:	9001      	str	r0, [sp, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f1a1 0404 	sub.w	r4, r1, #4
 8008fd2:	bfb8      	it	lt
 8008fd4:	18e4      	addlt	r4, r4, r3
 8008fd6:	f000 fc35 	bl	8009844 <__malloc_lock>
 8008fda:	4a20      	ldr	r2, [pc, #128]	; (800905c <_free_r+0x9c>)
 8008fdc:	9801      	ldr	r0, [sp, #4]
 8008fde:	6813      	ldr	r3, [r2, #0]
 8008fe0:	4615      	mov	r5, r2
 8008fe2:	b933      	cbnz	r3, 8008ff2 <_free_r+0x32>
 8008fe4:	6063      	str	r3, [r4, #4]
 8008fe6:	6014      	str	r4, [r2, #0]
 8008fe8:	b003      	add	sp, #12
 8008fea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fee:	f000 bc2f 	b.w	8009850 <__malloc_unlock>
 8008ff2:	42a3      	cmp	r3, r4
 8008ff4:	d90b      	bls.n	800900e <_free_r+0x4e>
 8008ff6:	6821      	ldr	r1, [r4, #0]
 8008ff8:	1862      	adds	r2, r4, r1
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	bf04      	itt	eq
 8008ffe:	681a      	ldreq	r2, [r3, #0]
 8009000:	685b      	ldreq	r3, [r3, #4]
 8009002:	6063      	str	r3, [r4, #4]
 8009004:	bf04      	itt	eq
 8009006:	1852      	addeq	r2, r2, r1
 8009008:	6022      	streq	r2, [r4, #0]
 800900a:	602c      	str	r4, [r5, #0]
 800900c:	e7ec      	b.n	8008fe8 <_free_r+0x28>
 800900e:	461a      	mov	r2, r3
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	b10b      	cbz	r3, 8009018 <_free_r+0x58>
 8009014:	42a3      	cmp	r3, r4
 8009016:	d9fa      	bls.n	800900e <_free_r+0x4e>
 8009018:	6811      	ldr	r1, [r2, #0]
 800901a:	1855      	adds	r5, r2, r1
 800901c:	42a5      	cmp	r5, r4
 800901e:	d10b      	bne.n	8009038 <_free_r+0x78>
 8009020:	6824      	ldr	r4, [r4, #0]
 8009022:	4421      	add	r1, r4
 8009024:	1854      	adds	r4, r2, r1
 8009026:	42a3      	cmp	r3, r4
 8009028:	6011      	str	r1, [r2, #0]
 800902a:	d1dd      	bne.n	8008fe8 <_free_r+0x28>
 800902c:	681c      	ldr	r4, [r3, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	6053      	str	r3, [r2, #4]
 8009032:	4421      	add	r1, r4
 8009034:	6011      	str	r1, [r2, #0]
 8009036:	e7d7      	b.n	8008fe8 <_free_r+0x28>
 8009038:	d902      	bls.n	8009040 <_free_r+0x80>
 800903a:	230c      	movs	r3, #12
 800903c:	6003      	str	r3, [r0, #0]
 800903e:	e7d3      	b.n	8008fe8 <_free_r+0x28>
 8009040:	6825      	ldr	r5, [r4, #0]
 8009042:	1961      	adds	r1, r4, r5
 8009044:	428b      	cmp	r3, r1
 8009046:	bf04      	itt	eq
 8009048:	6819      	ldreq	r1, [r3, #0]
 800904a:	685b      	ldreq	r3, [r3, #4]
 800904c:	6063      	str	r3, [r4, #4]
 800904e:	bf04      	itt	eq
 8009050:	1949      	addeq	r1, r1, r5
 8009052:	6021      	streq	r1, [r4, #0]
 8009054:	6054      	str	r4, [r2, #4]
 8009056:	e7c7      	b.n	8008fe8 <_free_r+0x28>
 8009058:	b003      	add	sp, #12
 800905a:	bd30      	pop	{r4, r5, pc}
 800905c:	200000c0 	.word	0x200000c0

08009060 <_malloc_r>:
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	1ccd      	adds	r5, r1, #3
 8009064:	f025 0503 	bic.w	r5, r5, #3
 8009068:	3508      	adds	r5, #8
 800906a:	2d0c      	cmp	r5, #12
 800906c:	bf38      	it	cc
 800906e:	250c      	movcc	r5, #12
 8009070:	2d00      	cmp	r5, #0
 8009072:	4606      	mov	r6, r0
 8009074:	db01      	blt.n	800907a <_malloc_r+0x1a>
 8009076:	42a9      	cmp	r1, r5
 8009078:	d903      	bls.n	8009082 <_malloc_r+0x22>
 800907a:	230c      	movs	r3, #12
 800907c:	6033      	str	r3, [r6, #0]
 800907e:	2000      	movs	r0, #0
 8009080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009082:	f000 fbdf 	bl	8009844 <__malloc_lock>
 8009086:	4921      	ldr	r1, [pc, #132]	; (800910c <_malloc_r+0xac>)
 8009088:	680a      	ldr	r2, [r1, #0]
 800908a:	4614      	mov	r4, r2
 800908c:	b99c      	cbnz	r4, 80090b6 <_malloc_r+0x56>
 800908e:	4f20      	ldr	r7, [pc, #128]	; (8009110 <_malloc_r+0xb0>)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	b923      	cbnz	r3, 800909e <_malloc_r+0x3e>
 8009094:	4621      	mov	r1, r4
 8009096:	4630      	mov	r0, r6
 8009098:	f000 fb2a 	bl	80096f0 <_sbrk_r>
 800909c:	6038      	str	r0, [r7, #0]
 800909e:	4629      	mov	r1, r5
 80090a0:	4630      	mov	r0, r6
 80090a2:	f000 fb25 	bl	80096f0 <_sbrk_r>
 80090a6:	1c43      	adds	r3, r0, #1
 80090a8:	d123      	bne.n	80090f2 <_malloc_r+0x92>
 80090aa:	230c      	movs	r3, #12
 80090ac:	6033      	str	r3, [r6, #0]
 80090ae:	4630      	mov	r0, r6
 80090b0:	f000 fbce 	bl	8009850 <__malloc_unlock>
 80090b4:	e7e3      	b.n	800907e <_malloc_r+0x1e>
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	1b5b      	subs	r3, r3, r5
 80090ba:	d417      	bmi.n	80090ec <_malloc_r+0x8c>
 80090bc:	2b0b      	cmp	r3, #11
 80090be:	d903      	bls.n	80090c8 <_malloc_r+0x68>
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	441c      	add	r4, r3
 80090c4:	6025      	str	r5, [r4, #0]
 80090c6:	e004      	b.n	80090d2 <_malloc_r+0x72>
 80090c8:	6863      	ldr	r3, [r4, #4]
 80090ca:	42a2      	cmp	r2, r4
 80090cc:	bf0c      	ite	eq
 80090ce:	600b      	streq	r3, [r1, #0]
 80090d0:	6053      	strne	r3, [r2, #4]
 80090d2:	4630      	mov	r0, r6
 80090d4:	f000 fbbc 	bl	8009850 <__malloc_unlock>
 80090d8:	f104 000b 	add.w	r0, r4, #11
 80090dc:	1d23      	adds	r3, r4, #4
 80090de:	f020 0007 	bic.w	r0, r0, #7
 80090e2:	1ac2      	subs	r2, r0, r3
 80090e4:	d0cc      	beq.n	8009080 <_malloc_r+0x20>
 80090e6:	1a1b      	subs	r3, r3, r0
 80090e8:	50a3      	str	r3, [r4, r2]
 80090ea:	e7c9      	b.n	8009080 <_malloc_r+0x20>
 80090ec:	4622      	mov	r2, r4
 80090ee:	6864      	ldr	r4, [r4, #4]
 80090f0:	e7cc      	b.n	800908c <_malloc_r+0x2c>
 80090f2:	1cc4      	adds	r4, r0, #3
 80090f4:	f024 0403 	bic.w	r4, r4, #3
 80090f8:	42a0      	cmp	r0, r4
 80090fa:	d0e3      	beq.n	80090c4 <_malloc_r+0x64>
 80090fc:	1a21      	subs	r1, r4, r0
 80090fe:	4630      	mov	r0, r6
 8009100:	f000 faf6 	bl	80096f0 <_sbrk_r>
 8009104:	3001      	adds	r0, #1
 8009106:	d1dd      	bne.n	80090c4 <_malloc_r+0x64>
 8009108:	e7cf      	b.n	80090aa <_malloc_r+0x4a>
 800910a:	bf00      	nop
 800910c:	200000c0 	.word	0x200000c0
 8009110:	200000c4 	.word	0x200000c4

08009114 <__sfputc_r>:
 8009114:	6893      	ldr	r3, [r2, #8]
 8009116:	3b01      	subs	r3, #1
 8009118:	2b00      	cmp	r3, #0
 800911a:	b410      	push	{r4}
 800911c:	6093      	str	r3, [r2, #8]
 800911e:	da08      	bge.n	8009132 <__sfputc_r+0x1e>
 8009120:	6994      	ldr	r4, [r2, #24]
 8009122:	42a3      	cmp	r3, r4
 8009124:	db01      	blt.n	800912a <__sfputc_r+0x16>
 8009126:	290a      	cmp	r1, #10
 8009128:	d103      	bne.n	8009132 <__sfputc_r+0x1e>
 800912a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800912e:	f7ff bc61 	b.w	80089f4 <__swbuf_r>
 8009132:	6813      	ldr	r3, [r2, #0]
 8009134:	1c58      	adds	r0, r3, #1
 8009136:	6010      	str	r0, [r2, #0]
 8009138:	7019      	strb	r1, [r3, #0]
 800913a:	4608      	mov	r0, r1
 800913c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009140:	4770      	bx	lr

08009142 <__sfputs_r>:
 8009142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009144:	4606      	mov	r6, r0
 8009146:	460f      	mov	r7, r1
 8009148:	4614      	mov	r4, r2
 800914a:	18d5      	adds	r5, r2, r3
 800914c:	42ac      	cmp	r4, r5
 800914e:	d101      	bne.n	8009154 <__sfputs_r+0x12>
 8009150:	2000      	movs	r0, #0
 8009152:	e007      	b.n	8009164 <__sfputs_r+0x22>
 8009154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009158:	463a      	mov	r2, r7
 800915a:	4630      	mov	r0, r6
 800915c:	f7ff ffda 	bl	8009114 <__sfputc_r>
 8009160:	1c43      	adds	r3, r0, #1
 8009162:	d1f3      	bne.n	800914c <__sfputs_r+0xa>
 8009164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009168 <_vfiprintf_r>:
 8009168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	460d      	mov	r5, r1
 800916e:	b09d      	sub	sp, #116	; 0x74
 8009170:	4614      	mov	r4, r2
 8009172:	4698      	mov	r8, r3
 8009174:	4606      	mov	r6, r0
 8009176:	b118      	cbz	r0, 8009180 <_vfiprintf_r+0x18>
 8009178:	6983      	ldr	r3, [r0, #24]
 800917a:	b90b      	cbnz	r3, 8009180 <_vfiprintf_r+0x18>
 800917c:	f7ff fe14 	bl	8008da8 <__sinit>
 8009180:	4b89      	ldr	r3, [pc, #548]	; (80093a8 <_vfiprintf_r+0x240>)
 8009182:	429d      	cmp	r5, r3
 8009184:	d11b      	bne.n	80091be <_vfiprintf_r+0x56>
 8009186:	6875      	ldr	r5, [r6, #4]
 8009188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800918a:	07d9      	lsls	r1, r3, #31
 800918c:	d405      	bmi.n	800919a <_vfiprintf_r+0x32>
 800918e:	89ab      	ldrh	r3, [r5, #12]
 8009190:	059a      	lsls	r2, r3, #22
 8009192:	d402      	bmi.n	800919a <_vfiprintf_r+0x32>
 8009194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009196:	f7ff fea5 	bl	8008ee4 <__retarget_lock_acquire_recursive>
 800919a:	89ab      	ldrh	r3, [r5, #12]
 800919c:	071b      	lsls	r3, r3, #28
 800919e:	d501      	bpl.n	80091a4 <_vfiprintf_r+0x3c>
 80091a0:	692b      	ldr	r3, [r5, #16]
 80091a2:	b9eb      	cbnz	r3, 80091e0 <_vfiprintf_r+0x78>
 80091a4:	4629      	mov	r1, r5
 80091a6:	4630      	mov	r0, r6
 80091a8:	f7ff fc76 	bl	8008a98 <__swsetup_r>
 80091ac:	b1c0      	cbz	r0, 80091e0 <_vfiprintf_r+0x78>
 80091ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091b0:	07dc      	lsls	r4, r3, #31
 80091b2:	d50e      	bpl.n	80091d2 <_vfiprintf_r+0x6a>
 80091b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091b8:	b01d      	add	sp, #116	; 0x74
 80091ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091be:	4b7b      	ldr	r3, [pc, #492]	; (80093ac <_vfiprintf_r+0x244>)
 80091c0:	429d      	cmp	r5, r3
 80091c2:	d101      	bne.n	80091c8 <_vfiprintf_r+0x60>
 80091c4:	68b5      	ldr	r5, [r6, #8]
 80091c6:	e7df      	b.n	8009188 <_vfiprintf_r+0x20>
 80091c8:	4b79      	ldr	r3, [pc, #484]	; (80093b0 <_vfiprintf_r+0x248>)
 80091ca:	429d      	cmp	r5, r3
 80091cc:	bf08      	it	eq
 80091ce:	68f5      	ldreq	r5, [r6, #12]
 80091d0:	e7da      	b.n	8009188 <_vfiprintf_r+0x20>
 80091d2:	89ab      	ldrh	r3, [r5, #12]
 80091d4:	0598      	lsls	r0, r3, #22
 80091d6:	d4ed      	bmi.n	80091b4 <_vfiprintf_r+0x4c>
 80091d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091da:	f7ff fe84 	bl	8008ee6 <__retarget_lock_release_recursive>
 80091de:	e7e9      	b.n	80091b4 <_vfiprintf_r+0x4c>
 80091e0:	2300      	movs	r3, #0
 80091e2:	9309      	str	r3, [sp, #36]	; 0x24
 80091e4:	2320      	movs	r3, #32
 80091e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80091ee:	2330      	movs	r3, #48	; 0x30
 80091f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80093b4 <_vfiprintf_r+0x24c>
 80091f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091f8:	f04f 0901 	mov.w	r9, #1
 80091fc:	4623      	mov	r3, r4
 80091fe:	469a      	mov	sl, r3
 8009200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009204:	b10a      	cbz	r2, 800920a <_vfiprintf_r+0xa2>
 8009206:	2a25      	cmp	r2, #37	; 0x25
 8009208:	d1f9      	bne.n	80091fe <_vfiprintf_r+0x96>
 800920a:	ebba 0b04 	subs.w	fp, sl, r4
 800920e:	d00b      	beq.n	8009228 <_vfiprintf_r+0xc0>
 8009210:	465b      	mov	r3, fp
 8009212:	4622      	mov	r2, r4
 8009214:	4629      	mov	r1, r5
 8009216:	4630      	mov	r0, r6
 8009218:	f7ff ff93 	bl	8009142 <__sfputs_r>
 800921c:	3001      	adds	r0, #1
 800921e:	f000 80aa 	beq.w	8009376 <_vfiprintf_r+0x20e>
 8009222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009224:	445a      	add	r2, fp
 8009226:	9209      	str	r2, [sp, #36]	; 0x24
 8009228:	f89a 3000 	ldrb.w	r3, [sl]
 800922c:	2b00      	cmp	r3, #0
 800922e:	f000 80a2 	beq.w	8009376 <_vfiprintf_r+0x20e>
 8009232:	2300      	movs	r3, #0
 8009234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800923c:	f10a 0a01 	add.w	sl, sl, #1
 8009240:	9304      	str	r3, [sp, #16]
 8009242:	9307      	str	r3, [sp, #28]
 8009244:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009248:	931a      	str	r3, [sp, #104]	; 0x68
 800924a:	4654      	mov	r4, sl
 800924c:	2205      	movs	r2, #5
 800924e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009252:	4858      	ldr	r0, [pc, #352]	; (80093b4 <_vfiprintf_r+0x24c>)
 8009254:	f7f6 ffcc 	bl	80001f0 <memchr>
 8009258:	9a04      	ldr	r2, [sp, #16]
 800925a:	b9d8      	cbnz	r0, 8009294 <_vfiprintf_r+0x12c>
 800925c:	06d1      	lsls	r1, r2, #27
 800925e:	bf44      	itt	mi
 8009260:	2320      	movmi	r3, #32
 8009262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009266:	0713      	lsls	r3, r2, #28
 8009268:	bf44      	itt	mi
 800926a:	232b      	movmi	r3, #43	; 0x2b
 800926c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009270:	f89a 3000 	ldrb.w	r3, [sl]
 8009274:	2b2a      	cmp	r3, #42	; 0x2a
 8009276:	d015      	beq.n	80092a4 <_vfiprintf_r+0x13c>
 8009278:	9a07      	ldr	r2, [sp, #28]
 800927a:	4654      	mov	r4, sl
 800927c:	2000      	movs	r0, #0
 800927e:	f04f 0c0a 	mov.w	ip, #10
 8009282:	4621      	mov	r1, r4
 8009284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009288:	3b30      	subs	r3, #48	; 0x30
 800928a:	2b09      	cmp	r3, #9
 800928c:	d94e      	bls.n	800932c <_vfiprintf_r+0x1c4>
 800928e:	b1b0      	cbz	r0, 80092be <_vfiprintf_r+0x156>
 8009290:	9207      	str	r2, [sp, #28]
 8009292:	e014      	b.n	80092be <_vfiprintf_r+0x156>
 8009294:	eba0 0308 	sub.w	r3, r0, r8
 8009298:	fa09 f303 	lsl.w	r3, r9, r3
 800929c:	4313      	orrs	r3, r2
 800929e:	9304      	str	r3, [sp, #16]
 80092a0:	46a2      	mov	sl, r4
 80092a2:	e7d2      	b.n	800924a <_vfiprintf_r+0xe2>
 80092a4:	9b03      	ldr	r3, [sp, #12]
 80092a6:	1d19      	adds	r1, r3, #4
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	9103      	str	r1, [sp, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	bfbb      	ittet	lt
 80092b0:	425b      	neglt	r3, r3
 80092b2:	f042 0202 	orrlt.w	r2, r2, #2
 80092b6:	9307      	strge	r3, [sp, #28]
 80092b8:	9307      	strlt	r3, [sp, #28]
 80092ba:	bfb8      	it	lt
 80092bc:	9204      	strlt	r2, [sp, #16]
 80092be:	7823      	ldrb	r3, [r4, #0]
 80092c0:	2b2e      	cmp	r3, #46	; 0x2e
 80092c2:	d10c      	bne.n	80092de <_vfiprintf_r+0x176>
 80092c4:	7863      	ldrb	r3, [r4, #1]
 80092c6:	2b2a      	cmp	r3, #42	; 0x2a
 80092c8:	d135      	bne.n	8009336 <_vfiprintf_r+0x1ce>
 80092ca:	9b03      	ldr	r3, [sp, #12]
 80092cc:	1d1a      	adds	r2, r3, #4
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	9203      	str	r2, [sp, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	bfb8      	it	lt
 80092d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80092da:	3402      	adds	r4, #2
 80092dc:	9305      	str	r3, [sp, #20]
 80092de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80093c4 <_vfiprintf_r+0x25c>
 80092e2:	7821      	ldrb	r1, [r4, #0]
 80092e4:	2203      	movs	r2, #3
 80092e6:	4650      	mov	r0, sl
 80092e8:	f7f6 ff82 	bl	80001f0 <memchr>
 80092ec:	b140      	cbz	r0, 8009300 <_vfiprintf_r+0x198>
 80092ee:	2340      	movs	r3, #64	; 0x40
 80092f0:	eba0 000a 	sub.w	r0, r0, sl
 80092f4:	fa03 f000 	lsl.w	r0, r3, r0
 80092f8:	9b04      	ldr	r3, [sp, #16]
 80092fa:	4303      	orrs	r3, r0
 80092fc:	3401      	adds	r4, #1
 80092fe:	9304      	str	r3, [sp, #16]
 8009300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009304:	482c      	ldr	r0, [pc, #176]	; (80093b8 <_vfiprintf_r+0x250>)
 8009306:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800930a:	2206      	movs	r2, #6
 800930c:	f7f6 ff70 	bl	80001f0 <memchr>
 8009310:	2800      	cmp	r0, #0
 8009312:	d03f      	beq.n	8009394 <_vfiprintf_r+0x22c>
 8009314:	4b29      	ldr	r3, [pc, #164]	; (80093bc <_vfiprintf_r+0x254>)
 8009316:	bb1b      	cbnz	r3, 8009360 <_vfiprintf_r+0x1f8>
 8009318:	9b03      	ldr	r3, [sp, #12]
 800931a:	3307      	adds	r3, #7
 800931c:	f023 0307 	bic.w	r3, r3, #7
 8009320:	3308      	adds	r3, #8
 8009322:	9303      	str	r3, [sp, #12]
 8009324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009326:	443b      	add	r3, r7
 8009328:	9309      	str	r3, [sp, #36]	; 0x24
 800932a:	e767      	b.n	80091fc <_vfiprintf_r+0x94>
 800932c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009330:	460c      	mov	r4, r1
 8009332:	2001      	movs	r0, #1
 8009334:	e7a5      	b.n	8009282 <_vfiprintf_r+0x11a>
 8009336:	2300      	movs	r3, #0
 8009338:	3401      	adds	r4, #1
 800933a:	9305      	str	r3, [sp, #20]
 800933c:	4619      	mov	r1, r3
 800933e:	f04f 0c0a 	mov.w	ip, #10
 8009342:	4620      	mov	r0, r4
 8009344:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009348:	3a30      	subs	r2, #48	; 0x30
 800934a:	2a09      	cmp	r2, #9
 800934c:	d903      	bls.n	8009356 <_vfiprintf_r+0x1ee>
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0c5      	beq.n	80092de <_vfiprintf_r+0x176>
 8009352:	9105      	str	r1, [sp, #20]
 8009354:	e7c3      	b.n	80092de <_vfiprintf_r+0x176>
 8009356:	fb0c 2101 	mla	r1, ip, r1, r2
 800935a:	4604      	mov	r4, r0
 800935c:	2301      	movs	r3, #1
 800935e:	e7f0      	b.n	8009342 <_vfiprintf_r+0x1da>
 8009360:	ab03      	add	r3, sp, #12
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	462a      	mov	r2, r5
 8009366:	4b16      	ldr	r3, [pc, #88]	; (80093c0 <_vfiprintf_r+0x258>)
 8009368:	a904      	add	r1, sp, #16
 800936a:	4630      	mov	r0, r6
 800936c:	f3af 8000 	nop.w
 8009370:	4607      	mov	r7, r0
 8009372:	1c78      	adds	r0, r7, #1
 8009374:	d1d6      	bne.n	8009324 <_vfiprintf_r+0x1bc>
 8009376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009378:	07d9      	lsls	r1, r3, #31
 800937a:	d405      	bmi.n	8009388 <_vfiprintf_r+0x220>
 800937c:	89ab      	ldrh	r3, [r5, #12]
 800937e:	059a      	lsls	r2, r3, #22
 8009380:	d402      	bmi.n	8009388 <_vfiprintf_r+0x220>
 8009382:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009384:	f7ff fdaf 	bl	8008ee6 <__retarget_lock_release_recursive>
 8009388:	89ab      	ldrh	r3, [r5, #12]
 800938a:	065b      	lsls	r3, r3, #25
 800938c:	f53f af12 	bmi.w	80091b4 <_vfiprintf_r+0x4c>
 8009390:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009392:	e711      	b.n	80091b8 <_vfiprintf_r+0x50>
 8009394:	ab03      	add	r3, sp, #12
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	462a      	mov	r2, r5
 800939a:	4b09      	ldr	r3, [pc, #36]	; (80093c0 <_vfiprintf_r+0x258>)
 800939c:	a904      	add	r1, sp, #16
 800939e:	4630      	mov	r0, r6
 80093a0:	f000 f880 	bl	80094a4 <_printf_i>
 80093a4:	e7e4      	b.n	8009370 <_vfiprintf_r+0x208>
 80093a6:	bf00      	nop
 80093a8:	08009b3c 	.word	0x08009b3c
 80093ac:	08009b5c 	.word	0x08009b5c
 80093b0:	08009b1c 	.word	0x08009b1c
 80093b4:	08009b7c 	.word	0x08009b7c
 80093b8:	08009b86 	.word	0x08009b86
 80093bc:	00000000 	.word	0x00000000
 80093c0:	08009143 	.word	0x08009143
 80093c4:	08009b82 	.word	0x08009b82

080093c8 <_printf_common>:
 80093c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093cc:	4616      	mov	r6, r2
 80093ce:	4699      	mov	r9, r3
 80093d0:	688a      	ldr	r2, [r1, #8]
 80093d2:	690b      	ldr	r3, [r1, #16]
 80093d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093d8:	4293      	cmp	r3, r2
 80093da:	bfb8      	it	lt
 80093dc:	4613      	movlt	r3, r2
 80093de:	6033      	str	r3, [r6, #0]
 80093e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093e4:	4607      	mov	r7, r0
 80093e6:	460c      	mov	r4, r1
 80093e8:	b10a      	cbz	r2, 80093ee <_printf_common+0x26>
 80093ea:	3301      	adds	r3, #1
 80093ec:	6033      	str	r3, [r6, #0]
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	0699      	lsls	r1, r3, #26
 80093f2:	bf42      	ittt	mi
 80093f4:	6833      	ldrmi	r3, [r6, #0]
 80093f6:	3302      	addmi	r3, #2
 80093f8:	6033      	strmi	r3, [r6, #0]
 80093fa:	6825      	ldr	r5, [r4, #0]
 80093fc:	f015 0506 	ands.w	r5, r5, #6
 8009400:	d106      	bne.n	8009410 <_printf_common+0x48>
 8009402:	f104 0a19 	add.w	sl, r4, #25
 8009406:	68e3      	ldr	r3, [r4, #12]
 8009408:	6832      	ldr	r2, [r6, #0]
 800940a:	1a9b      	subs	r3, r3, r2
 800940c:	42ab      	cmp	r3, r5
 800940e:	dc26      	bgt.n	800945e <_printf_common+0x96>
 8009410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009414:	1e13      	subs	r3, r2, #0
 8009416:	6822      	ldr	r2, [r4, #0]
 8009418:	bf18      	it	ne
 800941a:	2301      	movne	r3, #1
 800941c:	0692      	lsls	r2, r2, #26
 800941e:	d42b      	bmi.n	8009478 <_printf_common+0xb0>
 8009420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009424:	4649      	mov	r1, r9
 8009426:	4638      	mov	r0, r7
 8009428:	47c0      	blx	r8
 800942a:	3001      	adds	r0, #1
 800942c:	d01e      	beq.n	800946c <_printf_common+0xa4>
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	68e5      	ldr	r5, [r4, #12]
 8009432:	6832      	ldr	r2, [r6, #0]
 8009434:	f003 0306 	and.w	r3, r3, #6
 8009438:	2b04      	cmp	r3, #4
 800943a:	bf08      	it	eq
 800943c:	1aad      	subeq	r5, r5, r2
 800943e:	68a3      	ldr	r3, [r4, #8]
 8009440:	6922      	ldr	r2, [r4, #16]
 8009442:	bf0c      	ite	eq
 8009444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009448:	2500      	movne	r5, #0
 800944a:	4293      	cmp	r3, r2
 800944c:	bfc4      	itt	gt
 800944e:	1a9b      	subgt	r3, r3, r2
 8009450:	18ed      	addgt	r5, r5, r3
 8009452:	2600      	movs	r6, #0
 8009454:	341a      	adds	r4, #26
 8009456:	42b5      	cmp	r5, r6
 8009458:	d11a      	bne.n	8009490 <_printf_common+0xc8>
 800945a:	2000      	movs	r0, #0
 800945c:	e008      	b.n	8009470 <_printf_common+0xa8>
 800945e:	2301      	movs	r3, #1
 8009460:	4652      	mov	r2, sl
 8009462:	4649      	mov	r1, r9
 8009464:	4638      	mov	r0, r7
 8009466:	47c0      	blx	r8
 8009468:	3001      	adds	r0, #1
 800946a:	d103      	bne.n	8009474 <_printf_common+0xac>
 800946c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009474:	3501      	adds	r5, #1
 8009476:	e7c6      	b.n	8009406 <_printf_common+0x3e>
 8009478:	18e1      	adds	r1, r4, r3
 800947a:	1c5a      	adds	r2, r3, #1
 800947c:	2030      	movs	r0, #48	; 0x30
 800947e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009482:	4422      	add	r2, r4
 8009484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800948c:	3302      	adds	r3, #2
 800948e:	e7c7      	b.n	8009420 <_printf_common+0x58>
 8009490:	2301      	movs	r3, #1
 8009492:	4622      	mov	r2, r4
 8009494:	4649      	mov	r1, r9
 8009496:	4638      	mov	r0, r7
 8009498:	47c0      	blx	r8
 800949a:	3001      	adds	r0, #1
 800949c:	d0e6      	beq.n	800946c <_printf_common+0xa4>
 800949e:	3601      	adds	r6, #1
 80094a0:	e7d9      	b.n	8009456 <_printf_common+0x8e>
	...

080094a4 <_printf_i>:
 80094a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094a8:	460c      	mov	r4, r1
 80094aa:	4691      	mov	r9, r2
 80094ac:	7e27      	ldrb	r7, [r4, #24]
 80094ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80094b0:	2f78      	cmp	r7, #120	; 0x78
 80094b2:	4680      	mov	r8, r0
 80094b4:	469a      	mov	sl, r3
 80094b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094ba:	d807      	bhi.n	80094cc <_printf_i+0x28>
 80094bc:	2f62      	cmp	r7, #98	; 0x62
 80094be:	d80a      	bhi.n	80094d6 <_printf_i+0x32>
 80094c0:	2f00      	cmp	r7, #0
 80094c2:	f000 80d8 	beq.w	8009676 <_printf_i+0x1d2>
 80094c6:	2f58      	cmp	r7, #88	; 0x58
 80094c8:	f000 80a3 	beq.w	8009612 <_printf_i+0x16e>
 80094cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80094d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094d4:	e03a      	b.n	800954c <_printf_i+0xa8>
 80094d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094da:	2b15      	cmp	r3, #21
 80094dc:	d8f6      	bhi.n	80094cc <_printf_i+0x28>
 80094de:	a001      	add	r0, pc, #4	; (adr r0, 80094e4 <_printf_i+0x40>)
 80094e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80094e4:	0800953d 	.word	0x0800953d
 80094e8:	08009551 	.word	0x08009551
 80094ec:	080094cd 	.word	0x080094cd
 80094f0:	080094cd 	.word	0x080094cd
 80094f4:	080094cd 	.word	0x080094cd
 80094f8:	080094cd 	.word	0x080094cd
 80094fc:	08009551 	.word	0x08009551
 8009500:	080094cd 	.word	0x080094cd
 8009504:	080094cd 	.word	0x080094cd
 8009508:	080094cd 	.word	0x080094cd
 800950c:	080094cd 	.word	0x080094cd
 8009510:	0800965d 	.word	0x0800965d
 8009514:	08009581 	.word	0x08009581
 8009518:	0800963f 	.word	0x0800963f
 800951c:	080094cd 	.word	0x080094cd
 8009520:	080094cd 	.word	0x080094cd
 8009524:	0800967f 	.word	0x0800967f
 8009528:	080094cd 	.word	0x080094cd
 800952c:	08009581 	.word	0x08009581
 8009530:	080094cd 	.word	0x080094cd
 8009534:	080094cd 	.word	0x080094cd
 8009538:	08009647 	.word	0x08009647
 800953c:	680b      	ldr	r3, [r1, #0]
 800953e:	1d1a      	adds	r2, r3, #4
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	600a      	str	r2, [r1, #0]
 8009544:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800954c:	2301      	movs	r3, #1
 800954e:	e0a3      	b.n	8009698 <_printf_i+0x1f4>
 8009550:	6825      	ldr	r5, [r4, #0]
 8009552:	6808      	ldr	r0, [r1, #0]
 8009554:	062e      	lsls	r6, r5, #24
 8009556:	f100 0304 	add.w	r3, r0, #4
 800955a:	d50a      	bpl.n	8009572 <_printf_i+0xce>
 800955c:	6805      	ldr	r5, [r0, #0]
 800955e:	600b      	str	r3, [r1, #0]
 8009560:	2d00      	cmp	r5, #0
 8009562:	da03      	bge.n	800956c <_printf_i+0xc8>
 8009564:	232d      	movs	r3, #45	; 0x2d
 8009566:	426d      	negs	r5, r5
 8009568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800956c:	485e      	ldr	r0, [pc, #376]	; (80096e8 <_printf_i+0x244>)
 800956e:	230a      	movs	r3, #10
 8009570:	e019      	b.n	80095a6 <_printf_i+0x102>
 8009572:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009576:	6805      	ldr	r5, [r0, #0]
 8009578:	600b      	str	r3, [r1, #0]
 800957a:	bf18      	it	ne
 800957c:	b22d      	sxthne	r5, r5
 800957e:	e7ef      	b.n	8009560 <_printf_i+0xbc>
 8009580:	680b      	ldr	r3, [r1, #0]
 8009582:	6825      	ldr	r5, [r4, #0]
 8009584:	1d18      	adds	r0, r3, #4
 8009586:	6008      	str	r0, [r1, #0]
 8009588:	0628      	lsls	r0, r5, #24
 800958a:	d501      	bpl.n	8009590 <_printf_i+0xec>
 800958c:	681d      	ldr	r5, [r3, #0]
 800958e:	e002      	b.n	8009596 <_printf_i+0xf2>
 8009590:	0669      	lsls	r1, r5, #25
 8009592:	d5fb      	bpl.n	800958c <_printf_i+0xe8>
 8009594:	881d      	ldrh	r5, [r3, #0]
 8009596:	4854      	ldr	r0, [pc, #336]	; (80096e8 <_printf_i+0x244>)
 8009598:	2f6f      	cmp	r7, #111	; 0x6f
 800959a:	bf0c      	ite	eq
 800959c:	2308      	moveq	r3, #8
 800959e:	230a      	movne	r3, #10
 80095a0:	2100      	movs	r1, #0
 80095a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095a6:	6866      	ldr	r6, [r4, #4]
 80095a8:	60a6      	str	r6, [r4, #8]
 80095aa:	2e00      	cmp	r6, #0
 80095ac:	bfa2      	ittt	ge
 80095ae:	6821      	ldrge	r1, [r4, #0]
 80095b0:	f021 0104 	bicge.w	r1, r1, #4
 80095b4:	6021      	strge	r1, [r4, #0]
 80095b6:	b90d      	cbnz	r5, 80095bc <_printf_i+0x118>
 80095b8:	2e00      	cmp	r6, #0
 80095ba:	d04d      	beq.n	8009658 <_printf_i+0x1b4>
 80095bc:	4616      	mov	r6, r2
 80095be:	fbb5 f1f3 	udiv	r1, r5, r3
 80095c2:	fb03 5711 	mls	r7, r3, r1, r5
 80095c6:	5dc7      	ldrb	r7, [r0, r7]
 80095c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095cc:	462f      	mov	r7, r5
 80095ce:	42bb      	cmp	r3, r7
 80095d0:	460d      	mov	r5, r1
 80095d2:	d9f4      	bls.n	80095be <_printf_i+0x11a>
 80095d4:	2b08      	cmp	r3, #8
 80095d6:	d10b      	bne.n	80095f0 <_printf_i+0x14c>
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	07df      	lsls	r7, r3, #31
 80095dc:	d508      	bpl.n	80095f0 <_printf_i+0x14c>
 80095de:	6923      	ldr	r3, [r4, #16]
 80095e0:	6861      	ldr	r1, [r4, #4]
 80095e2:	4299      	cmp	r1, r3
 80095e4:	bfde      	ittt	le
 80095e6:	2330      	movle	r3, #48	; 0x30
 80095e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095ec:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80095f0:	1b92      	subs	r2, r2, r6
 80095f2:	6122      	str	r2, [r4, #16]
 80095f4:	f8cd a000 	str.w	sl, [sp]
 80095f8:	464b      	mov	r3, r9
 80095fa:	aa03      	add	r2, sp, #12
 80095fc:	4621      	mov	r1, r4
 80095fe:	4640      	mov	r0, r8
 8009600:	f7ff fee2 	bl	80093c8 <_printf_common>
 8009604:	3001      	adds	r0, #1
 8009606:	d14c      	bne.n	80096a2 <_printf_i+0x1fe>
 8009608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800960c:	b004      	add	sp, #16
 800960e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009612:	4835      	ldr	r0, [pc, #212]	; (80096e8 <_printf_i+0x244>)
 8009614:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	680e      	ldr	r6, [r1, #0]
 800961c:	061f      	lsls	r7, r3, #24
 800961e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009622:	600e      	str	r6, [r1, #0]
 8009624:	d514      	bpl.n	8009650 <_printf_i+0x1ac>
 8009626:	07d9      	lsls	r1, r3, #31
 8009628:	bf44      	itt	mi
 800962a:	f043 0320 	orrmi.w	r3, r3, #32
 800962e:	6023      	strmi	r3, [r4, #0]
 8009630:	b91d      	cbnz	r5, 800963a <_printf_i+0x196>
 8009632:	6823      	ldr	r3, [r4, #0]
 8009634:	f023 0320 	bic.w	r3, r3, #32
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	2310      	movs	r3, #16
 800963c:	e7b0      	b.n	80095a0 <_printf_i+0xfc>
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	f043 0320 	orr.w	r3, r3, #32
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	2378      	movs	r3, #120	; 0x78
 8009648:	4828      	ldr	r0, [pc, #160]	; (80096ec <_printf_i+0x248>)
 800964a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800964e:	e7e3      	b.n	8009618 <_printf_i+0x174>
 8009650:	065e      	lsls	r6, r3, #25
 8009652:	bf48      	it	mi
 8009654:	b2ad      	uxthmi	r5, r5
 8009656:	e7e6      	b.n	8009626 <_printf_i+0x182>
 8009658:	4616      	mov	r6, r2
 800965a:	e7bb      	b.n	80095d4 <_printf_i+0x130>
 800965c:	680b      	ldr	r3, [r1, #0]
 800965e:	6826      	ldr	r6, [r4, #0]
 8009660:	6960      	ldr	r0, [r4, #20]
 8009662:	1d1d      	adds	r5, r3, #4
 8009664:	600d      	str	r5, [r1, #0]
 8009666:	0635      	lsls	r5, r6, #24
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	d501      	bpl.n	8009670 <_printf_i+0x1cc>
 800966c:	6018      	str	r0, [r3, #0]
 800966e:	e002      	b.n	8009676 <_printf_i+0x1d2>
 8009670:	0671      	lsls	r1, r6, #25
 8009672:	d5fb      	bpl.n	800966c <_printf_i+0x1c8>
 8009674:	8018      	strh	r0, [r3, #0]
 8009676:	2300      	movs	r3, #0
 8009678:	6123      	str	r3, [r4, #16]
 800967a:	4616      	mov	r6, r2
 800967c:	e7ba      	b.n	80095f4 <_printf_i+0x150>
 800967e:	680b      	ldr	r3, [r1, #0]
 8009680:	1d1a      	adds	r2, r3, #4
 8009682:	600a      	str	r2, [r1, #0]
 8009684:	681e      	ldr	r6, [r3, #0]
 8009686:	6862      	ldr	r2, [r4, #4]
 8009688:	2100      	movs	r1, #0
 800968a:	4630      	mov	r0, r6
 800968c:	f7f6 fdb0 	bl	80001f0 <memchr>
 8009690:	b108      	cbz	r0, 8009696 <_printf_i+0x1f2>
 8009692:	1b80      	subs	r0, r0, r6
 8009694:	6060      	str	r0, [r4, #4]
 8009696:	6863      	ldr	r3, [r4, #4]
 8009698:	6123      	str	r3, [r4, #16]
 800969a:	2300      	movs	r3, #0
 800969c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096a0:	e7a8      	b.n	80095f4 <_printf_i+0x150>
 80096a2:	6923      	ldr	r3, [r4, #16]
 80096a4:	4632      	mov	r2, r6
 80096a6:	4649      	mov	r1, r9
 80096a8:	4640      	mov	r0, r8
 80096aa:	47d0      	blx	sl
 80096ac:	3001      	adds	r0, #1
 80096ae:	d0ab      	beq.n	8009608 <_printf_i+0x164>
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	079b      	lsls	r3, r3, #30
 80096b4:	d413      	bmi.n	80096de <_printf_i+0x23a>
 80096b6:	68e0      	ldr	r0, [r4, #12]
 80096b8:	9b03      	ldr	r3, [sp, #12]
 80096ba:	4298      	cmp	r0, r3
 80096bc:	bfb8      	it	lt
 80096be:	4618      	movlt	r0, r3
 80096c0:	e7a4      	b.n	800960c <_printf_i+0x168>
 80096c2:	2301      	movs	r3, #1
 80096c4:	4632      	mov	r2, r6
 80096c6:	4649      	mov	r1, r9
 80096c8:	4640      	mov	r0, r8
 80096ca:	47d0      	blx	sl
 80096cc:	3001      	adds	r0, #1
 80096ce:	d09b      	beq.n	8009608 <_printf_i+0x164>
 80096d0:	3501      	adds	r5, #1
 80096d2:	68e3      	ldr	r3, [r4, #12]
 80096d4:	9903      	ldr	r1, [sp, #12]
 80096d6:	1a5b      	subs	r3, r3, r1
 80096d8:	42ab      	cmp	r3, r5
 80096da:	dcf2      	bgt.n	80096c2 <_printf_i+0x21e>
 80096dc:	e7eb      	b.n	80096b6 <_printf_i+0x212>
 80096de:	2500      	movs	r5, #0
 80096e0:	f104 0619 	add.w	r6, r4, #25
 80096e4:	e7f5      	b.n	80096d2 <_printf_i+0x22e>
 80096e6:	bf00      	nop
 80096e8:	08009b8d 	.word	0x08009b8d
 80096ec:	08009b9e 	.word	0x08009b9e

080096f0 <_sbrk_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4d06      	ldr	r5, [pc, #24]	; (800970c <_sbrk_r+0x1c>)
 80096f4:	2300      	movs	r3, #0
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	602b      	str	r3, [r5, #0]
 80096fc:	f7f8 ff8c 	bl	8002618 <_sbrk>
 8009700:	1c43      	adds	r3, r0, #1
 8009702:	d102      	bne.n	800970a <_sbrk_r+0x1a>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	b103      	cbz	r3, 800970a <_sbrk_r+0x1a>
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	20000828 	.word	0x20000828

08009710 <__sread>:
 8009710:	b510      	push	{r4, lr}
 8009712:	460c      	mov	r4, r1
 8009714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009718:	f000 f8a0 	bl	800985c <_read_r>
 800971c:	2800      	cmp	r0, #0
 800971e:	bfab      	itete	ge
 8009720:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009722:	89a3      	ldrhlt	r3, [r4, #12]
 8009724:	181b      	addge	r3, r3, r0
 8009726:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800972a:	bfac      	ite	ge
 800972c:	6563      	strge	r3, [r4, #84]	; 0x54
 800972e:	81a3      	strhlt	r3, [r4, #12]
 8009730:	bd10      	pop	{r4, pc}

08009732 <__swrite>:
 8009732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009736:	461f      	mov	r7, r3
 8009738:	898b      	ldrh	r3, [r1, #12]
 800973a:	05db      	lsls	r3, r3, #23
 800973c:	4605      	mov	r5, r0
 800973e:	460c      	mov	r4, r1
 8009740:	4616      	mov	r6, r2
 8009742:	d505      	bpl.n	8009750 <__swrite+0x1e>
 8009744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009748:	2302      	movs	r3, #2
 800974a:	2200      	movs	r2, #0
 800974c:	f000 f868 	bl	8009820 <_lseek_r>
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800975a:	81a3      	strh	r3, [r4, #12]
 800975c:	4632      	mov	r2, r6
 800975e:	463b      	mov	r3, r7
 8009760:	4628      	mov	r0, r5
 8009762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009766:	f000 b817 	b.w	8009798 <_write_r>

0800976a <__sseek>:
 800976a:	b510      	push	{r4, lr}
 800976c:	460c      	mov	r4, r1
 800976e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009772:	f000 f855 	bl	8009820 <_lseek_r>
 8009776:	1c43      	adds	r3, r0, #1
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	bf15      	itete	ne
 800977c:	6560      	strne	r0, [r4, #84]	; 0x54
 800977e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009782:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009786:	81a3      	strheq	r3, [r4, #12]
 8009788:	bf18      	it	ne
 800978a:	81a3      	strhne	r3, [r4, #12]
 800978c:	bd10      	pop	{r4, pc}

0800978e <__sclose>:
 800978e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009792:	f000 b813 	b.w	80097bc <_close_r>
	...

08009798 <_write_r>:
 8009798:	b538      	push	{r3, r4, r5, lr}
 800979a:	4d07      	ldr	r5, [pc, #28]	; (80097b8 <_write_r+0x20>)
 800979c:	4604      	mov	r4, r0
 800979e:	4608      	mov	r0, r1
 80097a0:	4611      	mov	r1, r2
 80097a2:	2200      	movs	r2, #0
 80097a4:	602a      	str	r2, [r5, #0]
 80097a6:	461a      	mov	r2, r3
 80097a8:	f7f8 fb0c 	bl	8001dc4 <_write>
 80097ac:	1c43      	adds	r3, r0, #1
 80097ae:	d102      	bne.n	80097b6 <_write_r+0x1e>
 80097b0:	682b      	ldr	r3, [r5, #0]
 80097b2:	b103      	cbz	r3, 80097b6 <_write_r+0x1e>
 80097b4:	6023      	str	r3, [r4, #0]
 80097b6:	bd38      	pop	{r3, r4, r5, pc}
 80097b8:	20000828 	.word	0x20000828

080097bc <_close_r>:
 80097bc:	b538      	push	{r3, r4, r5, lr}
 80097be:	4d06      	ldr	r5, [pc, #24]	; (80097d8 <_close_r+0x1c>)
 80097c0:	2300      	movs	r3, #0
 80097c2:	4604      	mov	r4, r0
 80097c4:	4608      	mov	r0, r1
 80097c6:	602b      	str	r3, [r5, #0]
 80097c8:	f7f8 fb28 	bl	8001e1c <_close>
 80097cc:	1c43      	adds	r3, r0, #1
 80097ce:	d102      	bne.n	80097d6 <_close_r+0x1a>
 80097d0:	682b      	ldr	r3, [r5, #0]
 80097d2:	b103      	cbz	r3, 80097d6 <_close_r+0x1a>
 80097d4:	6023      	str	r3, [r4, #0]
 80097d6:	bd38      	pop	{r3, r4, r5, pc}
 80097d8:	20000828 	.word	0x20000828

080097dc <_fstat_r>:
 80097dc:	b538      	push	{r3, r4, r5, lr}
 80097de:	4d07      	ldr	r5, [pc, #28]	; (80097fc <_fstat_r+0x20>)
 80097e0:	2300      	movs	r3, #0
 80097e2:	4604      	mov	r4, r0
 80097e4:	4608      	mov	r0, r1
 80097e6:	4611      	mov	r1, r2
 80097e8:	602b      	str	r3, [r5, #0]
 80097ea:	f7f8 fb67 	bl	8001ebc <_fstat>
 80097ee:	1c43      	adds	r3, r0, #1
 80097f0:	d102      	bne.n	80097f8 <_fstat_r+0x1c>
 80097f2:	682b      	ldr	r3, [r5, #0]
 80097f4:	b103      	cbz	r3, 80097f8 <_fstat_r+0x1c>
 80097f6:	6023      	str	r3, [r4, #0]
 80097f8:	bd38      	pop	{r3, r4, r5, pc}
 80097fa:	bf00      	nop
 80097fc:	20000828 	.word	0x20000828

08009800 <_isatty_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	4d06      	ldr	r5, [pc, #24]	; (800981c <_isatty_r+0x1c>)
 8009804:	2300      	movs	r3, #0
 8009806:	4604      	mov	r4, r0
 8009808:	4608      	mov	r0, r1
 800980a:	602b      	str	r3, [r5, #0]
 800980c:	f7f8 fac4 	bl	8001d98 <_isatty>
 8009810:	1c43      	adds	r3, r0, #1
 8009812:	d102      	bne.n	800981a <_isatty_r+0x1a>
 8009814:	682b      	ldr	r3, [r5, #0]
 8009816:	b103      	cbz	r3, 800981a <_isatty_r+0x1a>
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	bd38      	pop	{r3, r4, r5, pc}
 800981c:	20000828 	.word	0x20000828

08009820 <_lseek_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	4d07      	ldr	r5, [pc, #28]	; (8009840 <_lseek_r+0x20>)
 8009824:	4604      	mov	r4, r0
 8009826:	4608      	mov	r0, r1
 8009828:	4611      	mov	r1, r2
 800982a:	2200      	movs	r2, #0
 800982c:	602a      	str	r2, [r5, #0]
 800982e:	461a      	mov	r2, r3
 8009830:	f7f8 fb0b 	bl	8001e4a <_lseek>
 8009834:	1c43      	adds	r3, r0, #1
 8009836:	d102      	bne.n	800983e <_lseek_r+0x1e>
 8009838:	682b      	ldr	r3, [r5, #0]
 800983a:	b103      	cbz	r3, 800983e <_lseek_r+0x1e>
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	bd38      	pop	{r3, r4, r5, pc}
 8009840:	20000828 	.word	0x20000828

08009844 <__malloc_lock>:
 8009844:	4801      	ldr	r0, [pc, #4]	; (800984c <__malloc_lock+0x8>)
 8009846:	f7ff bb4d 	b.w	8008ee4 <__retarget_lock_acquire_recursive>
 800984a:	bf00      	nop
 800984c:	20000820 	.word	0x20000820

08009850 <__malloc_unlock>:
 8009850:	4801      	ldr	r0, [pc, #4]	; (8009858 <__malloc_unlock+0x8>)
 8009852:	f7ff bb48 	b.w	8008ee6 <__retarget_lock_release_recursive>
 8009856:	bf00      	nop
 8009858:	20000820 	.word	0x20000820

0800985c <_read_r>:
 800985c:	b538      	push	{r3, r4, r5, lr}
 800985e:	4d07      	ldr	r5, [pc, #28]	; (800987c <_read_r+0x20>)
 8009860:	4604      	mov	r4, r0
 8009862:	4608      	mov	r0, r1
 8009864:	4611      	mov	r1, r2
 8009866:	2200      	movs	r2, #0
 8009868:	602a      	str	r2, [r5, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	f7f8 fafe 	bl	8001e6c <_read>
 8009870:	1c43      	adds	r3, r0, #1
 8009872:	d102      	bne.n	800987a <_read_r+0x1e>
 8009874:	682b      	ldr	r3, [r5, #0]
 8009876:	b103      	cbz	r3, 800987a <_read_r+0x1e>
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	bd38      	pop	{r3, r4, r5, pc}
 800987c:	20000828 	.word	0x20000828

08009880 <sqrt>:
 8009880:	b538      	push	{r3, r4, r5, lr}
 8009882:	ed2d 8b02 	vpush	{d8}
 8009886:	ec55 4b10 	vmov	r4, r5, d0
 800988a:	f000 f82d 	bl	80098e8 <__ieee754_sqrt>
 800988e:	4b15      	ldr	r3, [pc, #84]	; (80098e4 <sqrt+0x64>)
 8009890:	eeb0 8a40 	vmov.f32	s16, s0
 8009894:	eef0 8a60 	vmov.f32	s17, s1
 8009898:	f993 3000 	ldrsb.w	r3, [r3]
 800989c:	3301      	adds	r3, #1
 800989e:	d019      	beq.n	80098d4 <sqrt+0x54>
 80098a0:	4622      	mov	r2, r4
 80098a2:	462b      	mov	r3, r5
 80098a4:	4620      	mov	r0, r4
 80098a6:	4629      	mov	r1, r5
 80098a8:	f7f7 f948 	bl	8000b3c <__aeabi_dcmpun>
 80098ac:	b990      	cbnz	r0, 80098d4 <sqrt+0x54>
 80098ae:	2200      	movs	r2, #0
 80098b0:	2300      	movs	r3, #0
 80098b2:	4620      	mov	r0, r4
 80098b4:	4629      	mov	r1, r5
 80098b6:	f7f7 f919 	bl	8000aec <__aeabi_dcmplt>
 80098ba:	b158      	cbz	r0, 80098d4 <sqrt+0x54>
 80098bc:	f7fe ff14 	bl	80086e8 <__errno>
 80098c0:	2321      	movs	r3, #33	; 0x21
 80098c2:	6003      	str	r3, [r0, #0]
 80098c4:	2200      	movs	r2, #0
 80098c6:	2300      	movs	r3, #0
 80098c8:	4610      	mov	r0, r2
 80098ca:	4619      	mov	r1, r3
 80098cc:	f7f6 ffc6 	bl	800085c <__aeabi_ddiv>
 80098d0:	ec41 0b18 	vmov	d8, r0, r1
 80098d4:	eeb0 0a48 	vmov.f32	s0, s16
 80098d8:	eef0 0a68 	vmov.f32	s1, s17
 80098dc:	ecbd 8b02 	vpop	{d8}
 80098e0:	bd38      	pop	{r3, r4, r5, pc}
 80098e2:	bf00      	nop
 80098e4:	20000078 	.word	0x20000078

080098e8 <__ieee754_sqrt>:
 80098e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ec:	ec55 4b10 	vmov	r4, r5, d0
 80098f0:	4e56      	ldr	r6, [pc, #344]	; (8009a4c <__ieee754_sqrt+0x164>)
 80098f2:	43ae      	bics	r6, r5
 80098f4:	ee10 0a10 	vmov	r0, s0
 80098f8:	ee10 3a10 	vmov	r3, s0
 80098fc:	4629      	mov	r1, r5
 80098fe:	462a      	mov	r2, r5
 8009900:	d110      	bne.n	8009924 <__ieee754_sqrt+0x3c>
 8009902:	ee10 2a10 	vmov	r2, s0
 8009906:	462b      	mov	r3, r5
 8009908:	f7f6 fe7e 	bl	8000608 <__aeabi_dmul>
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	4620      	mov	r0, r4
 8009912:	4629      	mov	r1, r5
 8009914:	f7f6 fcc2 	bl	800029c <__adddf3>
 8009918:	4604      	mov	r4, r0
 800991a:	460d      	mov	r5, r1
 800991c:	ec45 4b10 	vmov	d0, r4, r5
 8009920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009924:	2d00      	cmp	r5, #0
 8009926:	dc10      	bgt.n	800994a <__ieee754_sqrt+0x62>
 8009928:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800992c:	4330      	orrs	r0, r6
 800992e:	d0f5      	beq.n	800991c <__ieee754_sqrt+0x34>
 8009930:	b15d      	cbz	r5, 800994a <__ieee754_sqrt+0x62>
 8009932:	ee10 2a10 	vmov	r2, s0
 8009936:	462b      	mov	r3, r5
 8009938:	ee10 0a10 	vmov	r0, s0
 800993c:	f7f6 fcac 	bl	8000298 <__aeabi_dsub>
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	f7f6 ff8a 	bl	800085c <__aeabi_ddiv>
 8009948:	e7e6      	b.n	8009918 <__ieee754_sqrt+0x30>
 800994a:	1509      	asrs	r1, r1, #20
 800994c:	d076      	beq.n	8009a3c <__ieee754_sqrt+0x154>
 800994e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009952:	07ce      	lsls	r6, r1, #31
 8009954:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009958:	bf5e      	ittt	pl
 800995a:	0fda      	lsrpl	r2, r3, #31
 800995c:	005b      	lslpl	r3, r3, #1
 800995e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009962:	0fda      	lsrs	r2, r3, #31
 8009964:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009968:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800996c:	2000      	movs	r0, #0
 800996e:	106d      	asrs	r5, r5, #1
 8009970:	005b      	lsls	r3, r3, #1
 8009972:	f04f 0e16 	mov.w	lr, #22
 8009976:	4684      	mov	ip, r0
 8009978:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800997c:	eb0c 0401 	add.w	r4, ip, r1
 8009980:	4294      	cmp	r4, r2
 8009982:	bfde      	ittt	le
 8009984:	1b12      	suble	r2, r2, r4
 8009986:	eb04 0c01 	addle.w	ip, r4, r1
 800998a:	1840      	addle	r0, r0, r1
 800998c:	0052      	lsls	r2, r2, #1
 800998e:	f1be 0e01 	subs.w	lr, lr, #1
 8009992:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009996:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800999a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800999e:	d1ed      	bne.n	800997c <__ieee754_sqrt+0x94>
 80099a0:	4671      	mov	r1, lr
 80099a2:	2720      	movs	r7, #32
 80099a4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80099a8:	4562      	cmp	r2, ip
 80099aa:	eb04 060e 	add.w	r6, r4, lr
 80099ae:	dc02      	bgt.n	80099b6 <__ieee754_sqrt+0xce>
 80099b0:	d113      	bne.n	80099da <__ieee754_sqrt+0xf2>
 80099b2:	429e      	cmp	r6, r3
 80099b4:	d811      	bhi.n	80099da <__ieee754_sqrt+0xf2>
 80099b6:	2e00      	cmp	r6, #0
 80099b8:	eb06 0e04 	add.w	lr, r6, r4
 80099bc:	da43      	bge.n	8009a46 <__ieee754_sqrt+0x15e>
 80099be:	f1be 0f00 	cmp.w	lr, #0
 80099c2:	db40      	blt.n	8009a46 <__ieee754_sqrt+0x15e>
 80099c4:	f10c 0801 	add.w	r8, ip, #1
 80099c8:	eba2 020c 	sub.w	r2, r2, ip
 80099cc:	429e      	cmp	r6, r3
 80099ce:	bf88      	it	hi
 80099d0:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80099d4:	1b9b      	subs	r3, r3, r6
 80099d6:	4421      	add	r1, r4
 80099d8:	46c4      	mov	ip, r8
 80099da:	0052      	lsls	r2, r2, #1
 80099dc:	3f01      	subs	r7, #1
 80099de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80099e2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80099e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80099ea:	d1dd      	bne.n	80099a8 <__ieee754_sqrt+0xc0>
 80099ec:	4313      	orrs	r3, r2
 80099ee:	d006      	beq.n	80099fe <__ieee754_sqrt+0x116>
 80099f0:	1c4c      	adds	r4, r1, #1
 80099f2:	bf13      	iteet	ne
 80099f4:	3101      	addne	r1, #1
 80099f6:	3001      	addeq	r0, #1
 80099f8:	4639      	moveq	r1, r7
 80099fa:	f021 0101 	bicne.w	r1, r1, #1
 80099fe:	1043      	asrs	r3, r0, #1
 8009a00:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009a04:	0849      	lsrs	r1, r1, #1
 8009a06:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009a0a:	07c2      	lsls	r2, r0, #31
 8009a0c:	bf48      	it	mi
 8009a0e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009a12:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009a16:	460c      	mov	r4, r1
 8009a18:	463d      	mov	r5, r7
 8009a1a:	e77f      	b.n	800991c <__ieee754_sqrt+0x34>
 8009a1c:	0ada      	lsrs	r2, r3, #11
 8009a1e:	3815      	subs	r0, #21
 8009a20:	055b      	lsls	r3, r3, #21
 8009a22:	2a00      	cmp	r2, #0
 8009a24:	d0fa      	beq.n	8009a1c <__ieee754_sqrt+0x134>
 8009a26:	02d7      	lsls	r7, r2, #11
 8009a28:	d50a      	bpl.n	8009a40 <__ieee754_sqrt+0x158>
 8009a2a:	f1c1 0420 	rsb	r4, r1, #32
 8009a2e:	fa23 f404 	lsr.w	r4, r3, r4
 8009a32:	1e4d      	subs	r5, r1, #1
 8009a34:	408b      	lsls	r3, r1
 8009a36:	4322      	orrs	r2, r4
 8009a38:	1b41      	subs	r1, r0, r5
 8009a3a:	e788      	b.n	800994e <__ieee754_sqrt+0x66>
 8009a3c:	4608      	mov	r0, r1
 8009a3e:	e7f0      	b.n	8009a22 <__ieee754_sqrt+0x13a>
 8009a40:	0052      	lsls	r2, r2, #1
 8009a42:	3101      	adds	r1, #1
 8009a44:	e7ef      	b.n	8009a26 <__ieee754_sqrt+0x13e>
 8009a46:	46e0      	mov	r8, ip
 8009a48:	e7be      	b.n	80099c8 <__ieee754_sqrt+0xe0>
 8009a4a:	bf00      	nop
 8009a4c:	7ff00000 	.word	0x7ff00000

08009a50 <_init>:
 8009a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a52:	bf00      	nop
 8009a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a56:	bc08      	pop	{r3}
 8009a58:	469e      	mov	lr, r3
 8009a5a:	4770      	bx	lr

08009a5c <_fini>:
 8009a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5e:	bf00      	nop
 8009a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a62:	bc08      	pop	{r3}
 8009a64:	469e      	mov	lr, r3
 8009a66:	4770      	bx	lr
