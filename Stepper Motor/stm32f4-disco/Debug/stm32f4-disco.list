
stm32f4-disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007118  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072f0  080072f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080072f0  080072f0  000172f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072f8  080072f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072f8  080072f8  000172f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072fc  080072fc  000172fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  2000000c  0800730c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  0800730c  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028851  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004eab  00000000  00000000  0004888d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a80  00000000  00000000  0004d738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018a0  00000000  00000000  0004f1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ef8  00000000  00000000  00050a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023380  00000000  00000000  00079950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e70c8  00000000  00000000  0009ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00183d98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f2c  00000000  00000000  00183dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080072ac 	.word	0x080072ac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080072ac 	.word	0x080072ac

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_CRC_Init+0x20>)
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <MX_CRC_Init+0x24>)
 80004ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_CRC_Init+0x20>)
 80004f0:	f001 fbd8 	bl	8001ca4 <HAL_CRC_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004fa:	f000 fe0f 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000030 	.word	0x20000030
 8000508:	40023000 	.word	0x40023000

0800050c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <HAL_CRC_MspInit+0x3c>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d10d      	bne.n	800053a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a09      	ldr	r2, [pc, #36]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40023000 	.word	0x40023000
 800054c:	40023800 	.word	0x40023800

08000550 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000556:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <MX_DMA2D_Init+0x60>)
 8000558:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <MX_DMA2D_Init+0x5c>)
 800055c:	2200      	movs	r2, #0
 800055e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000566:	4b11      	ldr	r3, [pc, #68]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000568:	2200      	movs	r2, #0
 800056a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800056c:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_DMA2D_Init+0x5c>)
 800056e:	2200      	movs	r2, #0
 8000570:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000574:	2200      	movs	r2, #0
 8000576:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <MX_DMA2D_Init+0x5c>)
 800057a:	2200      	movs	r2, #0
 800057c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000580:	2200      	movs	r2, #0
 8000582:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000584:	4809      	ldr	r0, [pc, #36]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000586:	f001 fc3b 	bl	8001e00 <HAL_DMA2D_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000590:	f000 fdc4 	bl	800111c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000594:	2101      	movs	r1, #1
 8000596:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000598:	f001 fd8c 	bl	80020b4 <HAL_DMA2D_ConfigLayer>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005a2:	f000 fdbb 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000044 	.word	0x20000044
 80005b0:	4002b000 	.word	0x4002b000

080005b4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <HAL_DMA2D_MspInit+0x48>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d115      	bne.n	80005f2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <HAL_DMA2D_MspInit+0x4c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <HAL_DMA2D_MspInit+0x4c>)
 80005d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_DMA2D_MspInit+0x4c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2105      	movs	r1, #5
 80005e6:	205a      	movs	r0, #90	; 0x5a
 80005e8:	f001 fb32 	bl	8001c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80005ec:	205a      	movs	r0, #90	; 0x5a
 80005ee:	f001 fb4b 	bl	8001c88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	4002b000 	.word	0x4002b000
 8000600:	40023800 	.word	0x40023800

08000604 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
 8000618:	615a      	str	r2, [r3, #20]
 800061a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_FMC_Init+0x98>)
 800061e:	4a20      	ldr	r2, [pc, #128]	; (80006a0 <MX_FMC_Init+0x9c>)
 8000620:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_FMC_Init+0x98>)
 8000624:	2201      	movs	r2, #1
 8000626:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_FMC_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_FMC_Init+0x98>)
 8000630:	2204      	movs	r2, #4
 8000632:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000634:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_FMC_Init+0x98>)
 8000636:	2210      	movs	r2, #16
 8000638:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_FMC_Init+0x98>)
 800063c:	2240      	movs	r2, #64	; 0x40
 800063e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_FMC_Init+0x98>)
 8000642:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000646:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_FMC_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_FMC_Init+0x98>)
 8000650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000654:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_FMC_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_FMC_Init+0x98>)
 800065e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000662:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000664:	2302      	movs	r3, #2
 8000666:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000668:	2307      	movs	r3, #7
 800066a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000670:	2307      	movs	r3, #7
 8000672:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000674:	2303      	movs	r3, #3
 8000676:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800067c:	2302      	movs	r3, #2
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_FMC_Init+0x98>)
 8000686:	f004 fe35 	bl	80052f4 <HAL_SDRAM_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000690:	f000 fd44 	bl	800111c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000084 	.word	0x20000084
 80006a0:	a0000140 	.word	0xa0000140

080006a4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006b8:	4b3b      	ldr	r3, [pc, #236]	; (80007a8 <HAL_FMC_MspInit+0x104>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d16f      	bne.n	80007a0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80006c0:	4b39      	ldr	r3, [pc, #228]	; (80007a8 <HAL_FMC_MspInit+0x104>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b38      	ldr	r3, [pc, #224]	; (80007ac <HAL_FMC_MspInit+0x108>)
 80006cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ce:	4a37      	ldr	r2, [pc, #220]	; (80007ac <HAL_FMC_MspInit+0x108>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6393      	str	r3, [r2, #56]	; 0x38
 80006d6:	4b35      	ldr	r3, [pc, #212]	; (80007ac <HAL_FMC_MspInit+0x108>)
 80006d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80006e2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80006e6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006f4:	230c      	movs	r3, #12
 80006f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	482c      	ldr	r0, [pc, #176]	; (80007b0 <HAL_FMC_MspInit+0x10c>)
 80006fe:	f001 fd6b 	bl	80021d8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000702:	2301      	movs	r3, #1
 8000704:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000712:	230c      	movs	r3, #12
 8000714:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4619      	mov	r1, r3
 800071a:	4826      	ldr	r0, [pc, #152]	; (80007b4 <HAL_FMC_MspInit+0x110>)
 800071c:	f001 fd5c 	bl	80021d8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000720:	f248 1333 	movw	r3, #33075	; 0x8133
 8000724:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000726:	2302      	movs	r3, #2
 8000728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072e:	2303      	movs	r3, #3
 8000730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000732:	230c      	movs	r3, #12
 8000734:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4619      	mov	r1, r3
 800073a:	481f      	ldr	r0, [pc, #124]	; (80007b8 <HAL_FMC_MspInit+0x114>)
 800073c:	f001 fd4c 	bl	80021d8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000740:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000744:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000752:	230c      	movs	r3, #12
 8000754:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4818      	ldr	r0, [pc, #96]	; (80007bc <HAL_FMC_MspInit+0x118>)
 800075c:	f001 fd3c 	bl	80021d8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000760:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000764:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000772:	230c      	movs	r3, #12
 8000774:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4619      	mov	r1, r3
 800077a:	4811      	ldr	r0, [pc, #68]	; (80007c0 <HAL_FMC_MspInit+0x11c>)
 800077c:	f001 fd2c 	bl	80021d8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000780:	2360      	movs	r3, #96	; 0x60
 8000782:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000790:	230c      	movs	r3, #12
 8000792:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4619      	mov	r1, r3
 8000798:	480a      	ldr	r0, [pc, #40]	; (80007c4 <HAL_FMC_MspInit+0x120>)
 800079a:	f001 fd1d 	bl	80021d8 <HAL_GPIO_Init>
 800079e:	e000      	b.n	80007a2 <HAL_FMC_MspInit+0xfe>
    return;
 80007a0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000028 	.word	0x20000028
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40021400 	.word	0x40021400
 80007b4:	40020800 	.word	0x40020800
 80007b8:	40021800 	.word	0x40021800
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40020c00 	.word	0x40020c00
 80007c4:	40020400 	.word	0x40020400

080007c8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80007d0:	f7ff ff68 	bl	80006a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	; 0x38
 80007e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
 80007f6:	4b8d      	ldr	r3, [pc, #564]	; (8000a2c <MX_GPIO_Init+0x250>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a8c      	ldr	r2, [pc, #560]	; (8000a2c <MX_GPIO_Init+0x250>)
 80007fc:	f043 0310 	orr.w	r3, r3, #16
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b8a      	ldr	r3, [pc, #552]	; (8000a2c <MX_GPIO_Init+0x250>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	623b      	str	r3, [r7, #32]
 800080c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
 8000812:	4b86      	ldr	r3, [pc, #536]	; (8000a2c <MX_GPIO_Init+0x250>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a85      	ldr	r2, [pc, #532]	; (8000a2c <MX_GPIO_Init+0x250>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b83      	ldr	r3, [pc, #524]	; (8000a2c <MX_GPIO_Init+0x250>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	61fb      	str	r3, [r7, #28]
 8000828:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	4b7f      	ldr	r3, [pc, #508]	; (8000a2c <MX_GPIO_Init+0x250>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a7e      	ldr	r2, [pc, #504]	; (8000a2c <MX_GPIO_Init+0x250>)
 8000834:	f043 0320 	orr.w	r3, r3, #32
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b7c      	ldr	r3, [pc, #496]	; (8000a2c <MX_GPIO_Init+0x250>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0320 	and.w	r3, r3, #32
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	4b78      	ldr	r3, [pc, #480]	; (8000a2c <MX_GPIO_Init+0x250>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a77      	ldr	r2, [pc, #476]	; (8000a2c <MX_GPIO_Init+0x250>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b75      	ldr	r3, [pc, #468]	; (8000a2c <MX_GPIO_Init+0x250>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b71      	ldr	r3, [pc, #452]	; (8000a2c <MX_GPIO_Init+0x250>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a70      	ldr	r2, [pc, #448]	; (8000a2c <MX_GPIO_Init+0x250>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b6e      	ldr	r3, [pc, #440]	; (8000a2c <MX_GPIO_Init+0x250>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b6a      	ldr	r3, [pc, #424]	; (8000a2c <MX_GPIO_Init+0x250>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a69      	ldr	r2, [pc, #420]	; (8000a2c <MX_GPIO_Init+0x250>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b67      	ldr	r3, [pc, #412]	; (8000a2c <MX_GPIO_Init+0x250>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b63      	ldr	r3, [pc, #396]	; (8000a2c <MX_GPIO_Init+0x250>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a62      	ldr	r2, [pc, #392]	; (8000a2c <MX_GPIO_Init+0x250>)
 80008a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b60      	ldr	r3, [pc, #384]	; (8000a2c <MX_GPIO_Init+0x250>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b5c      	ldr	r3, [pc, #368]	; (8000a2c <MX_GPIO_Init+0x250>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a5b      	ldr	r2, [pc, #364]	; (8000a2c <MX_GPIO_Init+0x250>)
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b59      	ldr	r3, [pc, #356]	; (8000a2c <MX_GPIO_Init+0x250>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SM_IN1_Pin|SM_IN2_Pin|SM_IN3_Pin|SM_IN4_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	213c      	movs	r1, #60	; 0x3c
 80008d6:	4856      	ldr	r0, [pc, #344]	; (8000a30 <MX_GPIO_Init+0x254>)
 80008d8:	f001 fe2a 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2116      	movs	r1, #22
 80008e0:	4854      	ldr	r0, [pc, #336]	; (8000a34 <MX_GPIO_Init+0x258>)
 80008e2:	f001 fe25 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	4853      	ldr	r0, [pc, #332]	; (8000a38 <MX_GPIO_Init+0x25c>)
 80008ec:	f001 fe20 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80008f6:	4851      	ldr	r0, [pc, #324]	; (8000a3c <MX_GPIO_Init+0x260>)
 80008f8:	f001 fe1a 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000902:	484f      	ldr	r0, [pc, #316]	; (8000a40 <MX_GPIO_Init+0x264>)
 8000904:	f001 fe14 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SM_IN1_Pin|SM_IN2_Pin|SM_IN3_Pin|SM_IN4_Pin;
 8000908:	233c      	movs	r3, #60	; 0x3c
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091c:	4619      	mov	r1, r3
 800091e:	4844      	ldr	r0, [pc, #272]	; (8000a30 <MX_GPIO_Init+0x254>)
 8000920:	f001 fc5a 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000924:	2316      	movs	r3, #22
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000938:	4619      	mov	r1, r3
 800093a:	483e      	ldr	r0, [pc, #248]	; (8000a34 <MX_GPIO_Init+0x258>)
 800093c:	f001 fc4c 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000940:	2301      	movs	r3, #1
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000944:	4b3f      	ldr	r3, [pc, #252]	; (8000a44 <MX_GPIO_Init+0x268>)
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	4839      	ldr	r0, [pc, #228]	; (8000a38 <MX_GPIO_Init+0x25c>)
 8000954:	f001 fc40 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|TP_INT1_Pin;
 8000958:	f248 0302 	movw	r3, #32770	; 0x8002
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800095e:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <MX_GPIO_Init+0x26c>)
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	4619      	mov	r1, r3
 800096c:	4832      	ldr	r0, [pc, #200]	; (8000a38 <MX_GPIO_Init+0x25c>)
 800096e:	f001 fc33 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000972:	2380      	movs	r3, #128	; 0x80
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000986:	4619      	mov	r1, r3
 8000988:	482b      	ldr	r0, [pc, #172]	; (8000a38 <MX_GPIO_Init+0x25c>)
 800098a:	f001 fc25 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800098e:	2320      	movs	r3, #32
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000992:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <MX_GPIO_Init+0x26c>)
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099e:	4619      	mov	r1, r3
 80009a0:	4824      	ldr	r0, [pc, #144]	; (8000a34 <MX_GPIO_Init+0x258>)
 80009a2:	f001 fc19 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009a6:	2304      	movs	r3, #4
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	4824      	ldr	r0, [pc, #144]	; (8000a4c <MX_GPIO_Init+0x270>)
 80009ba:	f001 fc0d 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80009be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d0:	4619      	mov	r1, r3
 80009d2:	481a      	ldr	r0, [pc, #104]	; (8000a3c <MX_GPIO_Init+0x260>)
 80009d4:	f001 fc00 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80009d8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	4619      	mov	r1, r3
 80009f0:	4812      	ldr	r0, [pc, #72]	; (8000a3c <MX_GPIO_Init+0x260>)
 80009f2:	f001 fbf1 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80009f6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480c      	ldr	r0, [pc, #48]	; (8000a40 <MX_GPIO_Init+0x264>)
 8000a10:	f001 fbe2 	bl	80021d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	2006      	movs	r0, #6
 8000a1a:	f001 f919 	bl	8001c50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a1e:	2006      	movs	r0, #6
 8000a20:	f001 f932 	bl	8001c88 <HAL_NVIC_EnableIRQ>

}
 8000a24:	bf00      	nop
 8000a26:	3738      	adds	r7, #56	; 0x38
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40020800 	.word	0x40020800
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40021800 	.word	0x40021800
 8000a44:	10110000 	.word	0x10110000
 8000a48:	10120000 	.word	0x10120000
 8000a4c:	40020400 	.word	0x40020400

08000a50 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit_IT(&huart5, Tx_data.buff, Tx_data.len);
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x30>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x30>)
 8000a60:	7812      	ldrb	r2, [r2, #0]
 8000a62:	b292      	uxth	r2, r2
 8000a64:	4619      	mov	r1, r3
 8000a66:	4807      	ldr	r0, [pc, #28]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x34>)
 8000a68:	f005 f9cb 	bl	8005e02 <HAL_UART_Transmit_IT>

	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a72:	f001 fd76 	bl	8002562 <HAL_GPIO_TogglePin>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000038 	.word	0x20000038
 8000a84:	200003e8 	.word	0x200003e8
 8000a88:	40021800 	.word	0x40021800

08000a8c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <MX_I2C3_Init+0x74>)
 8000a92:	4a1c      	ldr	r2, [pc, #112]	; (8000b04 <MX_I2C3_Init+0x78>)
 8000a94:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_I2C3_Init+0x74>)
 8000a98:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <MX_I2C3_Init+0x7c>)
 8000a9a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_I2C3_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <MX_I2C3_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_I2C3_Init+0x74>)
 8000aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aae:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <MX_I2C3_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_I2C3_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_I2C3_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_I2C3_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <MX_I2C3_Init+0x74>)
 8000aca:	f003 f887 	bl	8003bdc <HAL_I2C_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ad4:	f000 fb22 	bl	800111c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4809      	ldr	r0, [pc, #36]	; (8000b00 <MX_I2C3_Init+0x74>)
 8000adc:	f003 f9c2 	bl	8003e64 <HAL_I2CEx_ConfigAnalogFilter>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000ae6:	f000 fb19 	bl	800111c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_I2C3_Init+0x74>)
 8000aee:	f003 f9f5 	bl	8003edc <HAL_I2CEx_ConfigDigitalFilter>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000af8:	f000 fb10 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200000b8 	.word	0x200000b8
 8000b04:	40005c00 	.word	0x40005c00
 8000b08:	000186a0 	.word	0x000186a0

08000b0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a29      	ldr	r2, [pc, #164]	; (8000bd0 <HAL_I2C_MspInit+0xc4>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d14b      	bne.n	8000bc6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <HAL_I2C_MspInit+0xc8>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a27      	ldr	r2, [pc, #156]	; (8000bd4 <HAL_I2C_MspInit+0xc8>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <HAL_I2C_MspInit+0xc8>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <HAL_I2C_MspInit+0xc8>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a20      	ldr	r2, [pc, #128]	; (8000bd4 <HAL_I2C_MspInit+0xc8>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <HAL_I2C_MspInit+0xc8>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6c:	2312      	movs	r3, #18
 8000b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4815      	ldr	r0, [pc, #84]	; (8000bd8 <HAL_I2C_MspInit+0xcc>)
 8000b84:	f001 fb28 	bl	80021d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8e:	2312      	movs	r3, #18
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <HAL_I2C_MspInit+0xd0>)
 8000ba6:	f001 fb17 	bl	80021d8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_I2C_MspInit+0xc8>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_I2C_MspInit+0xc8>)
 8000bb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_I2C_MspInit+0xc8>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3728      	adds	r7, #40	; 0x28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40005c00 	.word	0x40005c00
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020800 	.word	0x40020800
 8000bdc:	40020000 	.word	0x40020000

08000be0 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08e      	sub	sp, #56	; 0x38
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2234      	movs	r2, #52	; 0x34
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f006 fb55 	bl	800729c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000bf2:	4b39      	ldr	r3, [pc, #228]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000bf4:	4a39      	ldr	r2, [pc, #228]	; (8000cdc <MX_LTDC_Init+0xfc>)
 8000bf6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000bf8:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000bfe:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c04:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c0a:	4b33      	ldr	r3, [pc, #204]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000c10:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000c12:	2209      	movs	r2, #9
 8000c14:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000c1c:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000c1e:	221d      	movs	r2, #29
 8000c20:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000c22:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000c24:	2203      	movs	r2, #3
 8000c26:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000c28:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000c2a:	f240 120d 	movw	r2, #269	; 0x10d
 8000c2e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000c30:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000c32:	f240 1243 	movw	r2, #323	; 0x143
 8000c36:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000c38:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000c3a:	f240 1217 	movw	r2, #279	; 0x117
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000c40:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000c42:	f240 1247 	movw	r2, #327	; 0x147
 8000c46:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c50:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c58:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c60:	481d      	ldr	r0, [pc, #116]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000c62:	f003 f97b 	bl	8003f5c <HAL_LTDC_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000c6c:	f000 fa56 	bl	800111c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000c74:	23f0      	movs	r3, #240	; 0xf0
 8000c76:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000c7c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c80:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c82:	2302      	movs	r3, #2
 8000c84:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c86:	23ff      	movs	r3, #255	; 0xff
 8000c88:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c92:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c94:	2307      	movs	r3, #7
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000c98:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000c9e:	23f0      	movs	r3, #240	; 0xf0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000ca2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ca6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_LTDC_Init+0xf8>)
 8000cc2:	f003 fadd 	bl	8004280 <HAL_LTDC_ConfigLayer>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000ccc:	f000 fa26 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	3738      	adds	r7, #56	; 0x38
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000010c 	.word	0x2000010c
 8000cdc:	40016800 	.word	0x40016800

08000ce0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	; 0x38
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a7b      	ldr	r2, [pc, #492]	; (8000eec <HAL_LTDC_MspInit+0x20c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	f040 80f0 	bne.w	8000ee4 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
 8000d08:	4b79      	ldr	r3, [pc, #484]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0c:	4a78      	ldr	r2, [pc, #480]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000d0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d12:	6453      	str	r3, [r2, #68]	; 0x44
 8000d14:	4b76      	ldr	r3, [pc, #472]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d1c:	623b      	str	r3, [r7, #32]
 8000d1e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
 8000d24:	4b72      	ldr	r3, [pc, #456]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a71      	ldr	r2, [pc, #452]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000d2a:	f043 0320 	orr.w	r3, r3, #32
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d30:	4b6f      	ldr	r3, [pc, #444]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f003 0320 	and.w	r3, r3, #32
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	4b6b      	ldr	r3, [pc, #428]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	4a6a      	ldr	r2, [pc, #424]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4c:	4b68      	ldr	r3, [pc, #416]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	61bb      	str	r3, [r7, #24]
 8000d56:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	4b64      	ldr	r3, [pc, #400]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	4a63      	ldr	r2, [pc, #396]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	6313      	str	r3, [r2, #48]	; 0x30
 8000d68:	4b61      	ldr	r3, [pc, #388]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	4b5d      	ldr	r3, [pc, #372]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	4a5c      	ldr	r2, [pc, #368]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d82:	6313      	str	r3, [r2, #48]	; 0x30
 8000d84:	4b5a      	ldr	r3, [pc, #360]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4b56      	ldr	r3, [pc, #344]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	4a55      	ldr	r2, [pc, #340]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000d9a:	f043 0304 	orr.w	r3, r3, #4
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000da0:	4b53      	ldr	r3, [pc, #332]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	4b4f      	ldr	r3, [pc, #316]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	4a4e      	ldr	r2, [pc, #312]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000db6:	f043 0308 	orr.w	r3, r3, #8
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbc:	4b4c      	ldr	r3, [pc, #304]	; (8000ef0 <HAL_LTDC_MspInit+0x210>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dda:	230e      	movs	r3, #14
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	4843      	ldr	r0, [pc, #268]	; (8000ef4 <HAL_LTDC_MspInit+0x214>)
 8000de6:	f001 f9f7 	bl	80021d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000dea:	f641 0358 	movw	r3, #6232	; 0x1858
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dfc:	230e      	movs	r3, #14
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	483c      	ldr	r0, [pc, #240]	; (8000ef8 <HAL_LTDC_MspInit+0x218>)
 8000e08:	f001 f9e6 	bl	80021d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e1c:	2309      	movs	r3, #9
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	4835      	ldr	r0, [pc, #212]	; (8000efc <HAL_LTDC_MspInit+0x21c>)
 8000e28:	f001 f9d6 	bl	80021d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000e2c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e3e:	230e      	movs	r3, #14
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e46:	4619      	mov	r1, r3
 8000e48:	482c      	ldr	r0, [pc, #176]	; (8000efc <HAL_LTDC_MspInit+0x21c>)
 8000e4a:	f001 f9c5 	bl	80021d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000e4e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e60:	230e      	movs	r3, #14
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4825      	ldr	r0, [pc, #148]	; (8000f00 <HAL_LTDC_MspInit+0x220>)
 8000e6c:	f001 f9b4 	bl	80021d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000e70:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e82:	230e      	movs	r3, #14
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	481d      	ldr	r0, [pc, #116]	; (8000f04 <HAL_LTDC_MspInit+0x224>)
 8000e8e:	f001 f9a3 	bl	80021d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000e92:	2348      	movs	r3, #72	; 0x48
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ea2:	230e      	movs	r3, #14
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4816      	ldr	r0, [pc, #88]	; (8000f08 <HAL_LTDC_MspInit+0x228>)
 8000eae:	f001 f993 	bl	80021d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000eb2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ec4:	2309      	movs	r3, #9
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480c      	ldr	r0, [pc, #48]	; (8000f00 <HAL_LTDC_MspInit+0x220>)
 8000ed0:	f001 f982 	bl	80021d8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2105      	movs	r1, #5
 8000ed8:	2058      	movs	r0, #88	; 0x58
 8000eda:	f000 feb9 	bl	8001c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000ede:	2058      	movs	r0, #88	; 0x58
 8000ee0:	f000 fed2 	bl	8001c88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3738      	adds	r7, #56	; 0x38
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40016800 	.word	0x40016800
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40021400 	.word	0x40021400
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40020400 	.word	0x40020400
 8000f00:	40021800 	.word	0x40021800
 8000f04:	40020800 	.word	0x40020800
 8000f08:	40020c00 	.word	0x40020c00

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f12:	f000 fd7f 	bl	8001a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f16:	f000 f855 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1a:	f7ff fc5f 	bl	80007dc <MX_GPIO_Init>
  MX_CRC_Init();
 8000f1e:	f7ff fae1 	bl	80004e4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000f22:	f7ff fb15 	bl	8000550 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000f26:	f7ff fb6d 	bl	8000604 <MX_FMC_Init>
  MX_I2C3_Init();
 8000f2a:	f7ff fdaf 	bl	8000a8c <MX_I2C3_Init>
  MX_LTDC_Init();
 8000f2e:	f7ff fe57 	bl	8000be0 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000f32:	f000 f959 	bl	80011e8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000f36:	f000 fad7 	bl	80014e8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f3a:	f000 fbc1 	bl	80016c0 <MX_USART1_UART_Init>
  MX_UART5_Init();
 8000f3e:	f000 fb95 	bl	800166c <MX_UART5_Init>
  MX_USB_OTG_HS_HCD_Init();
 8000f42:	f000 fcb3 	bl	80018ac <MX_USB_OTG_HS_HCD_Init>
  MX_TIM7_Init();
 8000f46:	f000 fb1f 	bl	8001588 <MX_TIM7_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t str[]="Hello world!!!!!\n";
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <main+0xa0>)
 8000f4c:	1d3c      	adds	r4, r7, #4
 8000f4e:	461d      	mov	r5, r3
 8000f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f54:	682b      	ldr	r3, [r5, #0]
 8000f56:	8023      	strh	r3, [r4, #0]
  uint8_t len = (sizeof(str)/sizeof(str[0]))-1;
 8000f58:	2311      	movs	r3, #17
 8000f5a:	75fb      	strb	r3, [r7, #23]

  Tx_data.len=len;
 8000f5c:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <main+0xa4>)
 8000f5e:	7dfb      	ldrb	r3, [r7, #23]
 8000f60:	7013      	strb	r3, [r2, #0]
  Tx_data.buff=str;
 8000f62:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <main+0xa4>)
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	6053      	str	r3, [r2, #4]


  Ser_Queue.Front=-1;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <main+0xa8>)
 8000f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f6e:	801a      	strh	r2, [r3, #0]
  Ser_Queue.Rear=-1;
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <main+0xa8>)
 8000f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f76:	805a      	strh	r2, [r3, #2]

  HAL_UART_Receive_IT(&huart5, rec_buff, 1);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	490f      	ldr	r1, [pc, #60]	; (8000fb8 <main+0xac>)
 8000f7c:	480f      	ldr	r0, [pc, #60]	; (8000fbc <main+0xb0>)
 8000f7e:	f004 ff85 	bl	8005e8c <HAL_UART_Receive_IT>
//	  HAL_Delay(1000);
//
//	  //HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
//	  LD3_GPIO_Port->BSRR|=(uint32_t)LD3_Pin<<16;
//	  HAL_Delay(1000);
	  if (buff_is_ready())
 8000f82:	f000 f8a3 	bl	80010cc <buff_is_ready>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0fa      	beq.n	8000f82 <main+0x76>
	  {

		  HAL_UART_Transmit_IT(&huart5,Ser_Queue.Buffer, Ser_Queue.Rear+1);
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <main+0xa8>)
 8000f8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	3301      	adds	r3, #1
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4909      	ldr	r1, [pc, #36]	; (8000fc0 <main+0xb4>)
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <main+0xb0>)
 8000f9e:	f004 ff30 	bl	8005e02 <HAL_UART_Transmit_IT>
		  reset_Queue(&Ser_Queue);
 8000fa2:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <main+0xa8>)
 8000fa4:	f000 f8e0 	bl	8001168 <reset_Queue>
	  if (buff_is_ready())
 8000fa8:	e7eb      	b.n	8000f82 <main+0x76>
 8000faa:	bf00      	nop
 8000fac:	080072c4 	.word	0x080072c4
 8000fb0:	20000038 	.word	0x20000038
 8000fb4:	200001b4 	.word	0x200001b4
 8000fb8:	2000002c 	.word	0x2000002c
 8000fbc:	200003e8 	.word	0x200003e8
 8000fc0:	200001b8 	.word	0x200001b8

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0a0      	sub	sp, #128	; 0x80
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fce:	2230      	movs	r2, #48	; 0x30
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f006 f962 	bl	800729c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2230      	movs	r2, #48	; 0x30
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f006 f953 	bl	800729c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	4b32      	ldr	r3, [pc, #200]	; (80010c4 <SystemClock_Config+0x100>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	4a31      	ldr	r2, [pc, #196]	; (80010c4 <SystemClock_Config+0x100>)
 8001000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001004:	6413      	str	r3, [r2, #64]	; 0x40
 8001006:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <SystemClock_Config+0x100>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <SystemClock_Config+0x104>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800101e:	4a2a      	ldr	r2, [pc, #168]	; (80010c8 <SystemClock_Config+0x104>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <SystemClock_Config+0x104>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001032:	2301      	movs	r3, #1
 8001034:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001036:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800103a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103c:	2302      	movs	r3, #2
 800103e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001040:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001044:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001046:	2304      	movs	r3, #4
 8001048:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 800104a:	2348      	movs	r3, #72	; 0x48
 800104c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800104e:	2302      	movs	r3, #2
 8001050:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001052:	2303      	movs	r3, #3
 8001054:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001056:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800105a:	4618      	mov	r0, r3
 800105c:	f003 fae6 	bl	800462c <HAL_RCC_OscConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001066:	f000 f859 	bl	800111c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106a:	230f      	movs	r3, #15
 800106c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106e:	2302      	movs	r3, #2
 8001070:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001080:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001084:	2102      	movs	r1, #2
 8001086:	4618      	mov	r0, r3
 8001088:	f003 fd48 	bl	8004b1c <HAL_RCC_ClockConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001092:	f000 f843 	bl	800111c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001096:	2308      	movs	r3, #8
 8001098:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800109a:	2332      	movs	r3, #50	; 0x32
 800109c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800109e:	2302      	movs	r3, #2
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80010a2:	2300      	movs	r3, #0
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 ff64 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80010b6:	f000 f831 	bl	800111c <Error_Handler>
  }
}
 80010ba:	bf00      	nop
 80010bc:	3780      	adds	r7, #128	; 0x80
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <buff_is_ready>:

/* USER CODE BEGIN 4 */

uint8_t buff_is_ready(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
	if(Ser_Queue.Buffer[Ser_Queue.Rear]=='\n')
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <buff_is_ready+0x28>)
 80010d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <buff_is_ready+0x28>)
 80010da:	4413      	add	r3, r2
 80010dc:	791b      	ldrb	r3, [r3, #4]
 80010de:	2b0a      	cmp	r3, #10
 80010e0:	d101      	bne.n	80010e6 <buff_is_ready+0x1a>
	{
		return 1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <buff_is_ready+0x1c>

	}
	return 0;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	200001b4 	.word	0x200001b4

080010f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800110a:	f000 fca5 	bl	8001a58 <HAL_IncTick>
  {

  }

  /* USER CODE END Callback 1 */
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40001000 	.word	0x40001000

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	e7fe      	b.n	8001124 <Error_Handler+0x8>

08001126 <isQ_Full>:

#include "queue.h"


uint8_t isQ_Full(Queue *Q)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
	if ((Q->Front==Q->Rear+1)||(Q->Front==0&&Q->Rear==SIZE-1))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001134:	461a      	mov	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800113c:	3301      	adds	r3, #1
 800113e:	429a      	cmp	r2, r3
 8001140:	d009      	beq.n	8001156 <isQ_Full+0x30>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d106      	bne.n	800115a <isQ_Full+0x34>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001152:	2bff      	cmp	r3, #255	; 0xff
 8001154:	d101      	bne.n	800115a <isQ_Full+0x34>
	{
		return 1;
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <isQ_Full+0x36>
	}
	return 0;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <reset_Queue>:
	return 0;

}

void reset_Queue(Queue *Q)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	Q->Front=-1;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001176:	801a      	strh	r2, [r3, #0]
	Q->Rear=-1;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117e:	805a      	strh	r2, [r3, #2]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <enQueue>:


void enQueue(Queue *Q,uint8_t element)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
	if (!isQ_Full(Q))
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ffc4 	bl	8001126 <isQ_Full>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d11c      	bne.n	80011de <enQueue+0x52>
	{
		if (Q->Front==-1){Q->Front=0;}
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ae:	d102      	bne.n	80011b6 <enQueue+0x2a>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	801a      	strh	r2, [r3, #0]

		Q->Rear= (Q->Rear+1)%SIZE;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011bc:	3301      	adds	r3, #1
 80011be:	425a      	negs	r2, r3
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	bf58      	it	pl
 80011c6:	4253      	negpl	r3, r2
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	805a      	strh	r2, [r3, #2]
		Q->Buffer[Q->Rear]= element;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011d4:	461a      	mov	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	78fa      	ldrb	r2, [r7, #3]
 80011dc:	711a      	strb	r2, [r3, #4]


	}

}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <MX_SPI5_Init+0x64>)
 80011ee:	4a18      	ldr	r2, [pc, #96]	; (8001250 <MX_SPI5_Init+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_SPI5_Init+0x64>)
 80011f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011f8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <MX_SPI5_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_SPI5_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_SPI5_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_SPI5_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_SPI5_Init+0x64>)
 8001214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001218:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_SPI5_Init+0x64>)
 800121c:	2218      	movs	r2, #24
 800121e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_SPI5_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_SPI5_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <MX_SPI5_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_SPI5_Init+0x64>)
 8001234:	220a      	movs	r2, #10
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <MX_SPI5_Init+0x64>)
 800123a:	f004 f88f 	bl	800535c <HAL_SPI_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001244:	f7ff ff6a 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200002b8 	.word	0x200002b8
 8001250:	40015000 	.word	0x40015000

08001254 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <HAL_SPI_MspInit+0x84>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d12c      	bne.n	80012d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_SPI_MspInit+0x88>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a17      	ldr	r2, [pc, #92]	; (80012dc <HAL_SPI_MspInit+0x88>)
 8001280:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_SPI_MspInit+0x88>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_SPI_MspInit+0x88>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a10      	ldr	r2, [pc, #64]	; (80012dc <HAL_SPI_MspInit+0x88>)
 800129c:	f043 0320 	orr.w	r3, r3, #32
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_SPI_MspInit+0x88>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0320 	and.w	r3, r3, #32
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80012ae:	f44f 7360 	mov.w	r3, #896	; 0x380
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80012c0:	2305      	movs	r3, #5
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <HAL_SPI_MspInit+0x8c>)
 80012cc:	f000 ff84 	bl	80021d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	; 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40015000 	.word	0x40015000
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40021400 	.word	0x40021400

080012e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <HAL_MspInit+0x4c>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	4a0f      	ldr	r2, [pc, #60]	; (8001330 <HAL_MspInit+0x4c>)
 80012f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f8:	6453      	str	r3, [r2, #68]	; 0x44
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <HAL_MspInit+0x4c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_MspInit+0x4c>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a08      	ldr	r2, [pc, #32]	; (8001330 <HAL_MspInit+0x4c>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_MspInit+0x4c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800

08001334 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	; 0x30
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	2036      	movs	r0, #54	; 0x36
 800134a:	f000 fc81 	bl	8001c50 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800134e:	2036      	movs	r0, #54	; 0x36
 8001350:	f000 fc9a 	bl	8001c88 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <HAL_InitTick+0xa4>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	4a1e      	ldr	r2, [pc, #120]	; (80013d8 <HAL_InitTick+0xa4>)
 800135e:	f043 0310 	orr.w	r3, r3, #16
 8001362:	6413      	str	r3, [r2, #64]	; 0x40
 8001364:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <HAL_InitTick+0xa4>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001370:	f107 0210 	add.w	r2, r7, #16
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f003 fdca 	bl	8004f14 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001380:	f003 fda0 	bl	8004ec4 <HAL_RCC_GetPCLK1Freq>
 8001384:	4603      	mov	r3, r0
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800138a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138c:	4a13      	ldr	r2, [pc, #76]	; (80013dc <HAL_InitTick+0xa8>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	0c9b      	lsrs	r3, r3, #18
 8001394:	3b01      	subs	r3, #1
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_InitTick+0xac>)
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <HAL_InitTick+0xb0>)
 800139c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_InitTick+0xac>)
 80013a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013a6:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <HAL_InitTick+0xac>)
 80013a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_InitTick+0xac>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_InitTick+0xac>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013b8:	4809      	ldr	r0, [pc, #36]	; (80013e0 <HAL_InitTick+0xac>)
 80013ba:	f004 f858 	bl	800546e <HAL_TIM_Base_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d104      	bne.n	80013ce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013c4:	4806      	ldr	r0, [pc, #24]	; (80013e0 <HAL_InitTick+0xac>)
 80013c6:	f004 f8a1 	bl	800550c <HAL_TIM_Base_Start_IT>
 80013ca:	4603      	mov	r3, r0
 80013cc:	e000      	b.n	80013d0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	431bde83 	.word	0x431bde83
 80013e0:	20000310 	.word	0x20000310
 80013e4:	40001000 	.word	0x40001000

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <NMI_Handler+0x4>

080013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler+0x4>

08001406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001442:	2001      	movs	r0, #1
 8001444:	f001 f8a8 	bl	8002598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <UART5_IRQHandler+0x10>)
 8001452:	f004 fd4b 	bl	8005eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200003e8 	.word	0x200003e8

08001460 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <TIM6_DAC_IRQHandler+0x10>)
 8001466:	f004 f8c1 	bl	80055ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000310 	.word	0x20000310

08001474 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */



  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <TIM7_IRQHandler+0x10>)
 800147a:	f004 f8b7 	bl	80055ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200003a0 	.word	0x200003a0

08001488 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <OTG_HS_IRQHandler+0x10>)
 800148e:	f001 f8fd 	bl	800268c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000470 	.word	0x20000470

0800149c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <LTDC_IRQHandler+0x10>)
 80014a2:	f002 fe2b 	bl	80040fc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000010c 	.word	0x2000010c

080014b0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <DMA2D_IRQHandler+0x10>)
 80014b6:	f000 fcec 	bl	8001e92 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000044 	.word	0x20000044

080014c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <SystemInit+0x20>)
 80014ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <SystemInit+0x20>)
 80014d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	463b      	mov	r3, r7
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <MX_TIM1_Init+0x98>)
 8001506:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <MX_TIM1_Init+0x9c>)
 8001508:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <MX_TIM1_Init+0x98>)
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <MX_TIM1_Init+0x98>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <MX_TIM1_Init+0x98>)
 8001518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800151c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <MX_TIM1_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <MX_TIM1_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <MX_TIM1_Init+0x98>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001530:	4813      	ldr	r0, [pc, #76]	; (8001580 <MX_TIM1_Init+0x98>)
 8001532:	f003 ff9c 	bl	800546e <HAL_TIM_Base_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800153c:	f7ff fdee 	bl	800111c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001544:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4619      	mov	r1, r3
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <MX_TIM1_Init+0x98>)
 800154e:	f004 f955 	bl	80057fc <HAL_TIM_ConfigClockSource>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001558:	f7ff fde0 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_TIM1_Init+0x98>)
 800156a:	f004 fb6d 	bl	8005c48 <HAL_TIMEx_MasterConfigSynchronization>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001574:	f7ff fdd2 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000358 	.word	0x20000358
 8001584:	40010000 	.word	0x40010000

08001588 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158e:	463b      	mov	r3, r7
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_TIM7_Init+0x60>)
 8001598:	4a14      	ldr	r2, [pc, #80]	; (80015ec <MX_TIM7_Init+0x64>)
 800159a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_TIM7_Init+0x60>)
 800159e:	2247      	movs	r2, #71	; 0x47
 80015a0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_TIM7_Init+0x60>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_TIM7_Init+0x60>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_TIM7_Init+0x60>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <MX_TIM7_Init+0x60>)
 80015b6:	f003 ff5a 	bl	800546e <HAL_TIM_Base_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80015c0:	f7ff fdac 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_TIM7_Init+0x60>)
 80015d2:	f004 fb39 	bl	8005c48 <HAL_TIMEx_MasterConfigSynchronization>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80015dc:	f7ff fd9e 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200003a0 	.word	0x200003a0
 80015ec:	40001400 	.word	0x40001400

080015f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a18      	ldr	r2, [pc, #96]	; (8001660 <HAL_TIM_Base_MspInit+0x70>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d10e      	bne.n	8001620 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_TIM_Base_MspInit+0x74>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a16      	ldr	r2, [pc, #88]	; (8001664 <HAL_TIM_Base_MspInit+0x74>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_TIM_Base_MspInit+0x74>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800161e:	e01a      	b.n	8001656 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a10      	ldr	r2, [pc, #64]	; (8001668 <HAL_TIM_Base_MspInit+0x78>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d115      	bne.n	8001656 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_TIM_Base_MspInit+0x74>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a0c      	ldr	r2, [pc, #48]	; (8001664 <HAL_TIM_Base_MspInit+0x74>)
 8001634:	f043 0320 	orr.w	r3, r3, #32
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_TIM_Base_MspInit+0x74>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 0320 	and.w	r3, r3, #32
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	2037      	movs	r0, #55	; 0x37
 800164c:	f000 fb00 	bl	8001c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001650:	2037      	movs	r0, #55	; 0x37
 8001652:	f000 fb19 	bl	8001c88 <HAL_NVIC_EnableIRQ>
}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40010000 	.word	0x40010000
 8001664:	40023800 	.word	0x40023800
 8001668:	40001400 	.word	0x40001400

0800166c <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_UART5_Init+0x4c>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <MX_UART5_Init+0x50>)
 8001674:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_UART5_Init+0x4c>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_UART5_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_UART5_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_UART5_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_UART5_Init+0x4c>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_UART5_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_UART5_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_UART5_Init+0x4c>)
 80016a4:	f004 fb60 	bl	8005d68 <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80016ae:	f7ff fd35 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200003e8 	.word	0x200003e8
 80016bc:	40005000 	.word	0x40005000

080016c0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <MX_USART1_UART_Init+0x50>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016f8:	f004 fb36 	bl	8005d68 <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001702:	f7ff fd0b 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000042c 	.word	0x2000042c
 8001710:	40011000 	.word	0x40011000

08001714 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08c      	sub	sp, #48	; 0x30
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a46      	ldr	r2, [pc, #280]	; (800184c <HAL_UART_MspInit+0x138>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d153      	bne.n	80017de <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	4b45      	ldr	r3, [pc, #276]	; (8001850 <HAL_UART_MspInit+0x13c>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a44      	ldr	r2, [pc, #272]	; (8001850 <HAL_UART_MspInit+0x13c>)
 8001740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b42      	ldr	r3, [pc, #264]	; (8001850 <HAL_UART_MspInit+0x13c>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174e:	61bb      	str	r3, [r7, #24]
 8001750:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <HAL_UART_MspInit+0x13c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a3d      	ldr	r2, [pc, #244]	; (8001850 <HAL_UART_MspInit+0x13c>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <HAL_UART_MspInit+0x13c>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	4b37      	ldr	r3, [pc, #220]	; (8001850 <HAL_UART_MspInit+0x13c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a36      	ldr	r2, [pc, #216]	; (8001850 <HAL_UART_MspInit+0x13c>)
 8001778:	f043 0308 	orr.w	r3, r3, #8
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <HAL_UART_MspInit+0x13c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800178a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001794:	2301      	movs	r3, #1
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800179c:	2308      	movs	r3, #8
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	4619      	mov	r1, r3
 80017a6:	482b      	ldr	r0, [pc, #172]	; (8001854 <HAL_UART_MspInit+0x140>)
 80017a8:	f000 fd16 	bl	80021d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017ac:	2304      	movs	r3, #4
 80017ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b8:	2303      	movs	r3, #3
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80017bc:	2308      	movs	r3, #8
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	4824      	ldr	r0, [pc, #144]	; (8001858 <HAL_UART_MspInit+0x144>)
 80017c8:	f000 fd06 	bl	80021d8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	2035      	movs	r0, #53	; 0x35
 80017d2:	f000 fa3d 	bl	8001c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80017d6:	2035      	movs	r0, #53	; 0x35
 80017d8:	f000 fa56 	bl	8001c88 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017dc:	e031      	b.n	8001842 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a1e      	ldr	r2, [pc, #120]	; (800185c <HAL_UART_MspInit+0x148>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d12c      	bne.n	8001842 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_UART_MspInit+0x13c>)
 80017ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f0:	4a17      	ldr	r2, [pc, #92]	; (8001850 <HAL_UART_MspInit+0x13c>)
 80017f2:	f043 0310 	orr.w	r3, r3, #16
 80017f6:	6453      	str	r3, [r2, #68]	; 0x44
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_UART_MspInit+0x13c>)
 80017fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fc:	f003 0310 	and.w	r3, r3, #16
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <HAL_UART_MspInit+0x13c>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	4a10      	ldr	r2, [pc, #64]	; (8001850 <HAL_UART_MspInit+0x13c>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6313      	str	r3, [r2, #48]	; 0x30
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_UART_MspInit+0x13c>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001820:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001832:	2307      	movs	r3, #7
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4619      	mov	r1, r3
 800183c:	4808      	ldr	r0, [pc, #32]	; (8001860 <HAL_UART_MspInit+0x14c>)
 800183e:	f000 fccb 	bl	80021d8 <HAL_GPIO_Init>
}
 8001842:	bf00      	nop
 8001844:	3730      	adds	r7, #48	; 0x30
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40005000 	.word	0x40005000
 8001850:	40023800 	.word	0x40023800
 8001854:	40020800 	.word	0x40020800
 8001858:	40020c00 	.word	0x40020c00
 800185c:	40011000 	.word	0x40011000
 8001860:	40020000 	.word	0x40020000

08001864 <HAL_UART_TxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);

	enQueue(&Ser_Queue, rec_buff[0]);
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <HAL_UART_RxCpltCallback+0x28>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	4807      	ldr	r0, [pc, #28]	; (80018a4 <HAL_UART_RxCpltCallback+0x2c>)
 8001888:	f7ff fc80 	bl	800118c <enQueue>
	HAL_UART_Receive_IT(&huart5, rec_buff, 1);
 800188c:	2201      	movs	r2, #1
 800188e:	4904      	ldr	r1, [pc, #16]	; (80018a0 <HAL_UART_RxCpltCallback+0x28>)
 8001890:	4805      	ldr	r0, [pc, #20]	; (80018a8 <HAL_UART_RxCpltCallback+0x30>)
 8001892:	f004 fafb 	bl	8005e8c <HAL_UART_Receive_IT>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2000002c 	.word	0x2000002c
 80018a4:	200001b4 	.word	0x200001b4
 80018a8:	200003e8 	.word	0x200003e8

080018ac <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018b2:	4a13      	ldr	r2, [pc, #76]	; (8001900 <MX_USB_OTG_HS_HCD_Init+0x54>)
 80018b4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018b8:	220c      	movs	r2, #12
 80018ba:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018be:	2201      	movs	r2, #1
 80018c0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018ca:	2202      	movs	r2, #2
 80018cc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018dc:	2200      	movs	r2, #0
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <MX_USB_OTG_HS_HCD_Init+0x50>)
 80018e8:	f000 fe6e 	bl	80025c8 <HAL_HCD_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 80018f2:	f7ff fc13 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000470 	.word	0x20000470
 8001900:	40040000 	.word	0x40040000

08001904 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a24      	ldr	r2, [pc, #144]	; (80019b4 <HAL_HCD_MspInit+0xb0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d141      	bne.n	80019aa <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <HAL_HCD_MspInit+0xb4>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a22      	ldr	r2, [pc, #136]	; (80019b8 <HAL_HCD_MspInit+0xb4>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_HCD_MspInit+0xb4>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001942:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	2300      	movs	r3, #0
 8001952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001954:	230c      	movs	r3, #12
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	4817      	ldr	r0, [pc, #92]	; (80019bc <HAL_HCD_MspInit+0xb8>)
 8001960:	f000 fc3a 	bl	80021d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4810      	ldr	r0, [pc, #64]	; (80019bc <HAL_HCD_MspInit+0xb8>)
 800197a:	f000 fc2d 	bl	80021d8 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <HAL_HCD_MspInit+0xb4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <HAL_HCD_MspInit+0xb4>)
 8001988:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_HCD_MspInit+0xb4>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	204d      	movs	r0, #77	; 0x4d
 80019a0:	f000 f956 	bl	8001c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80019a4:	204d      	movs	r0, #77	; 0x4d
 80019a6:	f000 f96f 	bl	8001c88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80019aa:	bf00      	nop
 80019ac:	3728      	adds	r7, #40	; 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40040000 	.word	0x40040000
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020400 	.word	0x40020400

080019c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80019c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c4:	480d      	ldr	r0, [pc, #52]	; (80019fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019c6:	490e      	ldr	r1, [pc, #56]	; (8001a00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019c8:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019dc:	4c0b      	ldr	r4, [pc, #44]	; (8001a0c <LoopFillZerobss+0x26>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ea:	f7ff fd6b 	bl	80014c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ee:	f005 fc31 	bl	8007254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f2:	f7ff fa8b 	bl	8000f0c <main>
  bx  lr    
 80019f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019f8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a04:	08007300 	.word	0x08007300
  ldr r2, =_sbss
 8001a08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a0c:	20000778 	.word	0x20000778

08001a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a10:	e7fe      	b.n	8001a10 <ADC_IRQHandler>
	...

08001a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_Init+0x40>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <HAL_Init+0x40>)
 8001a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_Init+0x40>)
 8001a2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_Init+0x40>)
 8001a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a3c:	2003      	movs	r0, #3
 8001a3e:	f000 f8fc 	bl	8001c3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7ff fc76 	bl	8001334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a48:	f7ff fc4c 	bl	80012e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023c00 	.word	0x40023c00

08001a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_IncTick+0x24>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	20000774 	.word	0x20000774

08001a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000774 	.word	0x20000774

08001a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff ffee 	bl	8001a80 <HAL_GetTick>
 8001aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d005      	beq.n	8001abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_Delay+0x44>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001abe:	bf00      	nop
 8001ac0:	f7ff ffde 	bl	8001a80 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d8f7      	bhi.n	8001ac0 <HAL_Delay+0x28>
  {
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000008 	.word	0x20000008

08001ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b12:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	60d3      	str	r3, [r2, #12]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <__NVIC_GetPriorityGrouping+0x18>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	f003 0307 	and.w	r3, r3, #7
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	db0b      	blt.n	8001b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	f003 021f 	and.w	r2, r3, #31
 8001b5c:	4907      	ldr	r1, [pc, #28]	; (8001b7c <__NVIC_EnableIRQ+0x38>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	2001      	movs	r0, #1
 8001b66:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000e100 	.word	0xe000e100

08001b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	db0a      	blt.n	8001baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	490c      	ldr	r1, [pc, #48]	; (8001bcc <__NVIC_SetPriority+0x4c>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	0112      	lsls	r2, r2, #4
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba8:	e00a      	b.n	8001bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4908      	ldr	r1, [pc, #32]	; (8001bd0 <__NVIC_SetPriority+0x50>)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	3b04      	subs	r3, #4
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	761a      	strb	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f1c3 0307 	rsb	r3, r3, #7
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	bf28      	it	cs
 8001bf2:	2304      	movcs	r3, #4
 8001bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2b06      	cmp	r3, #6
 8001bfc:	d902      	bls.n	8001c04 <NVIC_EncodePriority+0x30>
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3b03      	subs	r3, #3
 8001c02:	e000      	b.n	8001c06 <NVIC_EncodePriority+0x32>
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	401a      	ands	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	43d9      	mvns	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	4313      	orrs	r3, r2
         );
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ff4c 	bl	8001ae0 <__NVIC_SetPriorityGrouping>
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c62:	f7ff ff61 	bl	8001b28 <__NVIC_GetPriorityGrouping>
 8001c66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	6978      	ldr	r0, [r7, #20]
 8001c6e:	f7ff ffb1 	bl	8001bd4 <NVIC_EncodePriority>
 8001c72:	4602      	mov	r2, r0
 8001c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff80 	bl	8001b80 <__NVIC_SetPriority>
}
 8001c80:	bf00      	nop
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff54 	bl	8001b44 <__NVIC_EnableIRQ>
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00e      	b.n	8001cd4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	795b      	ldrb	r3, [r3, #5]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7fe fc20 	bl	800050c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cea:	f7ff fec9 	bl	8001a80 <HAL_GetTick>
 8001cee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d008      	beq.n	8001d0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e052      	b.n	8001db4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0216 	bic.w	r2, r2, #22
 8001d1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	695a      	ldr	r2, [r3, #20]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d103      	bne.n	8001d3e <HAL_DMA_Abort+0x62>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d007      	beq.n	8001d4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0208 	bic.w	r2, r2, #8
 8001d4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d5e:	e013      	b.n	8001d88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d60:	f7ff fe8e 	bl	8001a80 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b05      	cmp	r3, #5
 8001d6c:	d90c      	bls.n	8001d88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2220      	movs	r2, #32
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2203      	movs	r2, #3
 8001d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e015      	b.n	8001db4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1e4      	bne.n	8001d60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9a:	223f      	movs	r2, #63	; 0x3f
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d004      	beq.n	8001dda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2280      	movs	r2, #128	; 0x80
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00c      	b.n	8001df4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2205      	movs	r2, #5
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0201 	bic.w	r2, r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e03b      	b.n	8001e8a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7fe fbc4 	bl	80005b4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e50:	f023 0107 	bic.w	r1, r3, #7
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68d1      	ldr	r1, [r2, #12]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	430b      	orrs	r3, r1
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b084      	sub	sp, #16
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d026      	beq.n	8001f02 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d021      	beq.n	8001f02 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ecc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed2:	f043 0201 	orr.w	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f003 0320 	and.w	r3, r3, #32
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d026      	beq.n	8001f5a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d021      	beq.n	8001f5a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f24:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f32:	f043 0202 	orr.w	r2, r3, #2
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d026      	beq.n	8001fb2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d021      	beq.n	8001fb2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f7c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2208      	movs	r2, #8
 8001f84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8a:	f043 0204 	orr.w	r2, r3, #4
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2204      	movs	r2, #4
 8001f96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d013      	beq.n	8001fe4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00e      	beq.n	8001fe4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fd4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2204      	movs	r2, #4
 8001fdc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f853 	bl	800208a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d024      	beq.n	8002038 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01f      	beq.n	8002038 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002006:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2202      	movs	r2, #2
 800200e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	d01f      	beq.n	8002082 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01a      	beq.n	8002082 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800205a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2210      	movs	r2, #16
 8002062:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f80e 	bl	800209e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_DMA2D_ConfigLayer+0x20>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e079      	b.n	80021c8 <HAL_DMA2D_ConfigLayer+0x114>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	3318      	adds	r3, #24
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	041b      	lsls	r3, r3, #16
 80020fa:	4313      	orrs	r3, r2
 80020fc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80020fe:	4b35      	ldr	r3, [pc, #212]	; (80021d4 <HAL_DMA2D_ConfigLayer+0x120>)
 8002100:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b0a      	cmp	r3, #10
 8002108:	d003      	beq.n	8002112 <HAL_DMA2D_ConfigLayer+0x5e>
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b09      	cmp	r3, #9
 8002110:	d107      	bne.n	8002122 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e005      	b.n	800212e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	061b      	lsls	r3, r3, #24
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	4313      	orrs	r3, r2
 800212c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d120      	bne.n	8002176 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	43db      	mvns	r3, r3
 800213e:	ea02 0103 	and.w	r1, r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	430a      	orrs	r2, r1
 800214a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b0a      	cmp	r3, #10
 800215c:	d003      	beq.n	8002166 <HAL_DMA2D_ConfigLayer+0xb2>
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b09      	cmp	r3, #9
 8002164:	d127      	bne.n	80021b6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
 8002174:	e01f      	b.n	80021b6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	69da      	ldr	r2, [r3, #28]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43db      	mvns	r3, r3
 8002180:	ea02 0103 	and.w	r1, r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	430a      	orrs	r2, r1
 800218c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b0a      	cmp	r3, #10
 800219e:	d003      	beq.n	80021a8 <HAL_DMA2D_ConfigLayer+0xf4>
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b09      	cmp	r3, #9
 80021a6:	d106      	bne.n	80021b6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80021b4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	371c      	adds	r7, #28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	ff03000f 	.word	0xff03000f

080021d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d8:	b480      	push	{r7}
 80021da:	b089      	sub	sp, #36	; 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	e177      	b.n	80024e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f4:	2201      	movs	r2, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	429a      	cmp	r2, r3
 800220e:	f040 8166 	bne.w	80024de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d005      	beq.n	800222a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002226:	2b02      	cmp	r3, #2
 8002228:	d130      	bne.n	800228c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2203      	movs	r2, #3
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002260:	2201      	movs	r2, #1
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 0201 	and.w	r2, r3, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b03      	cmp	r3, #3
 8002296:	d017      	beq.n	80022c8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d123      	bne.n	800231c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	08da      	lsrs	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3208      	adds	r2, #8
 80022dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	220f      	movs	r2, #15
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	08da      	lsrs	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3208      	adds	r2, #8
 8002316:	69b9      	ldr	r1, [r7, #24]
 8002318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0203 	and.w	r2, r3, #3
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80c0 	beq.w	80024de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b66      	ldr	r3, [pc, #408]	; (80024fc <HAL_GPIO_Init+0x324>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	4a65      	ldr	r2, [pc, #404]	; (80024fc <HAL_GPIO_Init+0x324>)
 8002368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800236c:	6453      	str	r3, [r2, #68]	; 0x44
 800236e:	4b63      	ldr	r3, [pc, #396]	; (80024fc <HAL_GPIO_Init+0x324>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800237a:	4a61      	ldr	r2, [pc, #388]	; (8002500 <HAL_GPIO_Init+0x328>)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	3302      	adds	r3, #2
 8002382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	220f      	movs	r2, #15
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a58      	ldr	r2, [pc, #352]	; (8002504 <HAL_GPIO_Init+0x32c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d037      	beq.n	8002416 <HAL_GPIO_Init+0x23e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a57      	ldr	r2, [pc, #348]	; (8002508 <HAL_GPIO_Init+0x330>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d031      	beq.n	8002412 <HAL_GPIO_Init+0x23a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a56      	ldr	r2, [pc, #344]	; (800250c <HAL_GPIO_Init+0x334>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d02b      	beq.n	800240e <HAL_GPIO_Init+0x236>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a55      	ldr	r2, [pc, #340]	; (8002510 <HAL_GPIO_Init+0x338>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d025      	beq.n	800240a <HAL_GPIO_Init+0x232>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a54      	ldr	r2, [pc, #336]	; (8002514 <HAL_GPIO_Init+0x33c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d01f      	beq.n	8002406 <HAL_GPIO_Init+0x22e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a53      	ldr	r2, [pc, #332]	; (8002518 <HAL_GPIO_Init+0x340>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d019      	beq.n	8002402 <HAL_GPIO_Init+0x22a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a52      	ldr	r2, [pc, #328]	; (800251c <HAL_GPIO_Init+0x344>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d013      	beq.n	80023fe <HAL_GPIO_Init+0x226>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a51      	ldr	r2, [pc, #324]	; (8002520 <HAL_GPIO_Init+0x348>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00d      	beq.n	80023fa <HAL_GPIO_Init+0x222>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a50      	ldr	r2, [pc, #320]	; (8002524 <HAL_GPIO_Init+0x34c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d007      	beq.n	80023f6 <HAL_GPIO_Init+0x21e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4f      	ldr	r2, [pc, #316]	; (8002528 <HAL_GPIO_Init+0x350>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d101      	bne.n	80023f2 <HAL_GPIO_Init+0x21a>
 80023ee:	2309      	movs	r3, #9
 80023f0:	e012      	b.n	8002418 <HAL_GPIO_Init+0x240>
 80023f2:	230a      	movs	r3, #10
 80023f4:	e010      	b.n	8002418 <HAL_GPIO_Init+0x240>
 80023f6:	2308      	movs	r3, #8
 80023f8:	e00e      	b.n	8002418 <HAL_GPIO_Init+0x240>
 80023fa:	2307      	movs	r3, #7
 80023fc:	e00c      	b.n	8002418 <HAL_GPIO_Init+0x240>
 80023fe:	2306      	movs	r3, #6
 8002400:	e00a      	b.n	8002418 <HAL_GPIO_Init+0x240>
 8002402:	2305      	movs	r3, #5
 8002404:	e008      	b.n	8002418 <HAL_GPIO_Init+0x240>
 8002406:	2304      	movs	r3, #4
 8002408:	e006      	b.n	8002418 <HAL_GPIO_Init+0x240>
 800240a:	2303      	movs	r3, #3
 800240c:	e004      	b.n	8002418 <HAL_GPIO_Init+0x240>
 800240e:	2302      	movs	r3, #2
 8002410:	e002      	b.n	8002418 <HAL_GPIO_Init+0x240>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_GPIO_Init+0x240>
 8002416:	2300      	movs	r3, #0
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	f002 0203 	and.w	r2, r2, #3
 800241e:	0092      	lsls	r2, r2, #2
 8002420:	4093      	lsls	r3, r2
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002428:	4935      	ldr	r1, [pc, #212]	; (8002500 <HAL_GPIO_Init+0x328>)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	3302      	adds	r3, #2
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002436:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_GPIO_Init+0x354>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800245a:	4a34      	ldr	r2, [pc, #208]	; (800252c <HAL_GPIO_Init+0x354>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002460:	4b32      	ldr	r3, [pc, #200]	; (800252c <HAL_GPIO_Init+0x354>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002484:	4a29      	ldr	r2, [pc, #164]	; (800252c <HAL_GPIO_Init+0x354>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248a:	4b28      	ldr	r3, [pc, #160]	; (800252c <HAL_GPIO_Init+0x354>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ae:	4a1f      	ldr	r2, [pc, #124]	; (800252c <HAL_GPIO_Init+0x354>)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b4:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_GPIO_Init+0x354>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <HAL_GPIO_Init+0x354>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3301      	adds	r3, #1
 80024e2:	61fb      	str	r3, [r7, #28]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	2b0f      	cmp	r3, #15
 80024e8:	f67f ae84 	bls.w	80021f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	40013800 	.word	0x40013800
 8002504:	40020000 	.word	0x40020000
 8002508:	40020400 	.word	0x40020400
 800250c:	40020800 	.word	0x40020800
 8002510:	40020c00 	.word	0x40020c00
 8002514:	40021000 	.word	0x40021000
 8002518:	40021400 	.word	0x40021400
 800251c:	40021800 	.word	0x40021800
 8002520:	40021c00 	.word	0x40021c00
 8002524:	40022000 	.word	0x40022000
 8002528:	40022400 	.word	0x40022400
 800252c:	40013c00 	.word	0x40013c00

08002530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
 800253c:	4613      	mov	r3, r2
 800253e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002540:	787b      	ldrb	r3, [r7, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800254c:	e003      	b.n	8002556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800254e:	887b      	ldrh	r3, [r7, #2]
 8002550:	041a      	lsls	r2, r3, #16
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	619a      	str	r2, [r3, #24]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002562:	b480      	push	{r7}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002574:	887a      	ldrh	r2, [r7, #2]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4013      	ands	r3, r2
 800257a:	041a      	lsls	r2, r3, #16
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	43d9      	mvns	r1, r3
 8002580:	887b      	ldrh	r3, [r7, #2]
 8002582:	400b      	ands	r3, r1
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	619a      	str	r2, [r3, #24]
}
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d006      	beq.n	80025bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ae:	4a05      	ldr	r2, [pc, #20]	; (80025c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fa4a 	bl	8000a50 <HAL_GPIO_EXTI_Callback>
  }
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40013c00 	.word	0x40013c00

080025c8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80025c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ca:	b08f      	sub	sp, #60	; 0x3c
 80025cc:	af0a      	add	r7, sp, #40	; 0x28
 80025ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e054      	b.n	8002684 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d106      	bne.n	80025fa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff f985 	bl	8001904 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2203      	movs	r2, #3
 80025fe:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d102      	bne.n	8002614 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f004 fabe 	bl	8006b9a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	687e      	ldr	r6, [r7, #4]
 8002626:	466d      	mov	r5, sp
 8002628:	f106 0410 	add.w	r4, r6, #16
 800262c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800262e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002634:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002638:	e885 0003 	stmia.w	r5, {r0, r1}
 800263c:	1d33      	adds	r3, r6, #4
 800263e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002640:	6838      	ldr	r0, [r7, #0]
 8002642:	f004 fa49 	bl	8006ad8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2101      	movs	r1, #1
 800264c:	4618      	mov	r0, r3
 800264e:	f004 fab5 	bl	8006bbc <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	687e      	ldr	r6, [r7, #4]
 800265a:	466d      	mov	r5, sp
 800265c:	f106 0410 	add.w	r4, r6, #16
 8002660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002668:	e894 0003 	ldmia.w	r4, {r0, r1}
 800266c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002670:	1d33      	adds	r3, r6, #4
 8002672:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002674:	6838      	ldr	r0, [r7, #0]
 8002676:	f004 fb91 	bl	8006d9c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800268c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f004 fb38 	bl	8006d18 <USB_GetMode>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	f040 80ef 	bne.w	800288e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f004 fb1c 	bl	8006cf2 <USB_ReadInterrupts>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80e5 	beq.w	800288c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f004 fb13 	bl	8006cf2 <USB_ReadInterrupts>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026d6:	d104      	bne.n	80026e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80026e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 fb03 	bl	8006cf2 <USB_ReadInterrupts>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026f6:	d104      	bne.n	8002702 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002700:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f004 faf3 	bl	8006cf2 <USB_ReadInterrupts>
 800270c:	4603      	mov	r3, r0
 800270e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002712:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002716:	d104      	bne.n	8002722 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002720:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f004 fae3 	bl	8006cf2 <USB_ReadInterrupts>
 800272c:	4603      	mov	r3, r0
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b02      	cmp	r3, #2
 8002734:	d103      	bne.n	800273e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2202      	movs	r2, #2
 800273c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f004 fad5 	bl	8006cf2 <USB_ReadInterrupts>
 8002748:	4603      	mov	r3, r0
 800274a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800274e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002752:	d115      	bne.n	8002780 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800275c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d108      	bne.n	8002780 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f8a4 	bl	80028bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	4618      	mov	r0, r3
 800277c:	f004 fbca 	bl	8006f14 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f004 fab4 	bl	8006cf2 <USB_ReadInterrupts>
 800278a:	4603      	mov	r3, r0
 800278c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002794:	d102      	bne.n	800279c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f001 f9ad 	bl	8003af6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f004 faa6 	bl	8006cf2 <USB_ReadInterrupts>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d106      	bne.n	80027be <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f86f 	bl	8002894 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2208      	movs	r2, #8
 80027bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f004 fa95 	bl	8006cf2 <USB_ReadInterrupts>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	d101      	bne.n	80027d6 <HAL_HCD_IRQHandler+0x14a>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_HCD_IRQHandler+0x14c>
 80027d6:	2300      	movs	r3, #0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d012      	beq.n	8002802 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0210 	bic.w	r2, r2, #16
 80027ea:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f001 f8b0 	bl	8003952 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699a      	ldr	r2, [r3, #24]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0210 	orr.w	r2, r2, #16
 8002800:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f004 fa73 	bl	8006cf2 <USB_ReadInterrupts>
 800280c:	4603      	mov	r3, r0
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002816:	d13a      	bne.n	800288e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f004 fbec 	bl	8006ffa <USB_HC_ReadInterrupt>
 8002822:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	e025      	b.n	8002876 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	fa22 f303 	lsr.w	r3, r2, r3
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d018      	beq.n	8002870 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002854:	d106      	bne.n	8002864 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	4619      	mov	r1, r3
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f859 	bl	8002914 <HCD_HC_IN_IRQHandler>
 8002862:	e005      	b.n	8002870 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	4619      	mov	r1, r3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fc74 	bl	8003158 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3301      	adds	r3, #1
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	429a      	cmp	r2, r3
 800287e:	d3d4      	bcc.n	800282a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002888:	615a      	str	r2, [r3, #20]
 800288a:	e000      	b.n	800288e <HAL_HCD_IRQHandler+0x202>
      return;
 800288c:	bf00      	nop
    }
  }
}
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	70fb      	strb	r3, [r7, #3]
 8002904:	4613      	mov	r3, r2
 8002906:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b04      	cmp	r3, #4
 8002942:	d119      	bne.n	8002978 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	461a      	mov	r2, r3
 8002952:	2304      	movs	r3, #4
 8002954:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	0151      	lsls	r1, r2, #5
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	440a      	add	r2, r1
 800296c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	60d3      	str	r3, [r2, #12]
 8002976:	e101      	b.n	8002b7c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298e:	d12b      	bne.n	80029e8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	461a      	mov	r2, r3
 800299e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3361      	adds	r3, #97	; 0x61
 80029b2:	2207      	movs	r2, #7
 80029b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	0151      	lsls	r1, r2, #5
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	440a      	add	r2, r1
 80029cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f004 fb1b 	bl	800701c <USB_HC_Halt>
 80029e6:	e0c9      	b.n	8002b7c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b20      	cmp	r3, #32
 80029fc:	d109      	bne.n	8002a12 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	6093      	str	r3, [r2, #8]
 8002a10:	e0b4      	b.n	8002b7c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d133      	bne.n	8002a90 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	0151      	lsls	r1, r2, #5
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	440a      	add	r2, r1
 8002a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a42:	f043 0302 	orr.w	r3, r3, #2
 8002a46:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3361      	adds	r3, #97	; 0x61
 8002a56:	2205      	movs	r2, #5
 8002a58:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	461a      	mov	r2, r3
 8002a68:	2310      	movs	r3, #16
 8002a6a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f004 fac7 	bl	800701c <USB_HC_Halt>
 8002a8e:	e075      	b.n	8002b7c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa6:	d134      	bne.n	8002b12 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	0151      	lsls	r1, r2, #5
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	440a      	add	r2, r1
 8002abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ac2:	f043 0302 	orr.w	r3, r3, #2
 8002ac6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3361      	adds	r3, #97	; 0x61
 8002ad6:	2208      	movs	r2, #8
 8002ad8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	2310      	movs	r3, #16
 8002aea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	461a      	mov	r2, r3
 8002afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002afe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 fa86 	bl	800701c <USB_HC_Halt>
 8002b10:	e034      	b.n	8002b7c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b24:	2b80      	cmp	r3, #128	; 0x80
 8002b26:	d129      	bne.n	8002b7c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	0151      	lsls	r1, r2, #5
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	440a      	add	r2, r1
 8002b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b42:	f043 0302 	orr.w	r3, r3, #2
 8002b46:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	3361      	adds	r3, #97	; 0x61
 8002b56:	2206      	movs	r2, #6
 8002b58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f004 fa59 	bl	800701c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b76:	461a      	mov	r2, r3
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b92:	d122      	bne.n	8002bda <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	0151      	lsls	r1, r2, #5
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	440a      	add	r2, r1
 8002baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f004 fa2c 	bl	800701c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bd6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002bd8:	e2ba      	b.n	8003150 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	f040 811b 	bne.w	8002e28 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d019      	beq.n	8002c2e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	3348      	adds	r3, #72	; 0x48
 8002c08:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	0159      	lsls	r1, r3, #5
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	440b      	add	r3, r1
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c1c:	1ad2      	subs	r2, r2, r3
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	202c      	movs	r0, #44	; 0x2c
 8002c24:	fb00 f303 	mul.w	r3, r0, r3
 8002c28:	440b      	add	r3, r1
 8002c2a:	3350      	adds	r3, #80	; 0x50
 8002c2c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3361      	adds	r3, #97	; 0x61
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	335c      	adds	r3, #92	; 0x5c
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2301      	movs	r3, #1
 8002c62:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	333f      	adds	r3, #63	; 0x3f
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d009      	beq.n	8002c8c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	333f      	adds	r3, #63	; 0x3f
 8002c86:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d121      	bne.n	8002cd0 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	0151      	lsls	r1, r2, #5
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	440a      	add	r2, r1
 8002ca2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ca6:	f043 0302 	orr.w	r3, r3, #2
 8002caa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f004 f9b0 	bl	800701c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2310      	movs	r3, #16
 8002ccc:	6093      	str	r3, [r2, #8]
 8002cce:	e066      	b.n	8002d9e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	333f      	adds	r3, #63	; 0x3f
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d127      	bne.n	8002d34 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	0151      	lsls	r1, r2, #5
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	440a      	add	r2, r1
 8002cfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d02:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3360      	adds	r3, #96	; 0x60
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	b2d9      	uxtb	r1, r3
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	202c      	movs	r0, #44	; 0x2c
 8002d20:	fb00 f303 	mul.w	r3, r0, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	3360      	adds	r3, #96	; 0x60
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff fde3 	bl	80028f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d32:	e034      	b.n	8002d9e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	212c      	movs	r1, #44	; 0x2c
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	333f      	adds	r3, #63	; 0x3f
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d12a      	bne.n	8002d9e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	3360      	adds	r3, #96	; 0x60
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	212c      	movs	r1, #44	; 0x2c
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	3354      	adds	r3, #84	; 0x54
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	f083 0301 	eor.w	r3, r3, #1
 8002d6e:	b2d8      	uxtb	r0, r3
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	212c      	movs	r1, #44	; 0x2c
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3354      	adds	r3, #84	; 0x54
 8002d7e:	4602      	mov	r2, r0
 8002d80:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	b2d9      	uxtb	r1, r3
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	202c      	movs	r0, #44	; 0x2c
 8002d8c:	fb00 f303 	mul.w	r3, r0, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	3360      	adds	r3, #96	; 0x60
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff fdad 	bl	80028f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d12b      	bne.n	8002dfe <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	212c      	movs	r1, #44	; 0x2c
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	3348      	adds	r3, #72	; 0x48
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	202c      	movs	r0, #44	; 0x2c
 8002dbc:	fb00 f202 	mul.w	r2, r0, r2
 8002dc0:	440a      	add	r2, r1
 8002dc2:	3240      	adds	r2, #64	; 0x40
 8002dc4:	8812      	ldrh	r2, [r2, #0]
 8002dc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 81be 	beq.w	8003150 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	212c      	movs	r1, #44	; 0x2c
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	3354      	adds	r3, #84	; 0x54
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	f083 0301 	eor.w	r3, r3, #1
 8002de8:	b2d8      	uxtb	r0, r3
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	212c      	movs	r1, #44	; 0x2c
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	3354      	adds	r3, #84	; 0x54
 8002df8:	4602      	mov	r2, r0
 8002dfa:	701a      	strb	r2, [r3, #0]
}
 8002dfc:	e1a8      	b.n	8003150 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	3354      	adds	r3, #84	; 0x54
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	f083 0301 	eor.w	r3, r3, #1
 8002e12:	b2d8      	uxtb	r0, r3
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	212c      	movs	r1, #44	; 0x2c
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	4413      	add	r3, r2
 8002e20:	3354      	adds	r3, #84	; 0x54
 8002e22:	4602      	mov	r2, r0
 8002e24:	701a      	strb	r2, [r3, #0]
}
 8002e26:	e193      	b.n	8003150 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	f040 8106 	bne.w	800304c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	0151      	lsls	r1, r2, #5
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	440a      	add	r2, r1
 8002e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e5a:	f023 0302 	bic.w	r3, r3, #2
 8002e5e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	212c      	movs	r1, #44	; 0x2c
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3361      	adds	r3, #97	; 0x61
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d109      	bne.n	8002e88 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	212c      	movs	r1, #44	; 0x2c
 8002e7a:	fb01 f303 	mul.w	r3, r1, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	3360      	adds	r3, #96	; 0x60
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
 8002e86:	e0c9      	b.n	800301c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	212c      	movs	r1, #44	; 0x2c
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	3361      	adds	r3, #97	; 0x61
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d109      	bne.n	8002eb0 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	212c      	movs	r1, #44	; 0x2c
 8002ea2:	fb01 f303 	mul.w	r3, r1, r3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3360      	adds	r3, #96	; 0x60
 8002eaa:	2205      	movs	r2, #5
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e0b5      	b.n	800301c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	212c      	movs	r1, #44	; 0x2c
 8002eb6:	fb01 f303 	mul.w	r3, r1, r3
 8002eba:	4413      	add	r3, r2
 8002ebc:	3361      	adds	r3, #97	; 0x61
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b06      	cmp	r3, #6
 8002ec2:	d009      	beq.n	8002ed8 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3361      	adds	r3, #97	; 0x61
 8002ed2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d150      	bne.n	8002f7a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	212c      	movs	r1, #44	; 0x2c
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	335c      	adds	r3, #92	; 0x5c
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	202c      	movs	r0, #44	; 0x2c
 8002ef0:	fb00 f303 	mul.w	r3, r0, r3
 8002ef4:	440b      	add	r3, r1
 8002ef6:	335c      	adds	r3, #92	; 0x5c
 8002ef8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	335c      	adds	r3, #92	; 0x5c
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d912      	bls.n	8002f34 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	212c      	movs	r1, #44	; 0x2c
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	4413      	add	r3, r2
 8002f1a:	335c      	adds	r3, #92	; 0x5c
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	212c      	movs	r1, #44	; 0x2c
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3360      	adds	r3, #96	; 0x60
 8002f2e:	2204      	movs	r2, #4
 8002f30:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f32:	e073      	b.n	800301c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	212c      	movs	r1, #44	; 0x2c
 8002f3a:	fb01 f303 	mul.w	r3, r1, r3
 8002f3e:	4413      	add	r3, r2
 8002f40:	3360      	adds	r3, #96	; 0x60
 8002f42:	2202      	movs	r2, #2
 8002f44:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f5c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f64:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f72:	461a      	mov	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f78:	e050      	b.n	800301c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	212c      	movs	r1, #44	; 0x2c
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	4413      	add	r3, r2
 8002f86:	3361      	adds	r3, #97	; 0x61
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d122      	bne.n	8002fd4 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	3360      	adds	r3, #96	; 0x60
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fb6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fbe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	e023      	b.n	800301c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	212c      	movs	r1, #44	; 0x2c
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	4413      	add	r3, r2
 8002fe0:	3361      	adds	r3, #97	; 0x61
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b07      	cmp	r3, #7
 8002fe6:	d119      	bne.n	800301c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	212c      	movs	r1, #44	; 0x2c
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	335c      	adds	r3, #92	; 0x5c
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	202c      	movs	r0, #44	; 0x2c
 8003000:	fb00 f303 	mul.w	r3, r0, r3
 8003004:	440b      	add	r3, r1
 8003006:	335c      	adds	r3, #92	; 0x5c
 8003008:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	212c      	movs	r1, #44	; 0x2c
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4413      	add	r3, r2
 8003016:	3360      	adds	r3, #96	; 0x60
 8003018:	2204      	movs	r2, #4
 800301a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003028:	461a      	mov	r2, r3
 800302a:	2302      	movs	r3, #2
 800302c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	b2d9      	uxtb	r1, r3
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	202c      	movs	r0, #44	; 0x2c
 8003038:	fb00 f303 	mul.w	r3, r0, r3
 800303c:	4413      	add	r3, r2
 800303e:	3360      	adds	r3, #96	; 0x60
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff fc57 	bl	80028f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800304a:	e081      	b.n	8003150 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4413      	add	r3, r2
 8003054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b10      	cmp	r3, #16
 8003060:	d176      	bne.n	8003150 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	212c      	movs	r1, #44	; 0x2c
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	4413      	add	r3, r2
 800306e:	333f      	adds	r3, #63	; 0x3f
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b03      	cmp	r3, #3
 8003074:	d121      	bne.n	80030ba <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	335c      	adds	r3, #92	; 0x5c
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4413      	add	r3, r2
 8003090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	0151      	lsls	r1, r2, #5
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	440a      	add	r2, r1
 800309e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030a2:	f043 0302 	orr.w	r3, r3, #2
 80030a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 ffb2 	bl	800701c <USB_HC_Halt>
 80030b8:	e041      	b.n	800313e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	212c      	movs	r1, #44	; 0x2c
 80030c0:	fb01 f303 	mul.w	r3, r1, r3
 80030c4:	4413      	add	r3, r2
 80030c6:	333f      	adds	r3, #63	; 0x3f
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	212c      	movs	r1, #44	; 0x2c
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	4413      	add	r3, r2
 80030da:	333f      	adds	r3, #63	; 0x3f
 80030dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d12d      	bne.n	800313e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	335c      	adds	r3, #92	; 0x5c
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d120      	bne.n	800313e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	212c      	movs	r1, #44	; 0x2c
 8003102:	fb01 f303 	mul.w	r3, r1, r3
 8003106:	4413      	add	r3, r2
 8003108:	3361      	adds	r3, #97	; 0x61
 800310a:	2203      	movs	r2, #3
 800310c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4413      	add	r3, r2
 8003116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	0151      	lsls	r1, r2, #5
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	440a      	add	r2, r1
 8003124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003128:	f043 0302 	orr.w	r3, r3, #2
 800312c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	4611      	mov	r1, r2
 8003138:	4618      	mov	r0, r3
 800313a:	f003 ff6f 	bl	800701c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4413      	add	r3, r2
 8003146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314a:	461a      	mov	r2, r3
 800314c:	2310      	movs	r3, #16
 800314e:	6093      	str	r3, [r2, #8]
}
 8003150:	bf00      	nop
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	4413      	add	r3, r2
 800317a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b04      	cmp	r3, #4
 8003186:	d119      	bne.n	80031bc <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	4413      	add	r3, r2
 8003190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003194:	461a      	mov	r2, r3
 8003196:	2304      	movs	r3, #4
 8003198:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	0151      	lsls	r1, r2, #5
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	440a      	add	r2, r1
 80031b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031b4:	f043 0302 	orr.w	r3, r3, #2
 80031b8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80031ba:	e3c6      	b.n	800394a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d13e      	bne.n	8003250 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031de:	461a      	mov	r2, r3
 80031e0:	2320      	movs	r3, #32
 80031e2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	212c      	movs	r1, #44	; 0x2c
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	333d      	adds	r3, #61	; 0x3d
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	f040 83a8 	bne.w	800394a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	333d      	adds	r3, #61	; 0x3d
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	3360      	adds	r3, #96	; 0x60
 800321a:	2202      	movs	r2, #2
 800321c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	4413      	add	r3, r2
 8003226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	0151      	lsls	r1, r2, #5
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	440a      	add	r2, r1
 8003234:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003238:	f043 0302 	orr.w	r3, r3, #2
 800323c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f003 fee7 	bl	800701c <USB_HC_Halt>
}
 800324e:	e37c      	b.n	800394a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	4413      	add	r3, r2
 8003258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003266:	d122      	bne.n	80032ae <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	4413      	add	r3, r2
 8003270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	0151      	lsls	r1, r2, #5
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	440a      	add	r2, r1
 800327e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003282:	f043 0302 	orr.w	r3, r3, #2
 8003286:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f003 fec2 	bl	800701c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a4:	461a      	mov	r2, r3
 80032a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032aa:	6093      	str	r3, [r2, #8]
}
 80032ac:	e34d      	b.n	800394a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d150      	bne.n	8003366 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	212c      	movs	r1, #44	; 0x2c
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	335c      	adds	r3, #92	; 0x5c
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e8:	2b40      	cmp	r3, #64	; 0x40
 80032ea:	d111      	bne.n	8003310 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	333d      	adds	r3, #61	; 0x3d
 80032fa:	2201      	movs	r2, #1
 80032fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330a:	461a      	mov	r2, r3
 800330c:	2340      	movs	r3, #64	; 0x40
 800330e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	0151      	lsls	r1, r2, #5
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	440a      	add	r2, r1
 8003326:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f003 fe6e 	bl	800701c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	4413      	add	r3, r2
 8003348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334c:	461a      	mov	r2, r3
 800334e:	2301      	movs	r3, #1
 8003350:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	3361      	adds	r3, #97	; 0x61
 8003360:	2201      	movs	r2, #1
 8003362:	701a      	strb	r2, [r3, #0]
}
 8003364:	e2f1      	b.n	800394a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	4413      	add	r3, r2
 800336e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	d13c      	bne.n	80033f6 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	212c      	movs	r1, #44	; 0x2c
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	4413      	add	r3, r2
 8003388:	3361      	adds	r3, #97	; 0x61
 800338a:	2204      	movs	r2, #4
 800338c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	333d      	adds	r3, #61	; 0x3d
 800339c:	2201      	movs	r2, #1
 800339e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	212c      	movs	r1, #44	; 0x2c
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	4413      	add	r3, r2
 80033ac:	335c      	adds	r3, #92	; 0x5c
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	0151      	lsls	r1, r2, #5
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	440a      	add	r2, r1
 80033c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033cc:	f043 0302 	orr.w	r3, r3, #2
 80033d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	4611      	mov	r1, r2
 80033dc:	4618      	mov	r0, r3
 80033de:	f003 fe1d 	bl	800701c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ee:	461a      	mov	r2, r3
 80033f0:	2340      	movs	r3, #64	; 0x40
 80033f2:	6093      	str	r3, [r2, #8]
}
 80033f4:	e2a9      	b.n	800394a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b08      	cmp	r3, #8
 800340a:	d12a      	bne.n	8003462 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003418:	461a      	mov	r2, r3
 800341a:	2308      	movs	r3, #8
 800341c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	4413      	add	r3, r2
 8003426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	0151      	lsls	r1, r2, #5
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	440a      	add	r2, r1
 8003434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	4611      	mov	r1, r2
 8003448:	4618      	mov	r0, r3
 800344a:	f003 fde7 	bl	800701c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	212c      	movs	r1, #44	; 0x2c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	3361      	adds	r3, #97	; 0x61
 800345c:	2205      	movs	r2, #5
 800345e:	701a      	strb	r2, [r3, #0]
}
 8003460:	e273      	b.n	800394a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	4413      	add	r3, r2
 800346a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2b10      	cmp	r3, #16
 8003476:	d150      	bne.n	800351a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	212c      	movs	r1, #44	; 0x2c
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	4413      	add	r3, r2
 8003484:	335c      	adds	r3, #92	; 0x5c
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	212c      	movs	r1, #44	; 0x2c
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	3361      	adds	r3, #97	; 0x61
 8003498:	2203      	movs	r2, #3
 800349a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	212c      	movs	r1, #44	; 0x2c
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	4413      	add	r3, r2
 80034a8:	333d      	adds	r3, #61	; 0x3d
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d112      	bne.n	80034d6 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	212c      	movs	r1, #44	; 0x2c
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	333c      	adds	r3, #60	; 0x3c
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d108      	bne.n	80034d6 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	212c      	movs	r1, #44	; 0x2c
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	4413      	add	r3, r2
 80034d0:	333d      	adds	r3, #61	; 0x3d
 80034d2:	2201      	movs	r2, #1
 80034d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	0151      	lsls	r1, r2, #5
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	440a      	add	r2, r1
 80034ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034f0:	f043 0302 	orr.w	r3, r3, #2
 80034f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f003 fd8b 	bl	800701c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	4413      	add	r3, r2
 800350e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003512:	461a      	mov	r2, r3
 8003514:	2310      	movs	r3, #16
 8003516:	6093      	str	r3, [r2, #8]
}
 8003518:	e217      	b.n	800394a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	4413      	add	r3, r2
 8003522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352c:	2b80      	cmp	r3, #128	; 0x80
 800352e:	d174      	bne.n	800361a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d121      	bne.n	800357c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	212c      	movs	r1, #44	; 0x2c
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	4413      	add	r3, r2
 8003544:	3361      	adds	r3, #97	; 0x61
 8003546:	2206      	movs	r2, #6
 8003548:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	4413      	add	r3, r2
 8003552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	0151      	lsls	r1, r2, #5
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	440a      	add	r2, r1
 8003560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003564:	f043 0302 	orr.w	r3, r3, #2
 8003568:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f003 fd51 	bl	800701c <USB_HC_Halt>
 800357a:	e044      	b.n	8003606 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	212c      	movs	r1, #44	; 0x2c
 8003582:	fb01 f303 	mul.w	r3, r1, r3
 8003586:	4413      	add	r3, r2
 8003588:	335c      	adds	r3, #92	; 0x5c
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	202c      	movs	r0, #44	; 0x2c
 8003594:	fb00 f303 	mul.w	r3, r0, r3
 8003598:	440b      	add	r3, r1
 800359a:	335c      	adds	r3, #92	; 0x5c
 800359c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	212c      	movs	r1, #44	; 0x2c
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	4413      	add	r3, r2
 80035aa:	335c      	adds	r3, #92	; 0x5c
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d920      	bls.n	80035f4 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	212c      	movs	r1, #44	; 0x2c
 80035b8:	fb01 f303 	mul.w	r3, r1, r3
 80035bc:	4413      	add	r3, r2
 80035be:	335c      	adds	r3, #92	; 0x5c
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	212c      	movs	r1, #44	; 0x2c
 80035ca:	fb01 f303 	mul.w	r3, r1, r3
 80035ce:	4413      	add	r3, r2
 80035d0:	3360      	adds	r3, #96	; 0x60
 80035d2:	2204      	movs	r2, #4
 80035d4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	b2d9      	uxtb	r1, r3
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	202c      	movs	r0, #44	; 0x2c
 80035e0:	fb00 f303 	mul.w	r3, r0, r3
 80035e4:	4413      	add	r3, r2
 80035e6:	3360      	adds	r3, #96	; 0x60
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff f983 	bl	80028f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80035f2:	e008      	b.n	8003606 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	212c      	movs	r1, #44	; 0x2c
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	4413      	add	r3, r2
 8003600:	3360      	adds	r3, #96	; 0x60
 8003602:	2202      	movs	r2, #2
 8003604:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	4413      	add	r3, r2
 800360e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003612:	461a      	mov	r2, r3
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	6093      	str	r3, [r2, #8]
}
 8003618:	e197      	b.n	800394a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	4413      	add	r3, r2
 8003622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003630:	d134      	bne.n	800369c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	4413      	add	r3, r2
 800363a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	0151      	lsls	r1, r2, #5
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	440a      	add	r2, r1
 8003648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800364c:	f043 0302 	orr.w	r3, r3, #2
 8003650:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	4611      	mov	r1, r2
 800365c:	4618      	mov	r0, r3
 800365e:	f003 fcdd 	bl	800701c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	4413      	add	r3, r2
 800366a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366e:	461a      	mov	r2, r3
 8003670:	2310      	movs	r3, #16
 8003672:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003680:	461a      	mov	r2, r3
 8003682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003686:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	212c      	movs	r1, #44	; 0x2c
 800368e:	fb01 f303 	mul.w	r3, r1, r3
 8003692:	4413      	add	r3, r2
 8003694:	3361      	adds	r3, #97	; 0x61
 8003696:	2208      	movs	r2, #8
 8003698:	701a      	strb	r2, [r3, #0]
}
 800369a:	e156      	b.n	800394a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	f040 814b 	bne.w	800394a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	0151      	lsls	r1, r2, #5
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	440a      	add	r2, r1
 80036ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036ce:	f023 0302 	bic.w	r3, r3, #2
 80036d2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	212c      	movs	r1, #44	; 0x2c
 80036da:	fb01 f303 	mul.w	r3, r1, r3
 80036de:	4413      	add	r3, r2
 80036e0:	3361      	adds	r3, #97	; 0x61
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d179      	bne.n	80037dc <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	212c      	movs	r1, #44	; 0x2c
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	3360      	adds	r3, #96	; 0x60
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	333f      	adds	r3, #63	; 0x3f
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d00a      	beq.n	8003724 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	212c      	movs	r1, #44	; 0x2c
 8003714:	fb01 f303 	mul.w	r3, r1, r3
 8003718:	4413      	add	r3, r2
 800371a:	333f      	adds	r3, #63	; 0x3f
 800371c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800371e:	2b03      	cmp	r3, #3
 8003720:	f040 80fc 	bne.w	800391c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d142      	bne.n	80037b2 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	212c      	movs	r1, #44	; 0x2c
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	4413      	add	r3, r2
 8003738:	334c      	adds	r3, #76	; 0x4c
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80ed 	beq.w	800391c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	212c      	movs	r1, #44	; 0x2c
 8003748:	fb01 f303 	mul.w	r3, r1, r3
 800374c:	4413      	add	r3, r2
 800374e:	334c      	adds	r3, #76	; 0x4c
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	202c      	movs	r0, #44	; 0x2c
 8003758:	fb00 f202 	mul.w	r2, r0, r2
 800375c:	440a      	add	r2, r1
 800375e:	3240      	adds	r2, #64	; 0x40
 8003760:	8812      	ldrh	r2, [r2, #0]
 8003762:	4413      	add	r3, r2
 8003764:	3b01      	subs	r3, #1
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	202c      	movs	r0, #44	; 0x2c
 800376c:	fb00 f202 	mul.w	r2, r0, r2
 8003770:	440a      	add	r2, r1
 8003772:	3240      	adds	r2, #64	; 0x40
 8003774:	8812      	ldrh	r2, [r2, #0]
 8003776:	fbb3 f3f2 	udiv	r3, r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80ca 	beq.w	800391c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	212c      	movs	r1, #44	; 0x2c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	3355      	adds	r3, #85	; 0x55
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	f083 0301 	eor.w	r3, r3, #1
 800379c:	b2d8      	uxtb	r0, r3
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	212c      	movs	r1, #44	; 0x2c
 80037a4:	fb01 f303 	mul.w	r3, r1, r3
 80037a8:	4413      	add	r3, r2
 80037aa:	3355      	adds	r3, #85	; 0x55
 80037ac:	4602      	mov	r2, r0
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	e0b4      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	212c      	movs	r1, #44	; 0x2c
 80037b8:	fb01 f303 	mul.w	r3, r1, r3
 80037bc:	4413      	add	r3, r2
 80037be:	3355      	adds	r3, #85	; 0x55
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	f083 0301 	eor.w	r3, r3, #1
 80037c6:	b2d8      	uxtb	r0, r3
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	212c      	movs	r1, #44	; 0x2c
 80037ce:	fb01 f303 	mul.w	r3, r1, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	3355      	adds	r3, #85	; 0x55
 80037d6:	4602      	mov	r2, r0
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	e09f      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	3361      	adds	r3, #97	; 0x61
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d109      	bne.n	8003804 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	212c      	movs	r1, #44	; 0x2c
 80037f6:	fb01 f303 	mul.w	r3, r1, r3
 80037fa:	4413      	add	r3, r2
 80037fc:	3360      	adds	r3, #96	; 0x60
 80037fe:	2202      	movs	r2, #2
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	e08b      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	212c      	movs	r1, #44	; 0x2c
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	4413      	add	r3, r2
 8003810:	3361      	adds	r3, #97	; 0x61
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b04      	cmp	r3, #4
 8003816:	d109      	bne.n	800382c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	212c      	movs	r1, #44	; 0x2c
 800381e:	fb01 f303 	mul.w	r3, r1, r3
 8003822:	4413      	add	r3, r2
 8003824:	3360      	adds	r3, #96	; 0x60
 8003826:	2202      	movs	r2, #2
 8003828:	701a      	strb	r2, [r3, #0]
 800382a:	e077      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	212c      	movs	r1, #44	; 0x2c
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	4413      	add	r3, r2
 8003838:	3361      	adds	r3, #97	; 0x61
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b05      	cmp	r3, #5
 800383e:	d109      	bne.n	8003854 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	212c      	movs	r1, #44	; 0x2c
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	4413      	add	r3, r2
 800384c:	3360      	adds	r3, #96	; 0x60
 800384e:	2205      	movs	r2, #5
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	e063      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	212c      	movs	r1, #44	; 0x2c
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	4413      	add	r3, r2
 8003860:	3361      	adds	r3, #97	; 0x61
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b06      	cmp	r3, #6
 8003866:	d009      	beq.n	800387c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	212c      	movs	r1, #44	; 0x2c
 800386e:	fb01 f303 	mul.w	r3, r1, r3
 8003872:	4413      	add	r3, r2
 8003874:	3361      	adds	r3, #97	; 0x61
 8003876:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003878:	2b08      	cmp	r3, #8
 800387a:	d14f      	bne.n	800391c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	212c      	movs	r1, #44	; 0x2c
 8003882:	fb01 f303 	mul.w	r3, r1, r3
 8003886:	4413      	add	r3, r2
 8003888:	335c      	adds	r3, #92	; 0x5c
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	202c      	movs	r0, #44	; 0x2c
 8003894:	fb00 f303 	mul.w	r3, r0, r3
 8003898:	440b      	add	r3, r1
 800389a:	335c      	adds	r3, #92	; 0x5c
 800389c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	212c      	movs	r1, #44	; 0x2c
 80038a4:	fb01 f303 	mul.w	r3, r1, r3
 80038a8:	4413      	add	r3, r2
 80038aa:	335c      	adds	r3, #92	; 0x5c
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d912      	bls.n	80038d8 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	212c      	movs	r1, #44	; 0x2c
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	4413      	add	r3, r2
 80038be:	335c      	adds	r3, #92	; 0x5c
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	212c      	movs	r1, #44	; 0x2c
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	3360      	adds	r3, #96	; 0x60
 80038d2:	2204      	movs	r2, #4
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	e021      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	212c      	movs	r1, #44	; 0x2c
 80038de:	fb01 f303 	mul.w	r3, r1, r3
 80038e2:	4413      	add	r3, r2
 80038e4:	3360      	adds	r3, #96	; 0x60
 80038e6:	2202      	movs	r2, #2
 80038e8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003900:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003908:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	4413      	add	r3, r2
 8003912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003916:	461a      	mov	r2, r3
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	4413      	add	r3, r2
 8003924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003928:	461a      	mov	r2, r3
 800392a:	2302      	movs	r3, #2
 800392c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	b2d9      	uxtb	r1, r3
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	202c      	movs	r0, #44	; 0x2c
 8003938:	fb00 f303 	mul.w	r3, r0, r3
 800393c:	4413      	add	r3, r2
 800393e:	3360      	adds	r3, #96	; 0x60
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7fe ffd7 	bl	80028f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800394a:	bf00      	nop
 800394c:	3720      	adds	r7, #32
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b08a      	sub	sp, #40	; 0x28
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	0c5b      	lsrs	r3, r3, #17
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003986:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d004      	beq.n	8003998 <HCD_RXQLVL_IRQHandler+0x46>
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b05      	cmp	r3, #5
 8003992:	f000 80a9 	beq.w	8003ae8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003996:	e0aa      	b.n	8003aee <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 80a6 	beq.w	8003aec <HCD_RXQLVL_IRQHandler+0x19a>
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	212c      	movs	r1, #44	; 0x2c
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	4413      	add	r3, r2
 80039ac:	3344      	adds	r3, #68	; 0x44
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 809b 	beq.w	8003aec <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	212c      	movs	r1, #44	; 0x2c
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	3350      	adds	r3, #80	; 0x50
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	441a      	add	r2, r3
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	202c      	movs	r0, #44	; 0x2c
 80039d0:	fb00 f303 	mul.w	r3, r0, r3
 80039d4:	440b      	add	r3, r1
 80039d6:	334c      	adds	r3, #76	; 0x4c
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d87a      	bhi.n	8003ad4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	212c      	movs	r1, #44	; 0x2c
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	4413      	add	r3, r2
 80039ee:	3344      	adds	r3, #68	; 0x44
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	b292      	uxth	r2, r2
 80039f6:	4619      	mov	r1, r3
 80039f8:	f003 f952 	bl	8006ca0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	212c      	movs	r1, #44	; 0x2c
 8003a02:	fb01 f303 	mul.w	r3, r1, r3
 8003a06:	4413      	add	r3, r2
 8003a08:	3344      	adds	r3, #68	; 0x44
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	441a      	add	r2, r3
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	202c      	movs	r0, #44	; 0x2c
 8003a16:	fb00 f303 	mul.w	r3, r0, r3
 8003a1a:	440b      	add	r3, r1
 8003a1c:	3344      	adds	r3, #68	; 0x44
 8003a1e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	212c      	movs	r1, #44	; 0x2c
 8003a26:	fb01 f303 	mul.w	r3, r1, r3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3350      	adds	r3, #80	; 0x50
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	441a      	add	r2, r3
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	202c      	movs	r0, #44	; 0x2c
 8003a3a:	fb00 f303 	mul.w	r3, r0, r3
 8003a3e:	440b      	add	r3, r1
 8003a40:	3350      	adds	r3, #80	; 0x50
 8003a42:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	0cdb      	lsrs	r3, r3, #19
 8003a54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a58:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	212c      	movs	r1, #44	; 0x2c
 8003a60:	fb01 f303 	mul.w	r3, r1, r3
 8003a64:	4413      	add	r3, r2
 8003a66:	3340      	adds	r3, #64	; 0x40
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d13c      	bne.n	8003aec <HCD_RXQLVL_IRQHandler+0x19a>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d039      	beq.n	8003aec <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a8e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a96:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	212c      	movs	r1, #44	; 0x2c
 8003ab0:	fb01 f303 	mul.w	r3, r1, r3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3354      	adds	r3, #84	; 0x54
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	f083 0301 	eor.w	r3, r3, #1
 8003abe:	b2d8      	uxtb	r0, r3
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	212c      	movs	r1, #44	; 0x2c
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	3354      	adds	r3, #84	; 0x54
 8003ace:	4602      	mov	r2, r0
 8003ad0:	701a      	strb	r2, [r3, #0]
      break;
 8003ad2:	e00b      	b.n	8003aec <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	212c      	movs	r1, #44	; 0x2c
 8003ada:	fb01 f303 	mul.w	r3, r1, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	3360      	adds	r3, #96	; 0x60
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	701a      	strb	r2, [r3, #0]
      break;
 8003ae6:	e001      	b.n	8003aec <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003ae8:	bf00      	nop
 8003aea:	e000      	b.n	8003aee <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003aec:	bf00      	nop
  }
}
 8003aee:	bf00      	nop
 8003af0:	3728      	adds	r7, #40	; 0x28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b086      	sub	sp, #24
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b22:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d10b      	bne.n	8003b46 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d102      	bne.n	8003b3e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7fe feb5 	bl	80028a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f043 0302 	orr.w	r3, r3, #2
 8003b44:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d132      	bne.n	8003bb6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f043 0308 	orr.w	r3, r3, #8
 8003b56:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d126      	bne.n	8003bb0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d113      	bne.n	8003b92 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003b70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b74:	d106      	bne.n	8003b84 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f003 f9c9 	bl	8006f14 <USB_InitFSLSPClkSel>
 8003b82:	e011      	b.n	8003ba8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2101      	movs	r1, #1
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f003 f9c2 	bl	8006f14 <USB_InitFSLSPClkSel>
 8003b90:	e00a      	b.n	8003ba8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d106      	bne.n	8003ba8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ba6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7fe fe91 	bl	80028d0 <HAL_HCD_PortEnabled_Callback>
 8003bae:	e002      	b.n	8003bb6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7fe fe97 	bl	80028e4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d103      	bne.n	8003bc8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f043 0320 	orr.w	r3, r3, #32
 8003bc6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	6013      	str	r3, [r2, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e12b      	b.n	8003e46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fc ff82 	bl	8000b0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2224      	movs	r2, #36	; 0x24
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c40:	f001 f940 	bl	8004ec4 <HAL_RCC_GetPCLK1Freq>
 8003c44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4a81      	ldr	r2, [pc, #516]	; (8003e50 <HAL_I2C_Init+0x274>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d807      	bhi.n	8003c60 <HAL_I2C_Init+0x84>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4a80      	ldr	r2, [pc, #512]	; (8003e54 <HAL_I2C_Init+0x278>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	bf94      	ite	ls
 8003c58:	2301      	movls	r3, #1
 8003c5a:	2300      	movhi	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e006      	b.n	8003c6e <HAL_I2C_Init+0x92>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a7d      	ldr	r2, [pc, #500]	; (8003e58 <HAL_I2C_Init+0x27c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	bf94      	ite	ls
 8003c68:	2301      	movls	r3, #1
 8003c6a:	2300      	movhi	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e0e7      	b.n	8003e46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4a78      	ldr	r2, [pc, #480]	; (8003e5c <HAL_I2C_Init+0x280>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	0c9b      	lsrs	r3, r3, #18
 8003c80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4a6a      	ldr	r2, [pc, #424]	; (8003e50 <HAL_I2C_Init+0x274>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d802      	bhi.n	8003cb0 <HAL_I2C_Init+0xd4>
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	3301      	adds	r3, #1
 8003cae:	e009      	b.n	8003cc4 <HAL_I2C_Init+0xe8>
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
 8003cba:	4a69      	ldr	r2, [pc, #420]	; (8003e60 <HAL_I2C_Init+0x284>)
 8003cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc0:	099b      	lsrs	r3, r3, #6
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	495c      	ldr	r1, [pc, #368]	; (8003e50 <HAL_I2C_Init+0x274>)
 8003ce0:	428b      	cmp	r3, r1
 8003ce2:	d819      	bhi.n	8003d18 <HAL_I2C_Init+0x13c>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1e59      	subs	r1, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cf2:	1c59      	adds	r1, r3, #1
 8003cf4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cf8:	400b      	ands	r3, r1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_I2C_Init+0x138>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1e59      	subs	r1, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d12:	e051      	b.n	8003db8 <HAL_I2C_Init+0x1dc>
 8003d14:	2304      	movs	r3, #4
 8003d16:	e04f      	b.n	8003db8 <HAL_I2C_Init+0x1dc>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d111      	bne.n	8003d44 <HAL_I2C_Init+0x168>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1e58      	subs	r0, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6859      	ldr	r1, [r3, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	440b      	add	r3, r1
 8003d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d32:	3301      	adds	r3, #1
 8003d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	e012      	b.n	8003d6a <HAL_I2C_Init+0x18e>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1e58      	subs	r0, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	0099      	lsls	r1, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bf0c      	ite	eq
 8003d64:	2301      	moveq	r3, #1
 8003d66:	2300      	movne	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_I2C_Init+0x196>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e022      	b.n	8003db8 <HAL_I2C_Init+0x1dc>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10e      	bne.n	8003d98 <HAL_I2C_Init+0x1bc>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1e58      	subs	r0, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6859      	ldr	r1, [r3, #4]
 8003d82:	460b      	mov	r3, r1
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	440b      	add	r3, r1
 8003d88:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d96:	e00f      	b.n	8003db8 <HAL_I2C_Init+0x1dc>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1e58      	subs	r0, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6859      	ldr	r1, [r3, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	0099      	lsls	r1, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dae:	3301      	adds	r3, #1
 8003db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	6809      	ldr	r1, [r1, #0]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69da      	ldr	r2, [r3, #28]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003de6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6911      	ldr	r1, [r2, #16]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68d2      	ldr	r2, [r2, #12]
 8003df2:	4311      	orrs	r1, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	000186a0 	.word	0x000186a0
 8003e54:	001e847f 	.word	0x001e847f
 8003e58:	003d08ff 	.word	0x003d08ff
 8003e5c:	431bde83 	.word	0x431bde83
 8003e60:	10624dd3 	.word	0x10624dd3

08003e64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d129      	bne.n	8003ece <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2224      	movs	r2, #36	; 0x24
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0201 	bic.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0210 	bic.w	r2, r2, #16
 8003ea0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0201 	orr.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e000      	b.n	8003ed0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
  }
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	d12a      	bne.n	8003f4c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2224      	movs	r2, #36	; 0x24
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0201 	bic.w	r2, r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003f16:	89fb      	ldrh	r3, [r7, #14]
 8003f18:	f023 030f 	bic.w	r3, r3, #15
 8003f1c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	89fb      	ldrh	r3, [r7, #14]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	89fa      	ldrh	r2, [r7, #14]
 8003f2e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e000      	b.n	8003f4e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003f4c:	2302      	movs	r3, #2
  }
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0bf      	b.n	80040ee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fc feac 	bl	8000ce0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003f9e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6999      	ldr	r1, [r3, #24]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003fb4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6899      	ldr	r1, [r3, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b4a      	ldr	r3, [pc, #296]	; (80040f8 <HAL_LTDC_Init+0x19c>)
 8003fd0:	400b      	ands	r3, r1
 8003fd2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	041b      	lsls	r3, r3, #16
 8003fda:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6899      	ldr	r1, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68d9      	ldr	r1, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	4b3e      	ldr	r3, [pc, #248]	; (80040f8 <HAL_LTDC_Init+0x19c>)
 8003ffe:	400b      	ands	r3, r1
 8004000:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	041b      	lsls	r3, r3, #16
 8004008:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68d9      	ldr	r1, [r3, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1a      	ldr	r2, [r3, #32]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6919      	ldr	r1, [r3, #16]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	4b33      	ldr	r3, [pc, #204]	; (80040f8 <HAL_LTDC_Init+0x19c>)
 800402c:	400b      	ands	r3, r1
 800402e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	041b      	lsls	r3, r3, #16
 8004036:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6919      	ldr	r1, [r3, #16]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6959      	ldr	r1, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <HAL_LTDC_Init+0x19c>)
 800405a:	400b      	ands	r3, r1
 800405c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004062:	041b      	lsls	r3, r3, #16
 8004064:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6959      	ldr	r1, [r3, #20]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800408c:	041b      	lsls	r3, r3, #16
 800408e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800409e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0206 	orr.w	r2, r2, #6
 80040ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	f000f800 	.word	0xf000f800

080040fc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004112:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b00      	cmp	r3, #0
 800411c:	d023      	beq.n	8004166 <HAL_LTDC_IRQHandler+0x6a>
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01e      	beq.n	8004166 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0204 	bic.w	r2, r2, #4
 8004136:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2204      	movs	r2, #4
 800413e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004146:	f043 0201 	orr.w	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2204      	movs	r2, #4
 8004154:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f86f 	bl	8004244 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d023      	beq.n	80041b8 <HAL_LTDC_IRQHandler+0xbc>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01e      	beq.n	80041b8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0202 	bic.w	r2, r2, #2
 8004188:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2202      	movs	r2, #2
 8004190:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004198:	f043 0202 	orr.w	r2, r3, #2
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2204      	movs	r2, #4
 80041a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f846 	bl	8004244 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d01b      	beq.n	80041fa <HAL_LTDC_IRQHandler+0xfe>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d016      	beq.n	80041fa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2201      	movs	r2, #1
 80041e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f82f 	bl	8004258 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01b      	beq.n	800423c <HAL_LTDC_IRQHandler+0x140>
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d016      	beq.n	800423c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0208 	bic.w	r2, r2, #8
 800421c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2208      	movs	r2, #8
 8004224:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f818 	bl	800426c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800423c:	bf00      	nop
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004280:	b5b0      	push	{r4, r5, r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_LTDC_ConfigLayer+0x1a>
 8004296:	2302      	movs	r3, #2
 8004298:	e02c      	b.n	80042f4 <HAL_LTDC_ConfigLayer+0x74>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2202      	movs	r2, #2
 80042a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2134      	movs	r1, #52	; 0x34
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4614      	mov	r4, r2
 80042be:	461d      	mov	r5, r3
 80042c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042cc:	682b      	ldr	r3, [r5, #0]
 80042ce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f811 	bl	80042fc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2201      	movs	r2, #1
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bdb0      	pop	{r4, r5, r7, pc}

080042fc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b089      	sub	sp, #36	; 0x24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	0c1b      	lsrs	r3, r3, #16
 8004314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004318:	4413      	add	r3, r2
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	01db      	lsls	r3, r3, #7
 8004328:	4413      	add	r3, r2
 800432a:	3384      	adds	r3, #132	; 0x84
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	4611      	mov	r1, r2
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	01d2      	lsls	r2, r2, #7
 8004338:	440a      	add	r2, r1
 800433a:	3284      	adds	r2, #132	; 0x84
 800433c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004340:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	0c1b      	lsrs	r3, r3, #16
 800434e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004352:	4413      	add	r3, r2
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4619      	mov	r1, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	01db      	lsls	r3, r3, #7
 8004360:	440b      	add	r3, r1
 8004362:	3384      	adds	r3, #132	; 0x84
 8004364:	4619      	mov	r1, r3
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800437a:	4413      	add	r3, r2
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	01db      	lsls	r3, r3, #7
 800438a:	4413      	add	r3, r2
 800438c:	3384      	adds	r3, #132	; 0x84
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	4611      	mov	r1, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	01d2      	lsls	r2, r2, #7
 800439a:	440a      	add	r2, r1
 800439c:	3284      	adds	r2, #132	; 0x84
 800439e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80043a2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043b2:	4413      	add	r3, r2
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4619      	mov	r1, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	01db      	lsls	r3, r3, #7
 80043c0:	440b      	add	r3, r1
 80043c2:	3384      	adds	r3, #132	; 0x84
 80043c4:	4619      	mov	r1, r3
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	01db      	lsls	r3, r3, #7
 80043d6:	4413      	add	r3, r2
 80043d8:	3384      	adds	r3, #132	; 0x84
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	6812      	ldr	r2, [r2, #0]
 80043e0:	4611      	mov	r1, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	01d2      	lsls	r2, r2, #7
 80043e6:	440a      	add	r2, r1
 80043e8:	3284      	adds	r2, #132	; 0x84
 80043ea:	f023 0307 	bic.w	r3, r3, #7
 80043ee:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	01db      	lsls	r3, r3, #7
 80043fa:	4413      	add	r3, r2
 80043fc:	3384      	adds	r3, #132	; 0x84
 80043fe:	461a      	mov	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004416:	041b      	lsls	r3, r3, #16
 8004418:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	061b      	lsls	r3, r3, #24
 8004420:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	01db      	lsls	r3, r3, #7
 800442c:	4413      	add	r3, r2
 800442e:	3384      	adds	r3, #132	; 0x84
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	01db      	lsls	r3, r3, #7
 800443c:	4413      	add	r3, r2
 800443e:	3384      	adds	r3, #132	; 0x84
 8004440:	461a      	mov	r2, r3
 8004442:	2300      	movs	r3, #0
 8004444:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800444c:	461a      	mov	r2, r3
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	431a      	orrs	r2, r3
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	431a      	orrs	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4619      	mov	r1, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	01db      	lsls	r3, r3, #7
 8004460:	440b      	add	r3, r1
 8004462:	3384      	adds	r3, #132	; 0x84
 8004464:	4619      	mov	r1, r3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	01db      	lsls	r3, r3, #7
 8004476:	4413      	add	r3, r2
 8004478:	3384      	adds	r3, #132	; 0x84
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	4611      	mov	r1, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	01d2      	lsls	r2, r2, #7
 8004486:	440a      	add	r2, r1
 8004488:	3284      	adds	r2, #132	; 0x84
 800448a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800448e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	01db      	lsls	r3, r3, #7
 800449a:	4413      	add	r3, r2
 800449c:	3384      	adds	r3, #132	; 0x84
 800449e:	461a      	mov	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	01db      	lsls	r3, r3, #7
 80044b0:	4413      	add	r3, r2
 80044b2:	3384      	adds	r3, #132	; 0x84
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	4611      	mov	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	01d2      	lsls	r2, r2, #7
 80044c0:	440a      	add	r2, r1
 80044c2:	3284      	adds	r2, #132	; 0x84
 80044c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044c8:	f023 0307 	bic.w	r3, r3, #7
 80044cc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	69da      	ldr	r2, [r3, #28]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	6809      	ldr	r1, [r1, #0]
 80044da:	4608      	mov	r0, r1
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	01c9      	lsls	r1, r1, #7
 80044e0:	4401      	add	r1, r0
 80044e2:	3184      	adds	r1, #132	; 0x84
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	01db      	lsls	r3, r3, #7
 80044f2:	4413      	add	r3, r2
 80044f4:	3384      	adds	r3, #132	; 0x84
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	01db      	lsls	r3, r3, #7
 8004502:	4413      	add	r3, r2
 8004504:	3384      	adds	r3, #132	; 0x84
 8004506:	461a      	mov	r2, r3
 8004508:	2300      	movs	r3, #0
 800450a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	01db      	lsls	r3, r3, #7
 8004516:	4413      	add	r3, r2
 8004518:	3384      	adds	r3, #132	; 0x84
 800451a:	461a      	mov	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d102      	bne.n	8004530 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800452a:	2304      	movs	r3, #4
 800452c:	61fb      	str	r3, [r7, #28]
 800452e:	e01b      	b.n	8004568 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d102      	bne.n	800453e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004538:	2303      	movs	r3, #3
 800453a:	61fb      	str	r3, [r7, #28]
 800453c:	e014      	b.n	8004568 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b04      	cmp	r3, #4
 8004544:	d00b      	beq.n	800455e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800454a:	2b02      	cmp	r3, #2
 800454c:	d007      	beq.n	800455e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004552:	2b03      	cmp	r3, #3
 8004554:	d003      	beq.n	800455e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800455a:	2b07      	cmp	r3, #7
 800455c:	d102      	bne.n	8004564 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800455e:	2302      	movs	r3, #2
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	e001      	b.n	8004568 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004564:	2301      	movs	r3, #1
 8004566:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	01db      	lsls	r3, r3, #7
 8004572:	4413      	add	r3, r2
 8004574:	3384      	adds	r3, #132	; 0x84
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	4611      	mov	r1, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	01d2      	lsls	r2, r2, #7
 8004582:	440a      	add	r2, r1
 8004584:	3284      	adds	r2, #132	; 0x84
 8004586:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800458a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	69fa      	ldr	r2, [r7, #28]
 8004592:	fb02 f303 	mul.w	r3, r2, r3
 8004596:	041a      	lsls	r2, r3, #16
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	6859      	ldr	r1, [r3, #4]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	1acb      	subs	r3, r1, r3
 80045a2:	69f9      	ldr	r1, [r7, #28]
 80045a4:	fb01 f303 	mul.w	r3, r1, r3
 80045a8:	3303      	adds	r3, #3
 80045aa:	68f9      	ldr	r1, [r7, #12]
 80045ac:	6809      	ldr	r1, [r1, #0]
 80045ae:	4608      	mov	r0, r1
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	01c9      	lsls	r1, r1, #7
 80045b4:	4401      	add	r1, r0
 80045b6:	3184      	adds	r1, #132	; 0x84
 80045b8:	4313      	orrs	r3, r2
 80045ba:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	01db      	lsls	r3, r3, #7
 80045c6:	4413      	add	r3, r2
 80045c8:	3384      	adds	r3, #132	; 0x84
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	4611      	mov	r1, r2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	01d2      	lsls	r2, r2, #7
 80045d6:	440a      	add	r2, r1
 80045d8:	3284      	adds	r2, #132	; 0x84
 80045da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80045de:	f023 0307 	bic.w	r3, r3, #7
 80045e2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	01db      	lsls	r3, r3, #7
 80045ee:	4413      	add	r3, r2
 80045f0:	3384      	adds	r3, #132	; 0x84
 80045f2:	461a      	mov	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	01db      	lsls	r3, r3, #7
 8004604:	4413      	add	r3, r2
 8004606:	3384      	adds	r3, #132	; 0x84
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	4611      	mov	r1, r2
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	01d2      	lsls	r2, r2, #7
 8004614:	440a      	add	r2, r1
 8004616:	3284      	adds	r2, #132	; 0x84
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	6013      	str	r3, [r2, #0]
}
 800461e:	bf00      	nop
 8004620:	3724      	adds	r7, #36	; 0x24
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e264      	b.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d075      	beq.n	8004736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800464a:	4ba3      	ldr	r3, [pc, #652]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b04      	cmp	r3, #4
 8004654:	d00c      	beq.n	8004670 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004656:	4ba0      	ldr	r3, [pc, #640]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800465e:	2b08      	cmp	r3, #8
 8004660:	d112      	bne.n	8004688 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004662:	4b9d      	ldr	r3, [pc, #628]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800466e:	d10b      	bne.n	8004688 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004670:	4b99      	ldr	r3, [pc, #612]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d05b      	beq.n	8004734 <HAL_RCC_OscConfig+0x108>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d157      	bne.n	8004734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e23f      	b.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004690:	d106      	bne.n	80046a0 <HAL_RCC_OscConfig+0x74>
 8004692:	4b91      	ldr	r3, [pc, #580]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a90      	ldr	r2, [pc, #576]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	e01d      	b.n	80046dc <HAL_RCC_OscConfig+0xb0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x98>
 80046aa:	4b8b      	ldr	r3, [pc, #556]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a8a      	ldr	r2, [pc, #552]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80046b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	4b88      	ldr	r3, [pc, #544]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a87      	ldr	r2, [pc, #540]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e00b      	b.n	80046dc <HAL_RCC_OscConfig+0xb0>
 80046c4:	4b84      	ldr	r3, [pc, #528]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a83      	ldr	r2, [pc, #524]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80046ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b81      	ldr	r3, [pc, #516]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a80      	ldr	r2, [pc, #512]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80046d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d013      	beq.n	800470c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fd f9cc 	bl	8001a80 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046ec:	f7fd f9c8 	bl	8001a80 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	; 0x64
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e204      	b.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fe:	4b76      	ldr	r3, [pc, #472]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0xc0>
 800470a:	e014      	b.n	8004736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470c:	f7fd f9b8 	bl	8001a80 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004714:	f7fd f9b4 	bl	8001a80 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b64      	cmp	r3, #100	; 0x64
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e1f0      	b.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004726:	4b6c      	ldr	r3, [pc, #432]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0xe8>
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d063      	beq.n	800480a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004742:	4b65      	ldr	r3, [pc, #404]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800474e:	4b62      	ldr	r3, [pc, #392]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004756:	2b08      	cmp	r3, #8
 8004758:	d11c      	bne.n	8004794 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800475a:	4b5f      	ldr	r3, [pc, #380]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d116      	bne.n	8004794 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004766:	4b5c      	ldr	r3, [pc, #368]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_RCC_OscConfig+0x152>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d001      	beq.n	800477e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e1c4      	b.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477e:	4b56      	ldr	r3, [pc, #344]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4952      	ldr	r1, [pc, #328]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 800478e:	4313      	orrs	r3, r2
 8004790:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004792:	e03a      	b.n	800480a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d020      	beq.n	80047de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800479c:	4b4f      	ldr	r3, [pc, #316]	; (80048dc <HAL_RCC_OscConfig+0x2b0>)
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a2:	f7fd f96d 	bl	8001a80 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047aa:	f7fd f969 	bl	8001a80 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e1a5      	b.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047bc:	4b46      	ldr	r3, [pc, #280]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c8:	4b43      	ldr	r3, [pc, #268]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	4940      	ldr	r1, [pc, #256]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	600b      	str	r3, [r1, #0]
 80047dc:	e015      	b.n	800480a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047de:	4b3f      	ldr	r3, [pc, #252]	; (80048dc <HAL_RCC_OscConfig+0x2b0>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fd f94c 	bl	8001a80 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ec:	f7fd f948 	bl	8001a80 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e184      	b.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fe:	4b36      	ldr	r3, [pc, #216]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d030      	beq.n	8004878 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d016      	beq.n	800484c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800481e:	4b30      	ldr	r3, [pc, #192]	; (80048e0 <HAL_RCC_OscConfig+0x2b4>)
 8004820:	2201      	movs	r2, #1
 8004822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004824:	f7fd f92c 	bl	8001a80 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800482c:	f7fd f928 	bl	8001a80 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e164      	b.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483e:	4b26      	ldr	r3, [pc, #152]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 8004840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x200>
 800484a:	e015      	b.n	8004878 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800484c:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <HAL_RCC_OscConfig+0x2b4>)
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004852:	f7fd f915 	bl	8001a80 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800485a:	f7fd f911 	bl	8001a80 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e14d      	b.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800486c:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 800486e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1f0      	bne.n	800485a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80a0 	beq.w	80049c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004886:	2300      	movs	r3, #0
 8004888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800488a:	4b13      	ldr	r3, [pc, #76]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10f      	bne.n	80048b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004896:	2300      	movs	r3, #0
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	4a0e      	ldr	r2, [pc, #56]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80048a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a4:	6413      	str	r3, [r2, #64]	; 0x40
 80048a6:	4b0c      	ldr	r3, [pc, #48]	; (80048d8 <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b2:	2301      	movs	r3, #1
 80048b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b6:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <HAL_RCC_OscConfig+0x2b8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d121      	bne.n	8004906 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048c2:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <HAL_RCC_OscConfig+0x2b8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a07      	ldr	r2, [pc, #28]	; (80048e4 <HAL_RCC_OscConfig+0x2b8>)
 80048c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ce:	f7fd f8d7 	bl	8001a80 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d4:	e011      	b.n	80048fa <HAL_RCC_OscConfig+0x2ce>
 80048d6:	bf00      	nop
 80048d8:	40023800 	.word	0x40023800
 80048dc:	42470000 	.word	0x42470000
 80048e0:	42470e80 	.word	0x42470e80
 80048e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e8:	f7fd f8ca 	bl	8001a80 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e106      	b.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fa:	4b85      	ldr	r3, [pc, #532]	; (8004b10 <HAL_RCC_OscConfig+0x4e4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f0      	beq.n	80048e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d106      	bne.n	800491c <HAL_RCC_OscConfig+0x2f0>
 800490e:	4b81      	ldr	r3, [pc, #516]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004912:	4a80      	ldr	r2, [pc, #512]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	6713      	str	r3, [r2, #112]	; 0x70
 800491a:	e01c      	b.n	8004956 <HAL_RCC_OscConfig+0x32a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2b05      	cmp	r3, #5
 8004922:	d10c      	bne.n	800493e <HAL_RCC_OscConfig+0x312>
 8004924:	4b7b      	ldr	r3, [pc, #492]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 8004926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004928:	4a7a      	ldr	r2, [pc, #488]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 800492a:	f043 0304 	orr.w	r3, r3, #4
 800492e:	6713      	str	r3, [r2, #112]	; 0x70
 8004930:	4b78      	ldr	r3, [pc, #480]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 8004932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004934:	4a77      	ldr	r2, [pc, #476]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 8004936:	f043 0301 	orr.w	r3, r3, #1
 800493a:	6713      	str	r3, [r2, #112]	; 0x70
 800493c:	e00b      	b.n	8004956 <HAL_RCC_OscConfig+0x32a>
 800493e:	4b75      	ldr	r3, [pc, #468]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004942:	4a74      	ldr	r2, [pc, #464]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 8004944:	f023 0301 	bic.w	r3, r3, #1
 8004948:	6713      	str	r3, [r2, #112]	; 0x70
 800494a:	4b72      	ldr	r3, [pc, #456]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 800494c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494e:	4a71      	ldr	r2, [pc, #452]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 8004950:	f023 0304 	bic.w	r3, r3, #4
 8004954:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d015      	beq.n	800498a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495e:	f7fd f88f 	bl	8001a80 <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004964:	e00a      	b.n	800497c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004966:	f7fd f88b 	bl	8001a80 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	f241 3288 	movw	r2, #5000	; 0x1388
 8004974:	4293      	cmp	r3, r2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e0c5      	b.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497c:	4b65      	ldr	r3, [pc, #404]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 800497e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0ee      	beq.n	8004966 <HAL_RCC_OscConfig+0x33a>
 8004988:	e014      	b.n	80049b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800498a:	f7fd f879 	bl	8001a80 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004990:	e00a      	b.n	80049a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004992:	f7fd f875 	bl	8001a80 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e0af      	b.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a8:	4b5a      	ldr	r3, [pc, #360]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1ee      	bne.n	8004992 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d105      	bne.n	80049c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ba:	4b56      	ldr	r3, [pc, #344]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	4a55      	ldr	r2, [pc, #340]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 80049c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 809b 	beq.w	8004b06 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049d0:	4b50      	ldr	r3, [pc, #320]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 030c 	and.w	r3, r3, #12
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d05c      	beq.n	8004a96 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d141      	bne.n	8004a68 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e4:	4b4c      	ldr	r3, [pc, #304]	; (8004b18 <HAL_RCC_OscConfig+0x4ec>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ea:	f7fd f849 	bl	8001a80 <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f2:	f7fd f845 	bl	8001a80 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e081      	b.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a04:	4b43      	ldr	r3, [pc, #268]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f0      	bne.n	80049f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	019b      	lsls	r3, r3, #6
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	085b      	lsrs	r3, r3, #1
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	041b      	lsls	r3, r3, #16
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a32:	061b      	lsls	r3, r3, #24
 8004a34:	4937      	ldr	r1, [pc, #220]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a3a:	4b37      	ldr	r3, [pc, #220]	; (8004b18 <HAL_RCC_OscConfig+0x4ec>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a40:	f7fd f81e 	bl	8001a80 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a48:	f7fd f81a 	bl	8001a80 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e056      	b.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a5a:	4b2e      	ldr	r3, [pc, #184]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f0      	beq.n	8004a48 <HAL_RCC_OscConfig+0x41c>
 8004a66:	e04e      	b.n	8004b06 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a68:	4b2b      	ldr	r3, [pc, #172]	; (8004b18 <HAL_RCC_OscConfig+0x4ec>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6e:	f7fd f807 	bl	8001a80 <HAL_GetTick>
 8004a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a76:	f7fd f803 	bl	8001a80 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e03f      	b.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a88:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1f0      	bne.n	8004a76 <HAL_RCC_OscConfig+0x44a>
 8004a94:	e037      	b.n	8004b06 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e032      	b.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aa2:	4b1c      	ldr	r3, [pc, #112]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d028      	beq.n	8004b02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d121      	bne.n	8004b02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d11a      	bne.n	8004b02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ad8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d111      	bne.n	8004b02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	085b      	lsrs	r3, r3, #1
 8004aea:	3b01      	subs	r3, #1
 8004aec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d001      	beq.n	8004b06 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40007000 	.word	0x40007000
 8004b14:	40023800 	.word	0x40023800
 8004b18:	42470060 	.word	0x42470060

08004b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0cc      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b30:	4b68      	ldr	r3, [pc, #416]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d90c      	bls.n	8004b58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3e:	4b65      	ldr	r3, [pc, #404]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	4b63      	ldr	r3, [pc, #396]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0b8      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d020      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d005      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b70:	4b59      	ldr	r3, [pc, #356]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4a58      	ldr	r2, [pc, #352]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b88:	4b53      	ldr	r3, [pc, #332]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	4a52      	ldr	r2, [pc, #328]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b94:	4b50      	ldr	r3, [pc, #320]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	494d      	ldr	r1, [pc, #308]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d044      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d107      	bne.n	8004bca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bba:	4b47      	ldr	r3, [pc, #284]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d119      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e07f      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d003      	beq.n	8004bda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bda:	4b3f      	ldr	r3, [pc, #252]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e06f      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bea:	4b3b      	ldr	r3, [pc, #236]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e067      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bfa:	4b37      	ldr	r3, [pc, #220]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f023 0203 	bic.w	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4934      	ldr	r1, [pc, #208]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c0c:	f7fc ff38 	bl	8001a80 <HAL_GetTick>
 8004c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c14:	f7fc ff34 	bl	8001a80 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e04f      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2a:	4b2b      	ldr	r3, [pc, #172]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 020c 	and.w	r2, r3, #12
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d1eb      	bne.n	8004c14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d20c      	bcs.n	8004c64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b22      	ldr	r3, [pc, #136]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c52:	4b20      	ldr	r3, [pc, #128]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e032      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c70:	4b19      	ldr	r3, [pc, #100]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4916      	ldr	r1, [pc, #88]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c8e:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	490e      	ldr	r1, [pc, #56]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ca2:	f000 f821 	bl	8004ce8 <HAL_RCC_GetSysClockFreq>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	091b      	lsrs	r3, r3, #4
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	490a      	ldr	r1, [pc, #40]	; (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004cb4:	5ccb      	ldrb	r3, [r1, r3]
 8004cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cba:	4a09      	ldr	r2, [pc, #36]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cbe:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fc fb36 	bl	8001334 <HAL_InitTick>

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40023c00 	.word	0x40023c00
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	080072d8 	.word	0x080072d8
 8004ce0:	20000000 	.word	0x20000000
 8004ce4:	20000004 	.word	0x20000004

08004ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	607b      	str	r3, [r7, #4]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d00:	4b67      	ldr	r3, [pc, #412]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 030c 	and.w	r3, r3, #12
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d00d      	beq.n	8004d28 <HAL_RCC_GetSysClockFreq+0x40>
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	f200 80bd 	bhi.w	8004e8c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_RCC_GetSysClockFreq+0x34>
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d003      	beq.n	8004d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d1a:	e0b7      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d1c:	4b61      	ldr	r3, [pc, #388]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d1e:	60bb      	str	r3, [r7, #8]
       break;
 8004d20:	e0b7      	b.n	8004e92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d22:	4b61      	ldr	r3, [pc, #388]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004d24:	60bb      	str	r3, [r7, #8]
      break;
 8004d26:	e0b4      	b.n	8004e92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d28:	4b5d      	ldr	r3, [pc, #372]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d32:	4b5b      	ldr	r3, [pc, #364]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d04d      	beq.n	8004dda <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d3e:	4b58      	ldr	r3, [pc, #352]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	099b      	lsrs	r3, r3, #6
 8004d44:	461a      	mov	r2, r3
 8004d46:	f04f 0300 	mov.w	r3, #0
 8004d4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d4e:	f04f 0100 	mov.w	r1, #0
 8004d52:	ea02 0800 	and.w	r8, r2, r0
 8004d56:	ea03 0901 	and.w	r9, r3, r1
 8004d5a:	4640      	mov	r0, r8
 8004d5c:	4649      	mov	r1, r9
 8004d5e:	f04f 0200 	mov.w	r2, #0
 8004d62:	f04f 0300 	mov.w	r3, #0
 8004d66:	014b      	lsls	r3, r1, #5
 8004d68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d6c:	0142      	lsls	r2, r0, #5
 8004d6e:	4610      	mov	r0, r2
 8004d70:	4619      	mov	r1, r3
 8004d72:	ebb0 0008 	subs.w	r0, r0, r8
 8004d76:	eb61 0109 	sbc.w	r1, r1, r9
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	018b      	lsls	r3, r1, #6
 8004d84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d88:	0182      	lsls	r2, r0, #6
 8004d8a:	1a12      	subs	r2, r2, r0
 8004d8c:	eb63 0301 	sbc.w	r3, r3, r1
 8004d90:	f04f 0000 	mov.w	r0, #0
 8004d94:	f04f 0100 	mov.w	r1, #0
 8004d98:	00d9      	lsls	r1, r3, #3
 8004d9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d9e:	00d0      	lsls	r0, r2, #3
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	eb12 0208 	adds.w	r2, r2, r8
 8004da8:	eb43 0309 	adc.w	r3, r3, r9
 8004dac:	f04f 0000 	mov.w	r0, #0
 8004db0:	f04f 0100 	mov.w	r1, #0
 8004db4:	0259      	lsls	r1, r3, #9
 8004db6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004dba:	0250      	lsls	r0, r2, #9
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	f7fb fa0e 	bl	80001ec <__aeabi_uldivmod>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	e04a      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dda:	4b31      	ldr	r3, [pc, #196]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	099b      	lsrs	r3, r3, #6
 8004de0:	461a      	mov	r2, r3
 8004de2:	f04f 0300 	mov.w	r3, #0
 8004de6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004dea:	f04f 0100 	mov.w	r1, #0
 8004dee:	ea02 0400 	and.w	r4, r2, r0
 8004df2:	ea03 0501 	and.w	r5, r3, r1
 8004df6:	4620      	mov	r0, r4
 8004df8:	4629      	mov	r1, r5
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	014b      	lsls	r3, r1, #5
 8004e04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e08:	0142      	lsls	r2, r0, #5
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	1b00      	subs	r0, r0, r4
 8004e10:	eb61 0105 	sbc.w	r1, r1, r5
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	018b      	lsls	r3, r1, #6
 8004e1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e22:	0182      	lsls	r2, r0, #6
 8004e24:	1a12      	subs	r2, r2, r0
 8004e26:	eb63 0301 	sbc.w	r3, r3, r1
 8004e2a:	f04f 0000 	mov.w	r0, #0
 8004e2e:	f04f 0100 	mov.w	r1, #0
 8004e32:	00d9      	lsls	r1, r3, #3
 8004e34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e38:	00d0      	lsls	r0, r2, #3
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	1912      	adds	r2, r2, r4
 8004e40:	eb45 0303 	adc.w	r3, r5, r3
 8004e44:	f04f 0000 	mov.w	r0, #0
 8004e48:	f04f 0100 	mov.w	r1, #0
 8004e4c:	0299      	lsls	r1, r3, #10
 8004e4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e52:	0290      	lsls	r0, r2, #10
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4610      	mov	r0, r2
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	f7fb f9c2 	bl	80001ec <__aeabi_uldivmod>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	0c1b      	lsrs	r3, r3, #16
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	60bb      	str	r3, [r7, #8]
      break;
 8004e8a:	e002      	b.n	8004e92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e8c:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e8e:	60bb      	str	r3, [r7, #8]
      break;
 8004e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e92:	68bb      	ldr	r3, [r7, #8]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	00f42400 	.word	0x00f42400
 8004ea8:	007a1200 	.word	0x007a1200

08004eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb0:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	20000000 	.word	0x20000000

08004ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ec8:	f7ff fff0 	bl	8004eac <HAL_RCC_GetHCLKFreq>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	0a9b      	lsrs	r3, r3, #10
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	4903      	ldr	r1, [pc, #12]	; (8004ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eda:	5ccb      	ldrb	r3, [r1, r3]
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	080072e8 	.word	0x080072e8

08004eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ef0:	f7ff ffdc 	bl	8004eac <HAL_RCC_GetHCLKFreq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	0b5b      	lsrs	r3, r3, #13
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	4903      	ldr	r1, [pc, #12]	; (8004f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f02:	5ccb      	ldrb	r3, [r1, r3]
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	080072e8 	.word	0x080072e8

08004f14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	220f      	movs	r2, #15
 8004f22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f24:	4b12      	ldr	r3, [pc, #72]	; (8004f70 <HAL_RCC_GetClockConfig+0x5c>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 0203 	and.w	r2, r3, #3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f30:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <HAL_RCC_GetClockConfig+0x5c>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <HAL_RCC_GetClockConfig+0x5c>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f48:	4b09      	ldr	r3, [pc, #36]	; (8004f70 <HAL_RCC_GetClockConfig+0x5c>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	08db      	lsrs	r3, r3, #3
 8004f4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f56:	4b07      	ldr	r3, [pc, #28]	; (8004f74 <HAL_RCC_GetClockConfig+0x60>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 020f 	and.w	r2, r3, #15
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	601a      	str	r2, [r3, #0]
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40023800 	.word	0x40023800
 8004f74:	40023c00 	.word	0x40023c00

08004f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10b      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d105      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d075      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fac:	4bad      	ldr	r3, [pc, #692]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fb2:	f7fc fd65 	bl	8001a80 <HAL_GetTick>
 8004fb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fba:	f7fc fd61 	bl	8001a80 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e18b      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fcc:	4ba6      	ldr	r3, [pc, #664]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1f0      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d009      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	019a      	lsls	r2, r3, #6
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	071b      	lsls	r3, r3, #28
 8004ff0:	499d      	ldr	r1, [pc, #628]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01f      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005004:	4b98      	ldr	r3, [pc, #608]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500a:	0f1b      	lsrs	r3, r3, #28
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	019a      	lsls	r2, r3, #6
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	061b      	lsls	r3, r3, #24
 800501e:	431a      	orrs	r2, r3
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	071b      	lsls	r3, r3, #28
 8005024:	4990      	ldr	r1, [pc, #576]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800502c:	4b8e      	ldr	r3, [pc, #568]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800502e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005032:	f023 021f 	bic.w	r2, r3, #31
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	3b01      	subs	r3, #1
 800503c:	498a      	ldr	r1, [pc, #552]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00d      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	019a      	lsls	r2, r3, #6
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	061b      	lsls	r3, r3, #24
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	071b      	lsls	r3, r3, #28
 8005064:	4980      	ldr	r1, [pc, #512]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800506c:	4b7d      	ldr	r3, [pc, #500]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800506e:	2201      	movs	r2, #1
 8005070:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005072:	f7fc fd05 	bl	8001a80 <HAL_GetTick>
 8005076:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005078:	e008      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800507a:	f7fc fd01 	bl	8001a80 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e12b      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800508c:	4b76      	ldr	r3, [pc, #472]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0f0      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d105      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d079      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050b0:	4b6e      	ldr	r3, [pc, #440]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050b6:	f7fc fce3 	bl	8001a80 <HAL_GetTick>
 80050ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050bc:	e008      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80050be:	f7fc fcdf 	bl	8001a80 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e109      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050d0:	4b65      	ldr	r3, [pc, #404]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050dc:	d0ef      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d020      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050ea:	4b5f      	ldr	r3, [pc, #380]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f0:	0f1b      	lsrs	r3, r3, #28
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	019a      	lsls	r2, r3, #6
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	061b      	lsls	r3, r3, #24
 8005104:	431a      	orrs	r2, r3
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	071b      	lsls	r3, r3, #28
 800510a:	4957      	ldr	r1, [pc, #348]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005112:	4b55      	ldr	r3, [pc, #340]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005118:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	3b01      	subs	r3, #1
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	4950      	ldr	r1, [pc, #320]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0308 	and.w	r3, r3, #8
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01e      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005138:	4b4b      	ldr	r3, [pc, #300]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800513a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513e:	0e1b      	lsrs	r3, r3, #24
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	019a      	lsls	r2, r3, #6
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	061b      	lsls	r3, r3, #24
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	071b      	lsls	r3, r3, #28
 8005158:	4943      	ldr	r1, [pc, #268]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005160:	4b41      	ldr	r3, [pc, #260]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005166:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	493e      	ldr	r1, [pc, #248]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005176:	4b3d      	ldr	r3, [pc, #244]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005178:	2201      	movs	r2, #1
 800517a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800517c:	f7fc fc80 	bl	8001a80 <HAL_GetTick>
 8005180:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005184:	f7fc fc7c 	bl	8001a80 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e0a6      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005196:	4b34      	ldr	r3, [pc, #208]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800519e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051a2:	d1ef      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 808d 	beq.w	80052cc <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	4b2c      	ldr	r3, [pc, #176]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	4a2b      	ldr	r2, [pc, #172]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c0:	6413      	str	r3, [r2, #64]	; 0x40
 80051c2:	4b29      	ldr	r3, [pc, #164]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051ce:	4b28      	ldr	r3, [pc, #160]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a27      	ldr	r2, [pc, #156]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80051d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051da:	f7fc fc51 	bl	8001a80 <HAL_GetTick>
 80051de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051e0:	e008      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051e2:	f7fc fc4d 	bl	8001a80 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e077      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051f4:	4b1e      	ldr	r3, [pc, #120]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005200:	4b19      	ldr	r3, [pc, #100]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005208:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d039      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	429a      	cmp	r2, r3
 800521c:	d032      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800521e:	4b12      	ldr	r3, [pc, #72]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005226:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005228:	4b12      	ldr	r3, [pc, #72]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800522e:	4b11      	ldr	r3, [pc, #68]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005234:	4a0c      	ldr	r2, [pc, #48]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800523a:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b01      	cmp	r3, #1
 8005244:	d11e      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005246:	f7fc fc1b 	bl	8001a80 <HAL_GetTick>
 800524a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800524c:	e014      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800524e:	f7fc fc17 	bl	8001a80 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	f241 3288 	movw	r2, #5000	; 0x1388
 800525c:	4293      	cmp	r3, r2
 800525e:	d90b      	bls.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e03f      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005264:	42470068 	.word	0x42470068
 8005268:	40023800 	.word	0x40023800
 800526c:	42470070 	.word	0x42470070
 8005270:	40007000 	.word	0x40007000
 8005274:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005278:	4b1c      	ldr	r3, [pc, #112]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800527a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0e4      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800528c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005290:	d10d      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005292:	4b16      	ldr	r3, [pc, #88]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80052a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a6:	4911      	ldr	r1, [pc, #68]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	608b      	str	r3, [r1, #8]
 80052ac:	e005      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x342>
 80052ae:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	4a0e      	ldr	r2, [pc, #56]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052b8:	6093      	str	r3, [r2, #8]
 80052ba:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c6:	4909      	ldr	r1, [pc, #36]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d004      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80052de:	4b04      	ldr	r3, [pc, #16]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80052e0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40023800 	.word	0x40023800
 80052f0:	424711e0 	.word	0x424711e0

080052f4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e025      	b.n	8005354 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d106      	bne.n	8005322 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7fb fa53 	bl	80007c8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2202      	movs	r2, #2
 8005326:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3304      	adds	r3, #4
 8005332:	4619      	mov	r1, r3
 8005334:	4610      	mov	r0, r2
 8005336:	f001 fadd 	bl	80068f4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	461a      	mov	r2, r3
 8005344:	6839      	ldr	r1, [r7, #0]
 8005346:	f001 fb48 	bl	80069da <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e07b      	b.n	8005466 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	2b00      	cmp	r3, #0
 8005374:	d108      	bne.n	8005388 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800537e:	d009      	beq.n	8005394 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	61da      	str	r2, [r3, #28]
 8005386:	e005      	b.n	8005394 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d106      	bne.n	80053b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fb ff50 	bl	8001254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005418:	ea42 0103 	orr.w	r1, r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	0c1b      	lsrs	r3, r3, #16
 8005432:	f003 0104 	and.w	r1, r3, #4
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	f003 0210 	and.w	r2, r3, #16
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005454:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b082      	sub	sp, #8
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e041      	b.n	8005504 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d106      	bne.n	800549a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7fc f8ab 	bl	80015f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3304      	adds	r3, #4
 80054aa:	4619      	mov	r1, r3
 80054ac:	4610      	mov	r0, r2
 80054ae:	f000 fa91 	bl	80059d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	d001      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e04e      	b.n	80055c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0201 	orr.w	r2, r2, #1
 800553a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a23      	ldr	r2, [pc, #140]	; (80055d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d022      	beq.n	800558c <HAL_TIM_Base_Start_IT+0x80>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554e:	d01d      	beq.n	800558c <HAL_TIM_Base_Start_IT+0x80>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1f      	ldr	r2, [pc, #124]	; (80055d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d018      	beq.n	800558c <HAL_TIM_Base_Start_IT+0x80>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a1e      	ldr	r2, [pc, #120]	; (80055d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d013      	beq.n	800558c <HAL_TIM_Base_Start_IT+0x80>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1c      	ldr	r2, [pc, #112]	; (80055dc <HAL_TIM_Base_Start_IT+0xd0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00e      	beq.n	800558c <HAL_TIM_Base_Start_IT+0x80>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1b      	ldr	r2, [pc, #108]	; (80055e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d009      	beq.n	800558c <HAL_TIM_Base_Start_IT+0x80>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a19      	ldr	r2, [pc, #100]	; (80055e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d004      	beq.n	800558c <HAL_TIM_Base_Start_IT+0x80>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a18      	ldr	r2, [pc, #96]	; (80055e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d111      	bne.n	80055b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 0307 	and.w	r3, r3, #7
 8005596:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b06      	cmp	r3, #6
 800559c:	d010      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ae:	e007      	b.n	80055c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0201 	orr.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40010000 	.word	0x40010000
 80055d4:	40000400 	.word	0x40000400
 80055d8:	40000800 	.word	0x40000800
 80055dc:	40000c00 	.word	0x40000c00
 80055e0:	40010400 	.word	0x40010400
 80055e4:	40014000 	.word	0x40014000
 80055e8:	40001800 	.word	0x40001800

080055ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d122      	bne.n	8005648 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b02      	cmp	r3, #2
 800560e:	d11b      	bne.n	8005648 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f06f 0202 	mvn.w	r2, #2
 8005618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f9b2 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 8005634:	e005      	b.n	8005642 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f9a4 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f9b5 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b04      	cmp	r3, #4
 8005654:	d122      	bne.n	800569c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b04      	cmp	r3, #4
 8005662:	d11b      	bne.n	800569c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0204 	mvn.w	r2, #4
 800566c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2202      	movs	r2, #2
 8005672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f988 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 8005688:	e005      	b.n	8005696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f97a 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f98b 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d122      	bne.n	80056f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d11b      	bne.n	80056f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0208 	mvn.w	r2, #8
 80056c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2204      	movs	r2, #4
 80056c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f95e 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 80056dc:	e005      	b.n	80056ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f950 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f961 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f003 0310 	and.w	r3, r3, #16
 80056fa:	2b10      	cmp	r3, #16
 80056fc:	d122      	bne.n	8005744 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	2b10      	cmp	r3, #16
 800570a:	d11b      	bne.n	8005744 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f06f 0210 	mvn.w	r2, #16
 8005714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2208      	movs	r2, #8
 800571a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f934 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 8005730:	e005      	b.n	800573e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f926 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f937 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b01      	cmp	r3, #1
 8005750:	d10e      	bne.n	8005770 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b01      	cmp	r3, #1
 800575e:	d107      	bne.n	8005770 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0201 	mvn.w	r2, #1
 8005768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fb fcc4 	bl	80010f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577a:	2b80      	cmp	r3, #128	; 0x80
 800577c:	d10e      	bne.n	800579c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005788:	2b80      	cmp	r3, #128	; 0x80
 800578a:	d107      	bne.n	800579c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fadc 	bl	8005d54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a6:	2b40      	cmp	r3, #64	; 0x40
 80057a8:	d10e      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b4:	2b40      	cmp	r3, #64	; 0x40
 80057b6:	d107      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f8fc 	bl	80059c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	d10e      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0320 	and.w	r3, r3, #32
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d107      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0220 	mvn.w	r2, #32
 80057ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 faa6 	bl	8005d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057f4:	bf00      	nop
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_TIM_ConfigClockSource+0x18>
 8005810:	2302      	movs	r3, #2
 8005812:	e0b3      	b.n	800597c <HAL_TIM_ConfigClockSource+0x180>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005832:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800583a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800584c:	d03e      	beq.n	80058cc <HAL_TIM_ConfigClockSource+0xd0>
 800584e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005852:	f200 8087 	bhi.w	8005964 <HAL_TIM_ConfigClockSource+0x168>
 8005856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800585a:	f000 8085 	beq.w	8005968 <HAL_TIM_ConfigClockSource+0x16c>
 800585e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005862:	d87f      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x168>
 8005864:	2b70      	cmp	r3, #112	; 0x70
 8005866:	d01a      	beq.n	800589e <HAL_TIM_ConfigClockSource+0xa2>
 8005868:	2b70      	cmp	r3, #112	; 0x70
 800586a:	d87b      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x168>
 800586c:	2b60      	cmp	r3, #96	; 0x60
 800586e:	d050      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x116>
 8005870:	2b60      	cmp	r3, #96	; 0x60
 8005872:	d877      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x168>
 8005874:	2b50      	cmp	r3, #80	; 0x50
 8005876:	d03c      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0xf6>
 8005878:	2b50      	cmp	r3, #80	; 0x50
 800587a:	d873      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x168>
 800587c:	2b40      	cmp	r3, #64	; 0x40
 800587e:	d058      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x136>
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d86f      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x168>
 8005884:	2b30      	cmp	r3, #48	; 0x30
 8005886:	d064      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x156>
 8005888:	2b30      	cmp	r3, #48	; 0x30
 800588a:	d86b      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x168>
 800588c:	2b20      	cmp	r3, #32
 800588e:	d060      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x156>
 8005890:	2b20      	cmp	r3, #32
 8005892:	d867      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x168>
 8005894:	2b00      	cmp	r3, #0
 8005896:	d05c      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x156>
 8005898:	2b10      	cmp	r3, #16
 800589a:	d05a      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800589c:	e062      	b.n	8005964 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6899      	ldr	r1, [r3, #8]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f000 f9ab 	bl	8005c08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	609a      	str	r2, [r3, #8]
      break;
 80058ca:	e04e      	b.n	800596a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	6899      	ldr	r1, [r3, #8]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f000 f994 	bl	8005c08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ee:	609a      	str	r2, [r3, #8]
      break;
 80058f0:	e03b      	b.n	800596a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6859      	ldr	r1, [r3, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	461a      	mov	r2, r3
 8005900:	f000 f908 	bl	8005b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2150      	movs	r1, #80	; 0x50
 800590a:	4618      	mov	r0, r3
 800590c:	f000 f961 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 8005910:	e02b      	b.n	800596a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6859      	ldr	r1, [r3, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	461a      	mov	r2, r3
 8005920:	f000 f927 	bl	8005b72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2160      	movs	r1, #96	; 0x60
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f951 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 8005930:	e01b      	b.n	800596a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6818      	ldr	r0, [r3, #0]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6859      	ldr	r1, [r3, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	461a      	mov	r2, r3
 8005940:	f000 f8e8 	bl	8005b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2140      	movs	r1, #64	; 0x40
 800594a:	4618      	mov	r0, r3
 800594c:	f000 f941 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 8005950:	e00b      	b.n	800596a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4619      	mov	r1, r3
 800595c:	4610      	mov	r0, r2
 800595e:	f000 f938 	bl	8005bd2 <TIM_ITRx_SetConfig>
        break;
 8005962:	e002      	b.n	800596a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005964:	bf00      	nop
 8005966:	e000      	b.n	800596a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005968:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a40      	ldr	r2, [pc, #256]	; (8005ae8 <TIM_Base_SetConfig+0x114>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d013      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f2:	d00f      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a3d      	ldr	r2, [pc, #244]	; (8005aec <TIM_Base_SetConfig+0x118>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00b      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a3c      	ldr	r2, [pc, #240]	; (8005af0 <TIM_Base_SetConfig+0x11c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d007      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a3b      	ldr	r2, [pc, #236]	; (8005af4 <TIM_Base_SetConfig+0x120>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a3a      	ldr	r2, [pc, #232]	; (8005af8 <TIM_Base_SetConfig+0x124>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d108      	bne.n	8005a26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a2f      	ldr	r2, [pc, #188]	; (8005ae8 <TIM_Base_SetConfig+0x114>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d02b      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a34:	d027      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a2c      	ldr	r2, [pc, #176]	; (8005aec <TIM_Base_SetConfig+0x118>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d023      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a2b      	ldr	r2, [pc, #172]	; (8005af0 <TIM_Base_SetConfig+0x11c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d01f      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a2a      	ldr	r2, [pc, #168]	; (8005af4 <TIM_Base_SetConfig+0x120>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01b      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a29      	ldr	r2, [pc, #164]	; (8005af8 <TIM_Base_SetConfig+0x124>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d017      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a28      	ldr	r2, [pc, #160]	; (8005afc <TIM_Base_SetConfig+0x128>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a27      	ldr	r2, [pc, #156]	; (8005b00 <TIM_Base_SetConfig+0x12c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00f      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a26      	ldr	r2, [pc, #152]	; (8005b04 <TIM_Base_SetConfig+0x130>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00b      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a25      	ldr	r2, [pc, #148]	; (8005b08 <TIM_Base_SetConfig+0x134>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d007      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a24      	ldr	r2, [pc, #144]	; (8005b0c <TIM_Base_SetConfig+0x138>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d003      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a23      	ldr	r2, [pc, #140]	; (8005b10 <TIM_Base_SetConfig+0x13c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d108      	bne.n	8005a98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a0a      	ldr	r2, [pc, #40]	; (8005ae8 <TIM_Base_SetConfig+0x114>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d003      	beq.n	8005acc <TIM_Base_SetConfig+0xf8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a0c      	ldr	r2, [pc, #48]	; (8005af8 <TIM_Base_SetConfig+0x124>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d103      	bne.n	8005ad4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	615a      	str	r2, [r3, #20]
}
 8005ada:	bf00      	nop
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	40010000 	.word	0x40010000
 8005aec:	40000400 	.word	0x40000400
 8005af0:	40000800 	.word	0x40000800
 8005af4:	40000c00 	.word	0x40000c00
 8005af8:	40010400 	.word	0x40010400
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40014400 	.word	0x40014400
 8005b04:	40014800 	.word	0x40014800
 8005b08:	40001800 	.word	0x40001800
 8005b0c:	40001c00 	.word	0x40001c00
 8005b10:	40002000 	.word	0x40002000

08005b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f023 0201 	bic.w	r2, r3, #1
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f023 030a 	bic.w	r3, r3, #10
 8005b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	621a      	str	r2, [r3, #32]
}
 8005b66:	bf00      	nop
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b087      	sub	sp, #28
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0210 	bic.w	r2, r3, #16
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	031b      	lsls	r3, r3, #12
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	621a      	str	r2, [r3, #32]
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f043 0307 	orr.w	r3, r3, #7
 8005bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	609a      	str	r2, [r3, #8]
}
 8005bfc:	bf00      	nop
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	021a      	lsls	r2, r3, #8
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	609a      	str	r2, [r3, #8]
}
 8005c3c:	bf00      	nop
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e05a      	b.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a21      	ldr	r2, [pc, #132]	; (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d022      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cac:	d01d      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1d      	ldr	r2, [pc, #116]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d018      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1b      	ldr	r2, [pc, #108]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d013      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1a      	ldr	r2, [pc, #104]	; (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00e      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a18      	ldr	r2, [pc, #96]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d009      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a17      	ldr	r2, [pc, #92]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d004      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a15      	ldr	r2, [pc, #84]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d10c      	bne.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40010000 	.word	0x40010000
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40000800 	.word	0x40000800
 8005d30:	40000c00 	.word	0x40000c00
 8005d34:	40010400 	.word	0x40010400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40001800 	.word	0x40001800

08005d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e03f      	b.n	8005dfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d106      	bne.n	8005d94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7fb fcc0 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2224      	movs	r2, #36	; 0x24
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005daa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fbd9 	bl	8006564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	691a      	ldr	r2, [r3, #16]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	695a      	ldr	r2, [r3, #20]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005de0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b085      	sub	sp, #20
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d130      	bne.n	8005e7e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_UART_Transmit_IT+0x26>
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e029      	b.n	8005e80 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <HAL_UART_Transmit_IT+0x38>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e022      	b.n	8005e80 <HAL_UART_Transmit_IT+0x7e>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	88fa      	ldrh	r2, [r7, #6]
 8005e4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	88fa      	ldrh	r2, [r7, #6]
 8005e52:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2221      	movs	r2, #33	; 0x21
 8005e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e78:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e000      	b.n	8005e80 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005e7e:	2302      	movs	r3, #2
  }
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	4613      	mov	r3, r2
 8005e98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d11d      	bne.n	8005ee2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <HAL_UART_Receive_IT+0x26>
 8005eac:	88fb      	ldrh	r3, [r7, #6]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e016      	b.n	8005ee4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_UART_Receive_IT+0x38>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e00f      	b.n	8005ee4 <HAL_UART_Receive_IT+0x58>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005ed2:	88fb      	ldrh	r3, [r7, #6]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	68b9      	ldr	r1, [r7, #8]
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 f9c9 	bl	8006270 <UART_Start_Receive_IT>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	e000      	b.n	8005ee4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ee2:	2302      	movs	r3, #2
  }
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b08a      	sub	sp, #40	; 0x28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10d      	bne.n	8005f3e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d008      	beq.n	8005f3e <HAL_UART_IRQHandler+0x52>
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fa7d 	bl	8006436 <UART_Receive_IT>
      return;
 8005f3c:	e17c      	b.n	8006238 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 80b1 	beq.w	80060a8 <HAL_UART_IRQHandler+0x1bc>
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d105      	bne.n	8005f5c <HAL_UART_IRQHandler+0x70>
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 80a6 	beq.w	80060a8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <HAL_UART_IRQHandler+0x90>
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f74:	f043 0201 	orr.w	r2, r3, #1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <HAL_UART_IRQHandler+0xb0>
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	f043 0202 	orr.w	r2, r3, #2
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <HAL_UART_IRQHandler+0xd0>
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d005      	beq.n	8005fbc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	f043 0204 	orr.w	r2, r3, #4
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00f      	beq.n	8005fe6 <HAL_UART_IRQHandler+0xfa>
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	f003 0320 	and.w	r3, r3, #32
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d104      	bne.n	8005fda <HAL_UART_IRQHandler+0xee>
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d005      	beq.n	8005fe6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	f043 0208 	orr.w	r2, r3, #8
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 811f 	beq.w	800622e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <HAL_UART_IRQHandler+0x11e>
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fa16 	bl	8006436 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006014:	2b40      	cmp	r3, #64	; 0x40
 8006016:	bf0c      	ite	eq
 8006018:	2301      	moveq	r3, #1
 800601a:	2300      	movne	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b00      	cmp	r3, #0
 800602a:	d102      	bne.n	8006032 <HAL_UART_IRQHandler+0x146>
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d031      	beq.n	8006096 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f956 	bl	80062e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006042:	2b40      	cmp	r3, #64	; 0x40
 8006044:	d123      	bne.n	800608e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	695a      	ldr	r2, [r3, #20]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006054:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	2b00      	cmp	r3, #0
 800605c:	d013      	beq.n	8006086 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	4a77      	ldr	r2, [pc, #476]	; (8006240 <HAL_UART_IRQHandler+0x354>)
 8006064:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	4618      	mov	r0, r3
 800606c:	f7fb fea6 	bl	8001dbc <HAL_DMA_Abort_IT>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d016      	beq.n	80060a4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006080:	4610      	mov	r0, r2
 8006082:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006084:	e00e      	b.n	80060a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f8dc 	bl	8006244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608c:	e00a      	b.n	80060a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f8d8 	bl	8006244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006094:	e006      	b.n	80060a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f8d4 	bl	8006244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80060a2:	e0c4      	b.n	800622e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a4:	bf00      	nop
    return;
 80060a6:	e0c2      	b.n	800622e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	f040 80a2 	bne.w	80061f6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 809c 	beq.w	80061f6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8096 	beq.w	80061f6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ea:	2b40      	cmp	r3, #64	; 0x40
 80060ec:	d14f      	bne.n	800618e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80060f8:	8a3b      	ldrh	r3, [r7, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 8099 	beq.w	8006232 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006104:	8a3a      	ldrh	r2, [r7, #16]
 8006106:	429a      	cmp	r2, r3
 8006108:	f080 8093 	bcs.w	8006232 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	8a3a      	ldrh	r2, [r7, #16]
 8006110:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800611c:	d02b      	beq.n	8006176 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68da      	ldr	r2, [r3, #12]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800612c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695a      	ldr	r2, [r3, #20]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0201 	bic.w	r2, r2, #1
 800613c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	695a      	ldr	r2, [r3, #20]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800614c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0210 	bic.w	r2, r2, #16
 800616a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	4618      	mov	r0, r3
 8006172:	f7fb fdb3 	bl	8001cdc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800617e:	b29b      	uxth	r3, r3
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	b29b      	uxth	r3, r3
 8006184:	4619      	mov	r1, r3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f866 	bl	8006258 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800618c:	e051      	b.n	8006232 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006196:	b29b      	uxth	r3, r3
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d047      	beq.n	8006236 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80061a6:	8a7b      	ldrh	r3, [r7, #18]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d044      	beq.n	8006236 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061ba:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	695a      	ldr	r2, [r3, #20]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0201 	bic.w	r2, r2, #1
 80061ca:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0210 	bic.w	r2, r2, #16
 80061e8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061ea:	8a7b      	ldrh	r3, [r7, #18]
 80061ec:	4619      	mov	r1, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f832 	bl	8006258 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80061f4:	e01f      	b.n	8006236 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d008      	beq.n	8006212 <HAL_UART_IRQHandler+0x326>
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f8ab 	bl	8006366 <UART_Transmit_IT>
    return;
 8006210:	e012      	b.n	8006238 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00d      	beq.n	8006238 <HAL_UART_IRQHandler+0x34c>
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006222:	2b00      	cmp	r3, #0
 8006224:	d008      	beq.n	8006238 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f8ed 	bl	8006406 <UART_EndTransmit_IT>
    return;
 800622c:	e004      	b.n	8006238 <HAL_UART_IRQHandler+0x34c>
    return;
 800622e:	bf00      	nop
 8006230:	e002      	b.n	8006238 <HAL_UART_IRQHandler+0x34c>
      return;
 8006232:	bf00      	nop
 8006234:	e000      	b.n	8006238 <HAL_UART_IRQHandler+0x34c>
      return;
 8006236:	bf00      	nop
  }
}
 8006238:	3728      	adds	r7, #40	; 0x28
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	0800633f 	.word	0x0800633f

08006244 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	4613      	mov	r3, r2
 800627c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	88fa      	ldrh	r2, [r7, #6]
 8006288:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	88fa      	ldrh	r2, [r7, #6]
 800628e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2222      	movs	r2, #34	; 0x22
 800629a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062b4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	695a      	ldr	r2, [r3, #20]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0201 	orr.w	r2, r2, #1
 80062c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 0220 	orr.w	r2, r2, #32
 80062d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	695a      	ldr	r2, [r3, #20]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0201 	bic.w	r2, r2, #1
 800630a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006310:	2b01      	cmp	r3, #1
 8006312:	d107      	bne.n	8006324 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0210 	bic.w	r2, r2, #16
 8006322:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2220      	movs	r2, #32
 8006328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f7ff ff73 	bl	8006244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800635e:	bf00      	nop
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006366:	b480      	push	{r7}
 8006368:	b085      	sub	sp, #20
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b21      	cmp	r3, #33	; 0x21
 8006378:	d13e      	bne.n	80063f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006382:	d114      	bne.n	80063ae <UART_Transmit_IT+0x48>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d110      	bne.n	80063ae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	461a      	mov	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	1c9a      	adds	r2, r3, #2
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	621a      	str	r2, [r3, #32]
 80063ac:	e008      	b.n	80063c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	1c59      	adds	r1, r3, #1
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6211      	str	r1, [r2, #32]
 80063b8:	781a      	ldrb	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	4619      	mov	r1, r3
 80063ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10f      	bne.n	80063f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e000      	b.n	80063fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063f8:	2302      	movs	r3, #2
  }
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800641c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2220      	movs	r2, #32
 8006422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7fb fa1c 	bl	8001864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b22      	cmp	r3, #34	; 0x22
 8006448:	f040 8087 	bne.w	800655a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006454:	d117      	bne.n	8006486 <UART_Receive_IT+0x50>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d113      	bne.n	8006486 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006466:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	b29b      	uxth	r3, r3
 8006470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006474:	b29a      	uxth	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647e:	1c9a      	adds	r2, r3, #2
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	629a      	str	r2, [r3, #40]	; 0x28
 8006484:	e026      	b.n	80064d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800648c:	2300      	movs	r3, #0
 800648e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006498:	d007      	beq.n	80064aa <UART_Receive_IT+0x74>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10a      	bne.n	80064b8 <UART_Receive_IT+0x82>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	e008      	b.n	80064ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29b      	uxth	r3, r3
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	4619      	mov	r1, r3
 80064e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d136      	bne.n	8006556 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0220 	bic.w	r2, r2, #32
 80064f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006506:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	695a      	ldr	r2, [r3, #20]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0201 	bic.w	r2, r2, #1
 8006516:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2220      	movs	r2, #32
 800651c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006524:	2b01      	cmp	r3, #1
 8006526:	d10e      	bne.n	8006546 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0210 	bic.w	r2, r2, #16
 8006536:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff fe8a 	bl	8006258 <HAL_UARTEx_RxEventCallback>
 8006544:	e002      	b.n	800654c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fb f996 	bl	8001878 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	e002      	b.n	800655c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	e000      	b.n	800655c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800655a:	2302      	movs	r3, #2
  }
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006568:	b09f      	sub	sp, #124	; 0x7c
 800656a:	af00      	add	r7, sp, #0
 800656c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800656e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800657a:	68d9      	ldr	r1, [r3, #12]
 800657c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	ea40 0301 	orr.w	r3, r0, r1
 8006584:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	431a      	orrs	r2, r3
 8006590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	431a      	orrs	r2, r3
 8006596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	4313      	orrs	r3, r2
 800659c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800659e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065a8:	f021 010c 	bic.w	r1, r1, #12
 80065ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065b2:	430b      	orrs	r3, r1
 80065b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c2:	6999      	ldr	r1, [r3, #24]
 80065c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	ea40 0301 	orr.w	r3, r0, r1
 80065cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	4bc5      	ldr	r3, [pc, #788]	; (80068e8 <UART_SetConfig+0x384>)
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d004      	beq.n	80065e2 <UART_SetConfig+0x7e>
 80065d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	4bc3      	ldr	r3, [pc, #780]	; (80068ec <UART_SetConfig+0x388>)
 80065de:	429a      	cmp	r2, r3
 80065e0:	d103      	bne.n	80065ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065e2:	f7fe fc83 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 80065e6:	6778      	str	r0, [r7, #116]	; 0x74
 80065e8:	e002      	b.n	80065f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065ea:	f7fe fc6b 	bl	8004ec4 <HAL_RCC_GetPCLK1Freq>
 80065ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f8:	f040 80b6 	bne.w	8006768 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065fe:	461c      	mov	r4, r3
 8006600:	f04f 0500 	mov.w	r5, #0
 8006604:	4622      	mov	r2, r4
 8006606:	462b      	mov	r3, r5
 8006608:	1891      	adds	r1, r2, r2
 800660a:	6439      	str	r1, [r7, #64]	; 0x40
 800660c:	415b      	adcs	r3, r3
 800660e:	647b      	str	r3, [r7, #68]	; 0x44
 8006610:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006614:	1912      	adds	r2, r2, r4
 8006616:	eb45 0303 	adc.w	r3, r5, r3
 800661a:	f04f 0000 	mov.w	r0, #0
 800661e:	f04f 0100 	mov.w	r1, #0
 8006622:	00d9      	lsls	r1, r3, #3
 8006624:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006628:	00d0      	lsls	r0, r2, #3
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	1911      	adds	r1, r2, r4
 8006630:	6639      	str	r1, [r7, #96]	; 0x60
 8006632:	416b      	adcs	r3, r5
 8006634:	667b      	str	r3, [r7, #100]	; 0x64
 8006636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	461a      	mov	r2, r3
 800663c:	f04f 0300 	mov.w	r3, #0
 8006640:	1891      	adds	r1, r2, r2
 8006642:	63b9      	str	r1, [r7, #56]	; 0x38
 8006644:	415b      	adcs	r3, r3
 8006646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006648:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800664c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006650:	f7f9 fdcc 	bl	80001ec <__aeabi_uldivmod>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4ba5      	ldr	r3, [pc, #660]	; (80068f0 <UART_SetConfig+0x38c>)
 800665a:	fba3 2302 	umull	r2, r3, r3, r2
 800665e:	095b      	lsrs	r3, r3, #5
 8006660:	011e      	lsls	r6, r3, #4
 8006662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006664:	461c      	mov	r4, r3
 8006666:	f04f 0500 	mov.w	r5, #0
 800666a:	4622      	mov	r2, r4
 800666c:	462b      	mov	r3, r5
 800666e:	1891      	adds	r1, r2, r2
 8006670:	6339      	str	r1, [r7, #48]	; 0x30
 8006672:	415b      	adcs	r3, r3
 8006674:	637b      	str	r3, [r7, #52]	; 0x34
 8006676:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800667a:	1912      	adds	r2, r2, r4
 800667c:	eb45 0303 	adc.w	r3, r5, r3
 8006680:	f04f 0000 	mov.w	r0, #0
 8006684:	f04f 0100 	mov.w	r1, #0
 8006688:	00d9      	lsls	r1, r3, #3
 800668a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800668e:	00d0      	lsls	r0, r2, #3
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	1911      	adds	r1, r2, r4
 8006696:	65b9      	str	r1, [r7, #88]	; 0x58
 8006698:	416b      	adcs	r3, r5
 800669a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800669c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	461a      	mov	r2, r3
 80066a2:	f04f 0300 	mov.w	r3, #0
 80066a6:	1891      	adds	r1, r2, r2
 80066a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80066aa:	415b      	adcs	r3, r3
 80066ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80066b6:	f7f9 fd99 	bl	80001ec <__aeabi_uldivmod>
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	4b8c      	ldr	r3, [pc, #560]	; (80068f0 <UART_SetConfig+0x38c>)
 80066c0:	fba3 1302 	umull	r1, r3, r3, r2
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	2164      	movs	r1, #100	; 0x64
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	00db      	lsls	r3, r3, #3
 80066d0:	3332      	adds	r3, #50	; 0x32
 80066d2:	4a87      	ldr	r2, [pc, #540]	; (80068f0 <UART_SetConfig+0x38c>)
 80066d4:	fba2 2303 	umull	r2, r3, r2, r3
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066e0:	441e      	add	r6, r3
 80066e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066e4:	4618      	mov	r0, r3
 80066e6:	f04f 0100 	mov.w	r1, #0
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	1894      	adds	r4, r2, r2
 80066f0:	623c      	str	r4, [r7, #32]
 80066f2:	415b      	adcs	r3, r3
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
 80066f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066fa:	1812      	adds	r2, r2, r0
 80066fc:	eb41 0303 	adc.w	r3, r1, r3
 8006700:	f04f 0400 	mov.w	r4, #0
 8006704:	f04f 0500 	mov.w	r5, #0
 8006708:	00dd      	lsls	r5, r3, #3
 800670a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800670e:	00d4      	lsls	r4, r2, #3
 8006710:	4622      	mov	r2, r4
 8006712:	462b      	mov	r3, r5
 8006714:	1814      	adds	r4, r2, r0
 8006716:	653c      	str	r4, [r7, #80]	; 0x50
 8006718:	414b      	adcs	r3, r1
 800671a:	657b      	str	r3, [r7, #84]	; 0x54
 800671c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	461a      	mov	r2, r3
 8006722:	f04f 0300 	mov.w	r3, #0
 8006726:	1891      	adds	r1, r2, r2
 8006728:	61b9      	str	r1, [r7, #24]
 800672a:	415b      	adcs	r3, r3
 800672c:	61fb      	str	r3, [r7, #28]
 800672e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006732:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006736:	f7f9 fd59 	bl	80001ec <__aeabi_uldivmod>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4b6c      	ldr	r3, [pc, #432]	; (80068f0 <UART_SetConfig+0x38c>)
 8006740:	fba3 1302 	umull	r1, r3, r3, r2
 8006744:	095b      	lsrs	r3, r3, #5
 8006746:	2164      	movs	r1, #100	; 0x64
 8006748:	fb01 f303 	mul.w	r3, r1, r3
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	3332      	adds	r3, #50	; 0x32
 8006752:	4a67      	ldr	r2, [pc, #412]	; (80068f0 <UART_SetConfig+0x38c>)
 8006754:	fba2 2303 	umull	r2, r3, r2, r3
 8006758:	095b      	lsrs	r3, r3, #5
 800675a:	f003 0207 	and.w	r2, r3, #7
 800675e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4432      	add	r2, r6
 8006764:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006766:	e0b9      	b.n	80068dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800676a:	461c      	mov	r4, r3
 800676c:	f04f 0500 	mov.w	r5, #0
 8006770:	4622      	mov	r2, r4
 8006772:	462b      	mov	r3, r5
 8006774:	1891      	adds	r1, r2, r2
 8006776:	6139      	str	r1, [r7, #16]
 8006778:	415b      	adcs	r3, r3
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006780:	1912      	adds	r2, r2, r4
 8006782:	eb45 0303 	adc.w	r3, r5, r3
 8006786:	f04f 0000 	mov.w	r0, #0
 800678a:	f04f 0100 	mov.w	r1, #0
 800678e:	00d9      	lsls	r1, r3, #3
 8006790:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006794:	00d0      	lsls	r0, r2, #3
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	eb12 0804 	adds.w	r8, r2, r4
 800679e:	eb43 0905 	adc.w	r9, r3, r5
 80067a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f04f 0100 	mov.w	r1, #0
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	f04f 0300 	mov.w	r3, #0
 80067b4:	008b      	lsls	r3, r1, #2
 80067b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80067ba:	0082      	lsls	r2, r0, #2
 80067bc:	4640      	mov	r0, r8
 80067be:	4649      	mov	r1, r9
 80067c0:	f7f9 fd14 	bl	80001ec <__aeabi_uldivmod>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4b49      	ldr	r3, [pc, #292]	; (80068f0 <UART_SetConfig+0x38c>)
 80067ca:	fba3 2302 	umull	r2, r3, r3, r2
 80067ce:	095b      	lsrs	r3, r3, #5
 80067d0:	011e      	lsls	r6, r3, #4
 80067d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067d4:	4618      	mov	r0, r3
 80067d6:	f04f 0100 	mov.w	r1, #0
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	1894      	adds	r4, r2, r2
 80067e0:	60bc      	str	r4, [r7, #8]
 80067e2:	415b      	adcs	r3, r3
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067ea:	1812      	adds	r2, r2, r0
 80067ec:	eb41 0303 	adc.w	r3, r1, r3
 80067f0:	f04f 0400 	mov.w	r4, #0
 80067f4:	f04f 0500 	mov.w	r5, #0
 80067f8:	00dd      	lsls	r5, r3, #3
 80067fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067fe:	00d4      	lsls	r4, r2, #3
 8006800:	4622      	mov	r2, r4
 8006802:	462b      	mov	r3, r5
 8006804:	1814      	adds	r4, r2, r0
 8006806:	64bc      	str	r4, [r7, #72]	; 0x48
 8006808:	414b      	adcs	r3, r1
 800680a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800680c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	4618      	mov	r0, r3
 8006812:	f04f 0100 	mov.w	r1, #0
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	f04f 0300 	mov.w	r3, #0
 800681e:	008b      	lsls	r3, r1, #2
 8006820:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006824:	0082      	lsls	r2, r0, #2
 8006826:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800682a:	f7f9 fcdf 	bl	80001ec <__aeabi_uldivmod>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4b2f      	ldr	r3, [pc, #188]	; (80068f0 <UART_SetConfig+0x38c>)
 8006834:	fba3 1302 	umull	r1, r3, r3, r2
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	2164      	movs	r1, #100	; 0x64
 800683c:	fb01 f303 	mul.w	r3, r1, r3
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	3332      	adds	r3, #50	; 0x32
 8006846:	4a2a      	ldr	r2, [pc, #168]	; (80068f0 <UART_SetConfig+0x38c>)
 8006848:	fba2 2303 	umull	r2, r3, r2, r3
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006852:	441e      	add	r6, r3
 8006854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006856:	4618      	mov	r0, r3
 8006858:	f04f 0100 	mov.w	r1, #0
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	1894      	adds	r4, r2, r2
 8006862:	603c      	str	r4, [r7, #0]
 8006864:	415b      	adcs	r3, r3
 8006866:	607b      	str	r3, [r7, #4]
 8006868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800686c:	1812      	adds	r2, r2, r0
 800686e:	eb41 0303 	adc.w	r3, r1, r3
 8006872:	f04f 0400 	mov.w	r4, #0
 8006876:	f04f 0500 	mov.w	r5, #0
 800687a:	00dd      	lsls	r5, r3, #3
 800687c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006880:	00d4      	lsls	r4, r2, #3
 8006882:	4622      	mov	r2, r4
 8006884:	462b      	mov	r3, r5
 8006886:	eb12 0a00 	adds.w	sl, r2, r0
 800688a:	eb43 0b01 	adc.w	fp, r3, r1
 800688e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	4618      	mov	r0, r3
 8006894:	f04f 0100 	mov.w	r1, #0
 8006898:	f04f 0200 	mov.w	r2, #0
 800689c:	f04f 0300 	mov.w	r3, #0
 80068a0:	008b      	lsls	r3, r1, #2
 80068a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068a6:	0082      	lsls	r2, r0, #2
 80068a8:	4650      	mov	r0, sl
 80068aa:	4659      	mov	r1, fp
 80068ac:	f7f9 fc9e 	bl	80001ec <__aeabi_uldivmod>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4b0e      	ldr	r3, [pc, #56]	; (80068f0 <UART_SetConfig+0x38c>)
 80068b6:	fba3 1302 	umull	r1, r3, r3, r2
 80068ba:	095b      	lsrs	r3, r3, #5
 80068bc:	2164      	movs	r1, #100	; 0x64
 80068be:	fb01 f303 	mul.w	r3, r1, r3
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	3332      	adds	r3, #50	; 0x32
 80068c8:	4a09      	ldr	r2, [pc, #36]	; (80068f0 <UART_SetConfig+0x38c>)
 80068ca:	fba2 2303 	umull	r2, r3, r2, r3
 80068ce:	095b      	lsrs	r3, r3, #5
 80068d0:	f003 020f 	and.w	r2, r3, #15
 80068d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4432      	add	r2, r6
 80068da:	609a      	str	r2, [r3, #8]
}
 80068dc:	bf00      	nop
 80068de:	377c      	adds	r7, #124	; 0x7c
 80068e0:	46bd      	mov	sp, r7
 80068e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e6:	bf00      	nop
 80068e8:	40011000 	.word	0x40011000
 80068ec:	40011400 	.word	0x40011400
 80068f0:	51eb851f 	.word	0x51eb851f

080068f4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80068fe:	2300      	movs	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d029      	beq.n	8006962 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800691a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800691e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006928:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800692e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8006934:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800693a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8006940:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8006946:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800694c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8006952:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	e034      	b.n	80069cc <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800696e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006978:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800697e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006992:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006996:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80069a0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80069a6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80069ac:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80069b2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80069b8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	4313      	orrs	r3, r2
 80069be:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80069da:	b480      	push	{r7}
 80069dc:	b087      	sub	sp, #28
 80069de:	af00      	add	r7, sp, #0
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	60b9      	str	r1, [r7, #8]
 80069e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d02e      	beq.n	8006a52 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006a00:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006a10:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006a1a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006a24:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006a2e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006a38:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006a42:	4313      	orrs	r3, r2
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	609a      	str	r2, [r3, #8]
 8006a50:	e03b      	b.n	8006aca <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a62:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006a74:	4313      	orrs	r3, r2
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006a88:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006a98:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006aa2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006aac:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	371c      	adds	r7, #28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ad8:	b084      	sub	sp, #16
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	f107 001c 	add.w	r0, r7, #28
 8006ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d122      	bne.n	8006b36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d105      	bne.n	8006b2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f902 	bl	8006d34 <USB_CoreReset>
 8006b30:	4603      	mov	r3, r0
 8006b32:	73fb      	strb	r3, [r7, #15]
 8006b34:	e01a      	b.n	8006b6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f8f6 	bl	8006d34 <USB_CoreReset>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d106      	bne.n	8006b60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	639a      	str	r2, [r3, #56]	; 0x38
 8006b5e:	e005      	b.n	8006b6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d10b      	bne.n	8006b8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f043 0206 	orr.w	r2, r3, #6
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f043 0220 	orr.w	r2, r3, #32
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b96:	b004      	add	sp, #16
 8006b98:	4770      	bx	lr

08006b9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f023 0201 	bic.w	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d106      	bne.n	8006be8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	60da      	str	r2, [r3, #12]
 8006be6:	e00b      	b.n	8006c00 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d106      	bne.n	8006bfc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60da      	str	r2, [r3, #12]
 8006bfa:	e001      	b.n	8006c00 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e003      	b.n	8006c08 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006c00:	2032      	movs	r0, #50	; 0x32
 8006c02:	f7fa ff49 	bl	8001a98 <HAL_Delay>

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	019b      	lsls	r3, r3, #6
 8006c22:	f043 0220 	orr.w	r2, r3, #32
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4a09      	ldr	r2, [pc, #36]	; (8006c58 <USB_FlushTxFifo+0x48>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d901      	bls.n	8006c3c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e006      	b.n	8006c4a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	f003 0320 	and.w	r3, r3, #32
 8006c44:	2b20      	cmp	r3, #32
 8006c46:	d0f0      	beq.n	8006c2a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	00030d40 	.word	0x00030d40

08006c5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2210      	movs	r2, #16
 8006c6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3301      	adds	r3, #1
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4a09      	ldr	r2, [pc, #36]	; (8006c9c <USB_FlushRxFifo+0x40>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d901      	bls.n	8006c80 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e006      	b.n	8006c8e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	f003 0310 	and.w	r3, r3, #16
 8006c88:	2b10      	cmp	r3, #16
 8006c8a:	d0f0      	beq.n	8006c6e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	00030d40 	.word	0x00030d40

08006ca0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b089      	sub	sp, #36	; 0x24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	3303      	adds	r3, #3
 8006cba:	089b      	lsrs	r3, r3, #2
 8006cbc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	61bb      	str	r3, [r7, #24]
 8006cc2:	e00b      	b.n	8006cdc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	601a      	str	r2, [r3, #0]
    pDest++;
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	61bb      	str	r3, [r7, #24]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d3ef      	bcc.n	8006cc4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006ce4:	69fb      	ldr	r3, [r7, #28]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3724      	adds	r7, #36	; 0x24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4013      	ands	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	f003 0301 	and.w	r3, r3, #1
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3301      	adds	r3, #1
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4a13      	ldr	r2, [pc, #76]	; (8006d98 <USB_CoreReset+0x64>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d901      	bls.n	8006d52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e01b      	b.n	8006d8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	daf2      	bge.n	8006d40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	f043 0201 	orr.w	r2, r3, #1
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4a09      	ldr	r2, [pc, #36]	; (8006d98 <USB_CoreReset+0x64>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d901      	bls.n	8006d7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e006      	b.n	8006d8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d0f0      	beq.n	8006d6a <USB_CoreReset+0x36>

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	00030d40 	.word	0x00030d40

08006d9c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	f107 001c 	add.w	r0, r7, #28
 8006daa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006db8:	461a      	mov	r2, r3
 8006dba:	2300      	movs	r3, #0
 8006dbc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dda:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d018      	beq.n	8006e20 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d10a      	bne.n	8006e0a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e02:	f043 0304 	orr.w	r3, r3, #4
 8006e06:	6013      	str	r3, [r2, #0]
 8006e08:	e014      	b.n	8006e34 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e18:	f023 0304 	bic.w	r3, r3, #4
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	e009      	b.n	8006e34 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e2e:	f023 0304 	bic.w	r3, r3, #4
 8006e32:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006e34:	2110      	movs	r1, #16
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff feea 	bl	8006c10 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff ff0d 	bl	8006c5c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006e42:	2300      	movs	r3, #0
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	e015      	b.n	8006e74 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e54:	461a      	mov	r2, r3
 8006e56:	f04f 33ff 	mov.w	r3, #4294967295
 8006e5a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e68:	461a      	mov	r2, r3
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3301      	adds	r3, #1
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d3e5      	bcc.n	8006e48 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f882 	bl	8006f88 <USB_DriveVbus>

  HAL_Delay(200U);
 8006e84:	20c8      	movs	r0, #200	; 0xc8
 8006e86:	f7fa fe07 	bl	8001a98 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f04f 32ff 	mov.w	r2, #4294967295
 8006e96:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00b      	beq.n	8006ebc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eaa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a14      	ldr	r2, [pc, #80]	; (8006f00 <USB_HostInit+0x164>)
 8006eb0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a13      	ldr	r2, [pc, #76]	; (8006f04 <USB_HostInit+0x168>)
 8006eb6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006eba:	e009      	b.n	8006ed0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2280      	movs	r2, #128	; 0x80
 8006ec0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a10      	ldr	r2, [pc, #64]	; (8006f08 <USB_HostInit+0x16c>)
 8006ec6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a10      	ldr	r2, [pc, #64]	; (8006f0c <USB_HostInit+0x170>)
 8006ecc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d105      	bne.n	8006ee2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	f043 0210 	orr.w	r2, r3, #16
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	4b0a      	ldr	r3, [pc, #40]	; (8006f10 <USB_HostInit+0x174>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006efa:	b004      	add	sp, #16
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	01000200 	.word	0x01000200
 8006f04:	00e00300 	.word	0x00e00300
 8006f08:	00600080 	.word	0x00600080
 8006f0c:	004000e0 	.word	0x004000e0
 8006f10:	a3200008 	.word	0xa3200008

08006f14 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f32:	f023 0303 	bic.w	r3, r3, #3
 8006f36:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	f003 0303 	and.w	r3, r3, #3
 8006f46:	68f9      	ldr	r1, [r7, #12]
 8006f48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d107      	bne.n	8006f66 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006f62:	6053      	str	r3, [r2, #4]
 8006f64:	e009      	b.n	8006f7a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006f66:	78fb      	ldrb	r3, [r7, #3]
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d106      	bne.n	8006f7a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f72:	461a      	mov	r2, r3
 8006f74:	f241 7370 	movw	r3, #6000	; 0x1770
 8006f78:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006fac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d109      	bne.n	8006fcc <USB_DriveVbus+0x44>
 8006fb8:	78fb      	ldrb	r3, [r7, #3]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d106      	bne.n	8006fcc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006fc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006fca:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd6:	d109      	bne.n	8006fec <USB_DriveVbus+0x64>
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d106      	bne.n	8006fec <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fea:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b085      	sub	sp, #20
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	b29b      	uxth	r3, r3
}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800701c:	b480      	push	{r7}
 800701e:	b089      	sub	sp, #36	; 0x24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800702c:	78fb      	ldrb	r3, [r7, #3]
 800702e:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	4413      	add	r3, r2
 800703c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	0c9b      	lsrs	r3, r3, #18
 8007044:	f003 0303 	and.w	r3, r3, #3
 8007048:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	4413      	add	r3, r2
 8007052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	0fdb      	lsrs	r3, r3, #31
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f003 0320 	and.w	r3, r3, #32
 8007068:	2b20      	cmp	r3, #32
 800706a:	d104      	bne.n	8007076 <USB_HC_Halt+0x5a>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	e0e8      	b.n	8007248 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <USB_HC_Halt+0x66>
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d173      	bne.n	800716a <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	4413      	add	r3, r2
 800708a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	0151      	lsls	r1, r2, #5
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	440a      	add	r2, r1
 8007098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800709c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070a0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f040 80cb 	bne.w	8007246 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d143      	bne.n	8007144 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	0151      	lsls	r1, r2, #5
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	440a      	add	r2, r1
 80070d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070da:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	0151      	lsls	r1, r2, #5
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	440a      	add	r2, r1
 80070f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070fa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	4413      	add	r3, r2
 8007104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	0151      	lsls	r1, r2, #5
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	440a      	add	r2, r1
 8007112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007116:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800711a:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	3301      	adds	r3, #1
 8007120:	61fb      	str	r3, [r7, #28]
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007128:	d81d      	bhi.n	8007166 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	4413      	add	r3, r2
 8007132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800713c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007140:	d0ec      	beq.n	800711c <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007142:	e080      	b.n	8007246 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	4413      	add	r3, r2
 800714c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	0151      	lsls	r1, r2, #5
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	440a      	add	r2, r1
 800715a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800715e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007162:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007164:	e06f      	b.n	8007246 <USB_HC_Halt+0x22a>
            break;
 8007166:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007168:	e06d      	b.n	8007246 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	4413      	add	r3, r2
 8007172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	0151      	lsls	r1, r2, #5
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	440a      	add	r2, r1
 8007180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007184:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007188:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d143      	bne.n	8007222 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	015a      	lsls	r2, r3, #5
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	0151      	lsls	r1, r2, #5
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	440a      	add	r2, r1
 80071b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071b8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	0151      	lsls	r1, r2, #5
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	440a      	add	r2, r1
 80071d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071d8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	0151      	lsls	r1, r2, #5
 80071ec:	69ba      	ldr	r2, [r7, #24]
 80071ee:	440a      	add	r2, r1
 80071f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071f8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	3301      	adds	r3, #1
 80071fe:	61fb      	str	r3, [r7, #28]
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007206:	d81d      	bhi.n	8007244 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	015a      	lsls	r2, r3, #5
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	4413      	add	r3, r2
 8007210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800721a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800721e:	d0ec      	beq.n	80071fa <USB_HC_Halt+0x1de>
 8007220:	e011      	b.n	8007246 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	4413      	add	r3, r2
 800722a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	0151      	lsls	r1, r2, #5
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	440a      	add	r2, r1
 8007238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800723c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	e000      	b.n	8007246 <USB_HC_Halt+0x22a>
          break;
 8007244:	bf00      	nop
    }
  }

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3724      	adds	r7, #36	; 0x24
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <__libc_init_array>:
 8007254:	b570      	push	{r4, r5, r6, lr}
 8007256:	4d0d      	ldr	r5, [pc, #52]	; (800728c <__libc_init_array+0x38>)
 8007258:	4c0d      	ldr	r4, [pc, #52]	; (8007290 <__libc_init_array+0x3c>)
 800725a:	1b64      	subs	r4, r4, r5
 800725c:	10a4      	asrs	r4, r4, #2
 800725e:	2600      	movs	r6, #0
 8007260:	42a6      	cmp	r6, r4
 8007262:	d109      	bne.n	8007278 <__libc_init_array+0x24>
 8007264:	4d0b      	ldr	r5, [pc, #44]	; (8007294 <__libc_init_array+0x40>)
 8007266:	4c0c      	ldr	r4, [pc, #48]	; (8007298 <__libc_init_array+0x44>)
 8007268:	f000 f820 	bl	80072ac <_init>
 800726c:	1b64      	subs	r4, r4, r5
 800726e:	10a4      	asrs	r4, r4, #2
 8007270:	2600      	movs	r6, #0
 8007272:	42a6      	cmp	r6, r4
 8007274:	d105      	bne.n	8007282 <__libc_init_array+0x2e>
 8007276:	bd70      	pop	{r4, r5, r6, pc}
 8007278:	f855 3b04 	ldr.w	r3, [r5], #4
 800727c:	4798      	blx	r3
 800727e:	3601      	adds	r6, #1
 8007280:	e7ee      	b.n	8007260 <__libc_init_array+0xc>
 8007282:	f855 3b04 	ldr.w	r3, [r5], #4
 8007286:	4798      	blx	r3
 8007288:	3601      	adds	r6, #1
 800728a:	e7f2      	b.n	8007272 <__libc_init_array+0x1e>
 800728c:	080072f8 	.word	0x080072f8
 8007290:	080072f8 	.word	0x080072f8
 8007294:	080072f8 	.word	0x080072f8
 8007298:	080072fc 	.word	0x080072fc

0800729c <memset>:
 800729c:	4402      	add	r2, r0
 800729e:	4603      	mov	r3, r0
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d100      	bne.n	80072a6 <memset+0xa>
 80072a4:	4770      	bx	lr
 80072a6:	f803 1b01 	strb.w	r1, [r3], #1
 80072aa:	e7f9      	b.n	80072a0 <memset+0x4>

080072ac <_init>:
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ae:	bf00      	nop
 80072b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072b2:	bc08      	pop	{r3}
 80072b4:	469e      	mov	lr, r3
 80072b6:	4770      	bx	lr

080072b8 <_fini>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	bf00      	nop
 80072bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072be:	bc08      	pop	{r3}
 80072c0:	469e      	mov	lr, r3
 80072c2:	4770      	bx	lr
