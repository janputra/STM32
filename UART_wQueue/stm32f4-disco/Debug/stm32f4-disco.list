
stm32f4-disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007044  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080071f0  080071f0  000171f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007220  08007220  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007220  08007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007228  08007228  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800722c  0800722c  0001722c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000724  2000000c  0800723c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  0800723c  00020730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020bc2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004924  00000000  00000000  00040bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  00045528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001890  00000000  00000000  00046f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c67  00000000  00000000  00048828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002207d  00000000  00000000  0007048f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3e2a  00000000  00000000  0009250c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176336  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ef4  00000000  00000000  0017638c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080071d8 	.word	0x080071d8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080071d8 	.word	0x080071d8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_CRC_Init+0x20>)
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <MX_CRC_Init+0x24>)
 80004ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_CRC_Init+0x20>)
 80004f0:	f001 fb6e 	bl	8001bd0 <HAL_CRC_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004fa:	f000 fdff 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000030 	.word	0x20000030
 8000508:	40023000 	.word	0x40023000

0800050c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <HAL_CRC_MspInit+0x3c>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d10d      	bne.n	800053a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a09      	ldr	r2, [pc, #36]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40023000 	.word	0x40023000
 800054c:	40023800 	.word	0x40023800

08000550 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000556:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <MX_DMA2D_Init+0x60>)
 8000558:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <MX_DMA2D_Init+0x5c>)
 800055c:	2200      	movs	r2, #0
 800055e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000566:	4b11      	ldr	r3, [pc, #68]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000568:	2200      	movs	r2, #0
 800056a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800056c:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_DMA2D_Init+0x5c>)
 800056e:	2200      	movs	r2, #0
 8000570:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000574:	2200      	movs	r2, #0
 8000576:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <MX_DMA2D_Init+0x5c>)
 800057a:	2200      	movs	r2, #0
 800057c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000580:	2200      	movs	r2, #0
 8000582:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000584:	4809      	ldr	r0, [pc, #36]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000586:	f001 fbd1 	bl	8001d2c <HAL_DMA2D_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000590:	f000 fdb4 	bl	80010fc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000594:	2101      	movs	r1, #1
 8000596:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000598:	f001 fd22 	bl	8001fe0 <HAL_DMA2D_ConfigLayer>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005a2:	f000 fdab 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000044 	.word	0x20000044
 80005b0:	4002b000 	.word	0x4002b000

080005b4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <HAL_DMA2D_MspInit+0x48>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d115      	bne.n	80005f2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <HAL_DMA2D_MspInit+0x4c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <HAL_DMA2D_MspInit+0x4c>)
 80005d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_DMA2D_MspInit+0x4c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2105      	movs	r1, #5
 80005e6:	205a      	movs	r0, #90	; 0x5a
 80005e8:	f001 fac8 	bl	8001b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80005ec:	205a      	movs	r0, #90	; 0x5a
 80005ee:	f001 fae1 	bl	8001bb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	4002b000 	.word	0x4002b000
 8000600:	40023800 	.word	0x40023800

08000604 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
 8000618:	615a      	str	r2, [r3, #20]
 800061a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_FMC_Init+0x98>)
 800061e:	4a20      	ldr	r2, [pc, #128]	; (80006a0 <MX_FMC_Init+0x9c>)
 8000620:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_FMC_Init+0x98>)
 8000624:	2201      	movs	r2, #1
 8000626:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_FMC_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_FMC_Init+0x98>)
 8000630:	2204      	movs	r2, #4
 8000632:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000634:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_FMC_Init+0x98>)
 8000636:	2210      	movs	r2, #16
 8000638:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_FMC_Init+0x98>)
 800063c:	2240      	movs	r2, #64	; 0x40
 800063e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_FMC_Init+0x98>)
 8000642:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000646:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_FMC_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_FMC_Init+0x98>)
 8000650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000654:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_FMC_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_FMC_Init+0x98>)
 800065e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000662:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000664:	2302      	movs	r3, #2
 8000666:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000668:	2307      	movs	r3, #7
 800066a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000670:	2307      	movs	r3, #7
 8000672:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000674:	2303      	movs	r3, #3
 8000676:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800067c:	2302      	movs	r3, #2
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_FMC_Init+0x98>)
 8000686:	f004 fdcb 	bl	8005220 <HAL_SDRAM_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000690:	f000 fd34 	bl	80010fc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000084 	.word	0x20000084
 80006a0:	a0000140 	.word	0xa0000140

080006a4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006b8:	4b3b      	ldr	r3, [pc, #236]	; (80007a8 <HAL_FMC_MspInit+0x104>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d16f      	bne.n	80007a0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80006c0:	4b39      	ldr	r3, [pc, #228]	; (80007a8 <HAL_FMC_MspInit+0x104>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b38      	ldr	r3, [pc, #224]	; (80007ac <HAL_FMC_MspInit+0x108>)
 80006cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ce:	4a37      	ldr	r2, [pc, #220]	; (80007ac <HAL_FMC_MspInit+0x108>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6393      	str	r3, [r2, #56]	; 0x38
 80006d6:	4b35      	ldr	r3, [pc, #212]	; (80007ac <HAL_FMC_MspInit+0x108>)
 80006d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80006e2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80006e6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006f4:	230c      	movs	r3, #12
 80006f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	482c      	ldr	r0, [pc, #176]	; (80007b0 <HAL_FMC_MspInit+0x10c>)
 80006fe:	f001 fd01 	bl	8002104 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000702:	2301      	movs	r3, #1
 8000704:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000712:	230c      	movs	r3, #12
 8000714:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4619      	mov	r1, r3
 800071a:	4826      	ldr	r0, [pc, #152]	; (80007b4 <HAL_FMC_MspInit+0x110>)
 800071c:	f001 fcf2 	bl	8002104 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000720:	f248 1333 	movw	r3, #33075	; 0x8133
 8000724:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000726:	2302      	movs	r3, #2
 8000728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072e:	2303      	movs	r3, #3
 8000730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000732:	230c      	movs	r3, #12
 8000734:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4619      	mov	r1, r3
 800073a:	481f      	ldr	r0, [pc, #124]	; (80007b8 <HAL_FMC_MspInit+0x114>)
 800073c:	f001 fce2 	bl	8002104 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000740:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000744:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000752:	230c      	movs	r3, #12
 8000754:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4818      	ldr	r0, [pc, #96]	; (80007bc <HAL_FMC_MspInit+0x118>)
 800075c:	f001 fcd2 	bl	8002104 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000760:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000764:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000772:	230c      	movs	r3, #12
 8000774:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4619      	mov	r1, r3
 800077a:	4811      	ldr	r0, [pc, #68]	; (80007c0 <HAL_FMC_MspInit+0x11c>)
 800077c:	f001 fcc2 	bl	8002104 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000780:	2360      	movs	r3, #96	; 0x60
 8000782:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000790:	230c      	movs	r3, #12
 8000792:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4619      	mov	r1, r3
 8000798:	480a      	ldr	r0, [pc, #40]	; (80007c4 <HAL_FMC_MspInit+0x120>)
 800079a:	f001 fcb3 	bl	8002104 <HAL_GPIO_Init>
 800079e:	e000      	b.n	80007a2 <HAL_FMC_MspInit+0xfe>
    return;
 80007a0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000028 	.word	0x20000028
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40021400 	.word	0x40021400
 80007b4:	40020800 	.word	0x40020800
 80007b8:	40021800 	.word	0x40021800
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40020c00 	.word	0x40020c00
 80007c4:	40020400 	.word	0x40020400

080007c8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80007d0:	f7ff ff68 	bl	80006a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	; 0x38
 80007e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
 80007f6:	4b84      	ldr	r3, [pc, #528]	; (8000a08 <MX_GPIO_Init+0x22c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a83      	ldr	r2, [pc, #524]	; (8000a08 <MX_GPIO_Init+0x22c>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b81      	ldr	r3, [pc, #516]	; (8000a08 <MX_GPIO_Init+0x22c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	623b      	str	r3, [r7, #32]
 800080c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
 8000812:	4b7d      	ldr	r3, [pc, #500]	; (8000a08 <MX_GPIO_Init+0x22c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a7c      	ldr	r2, [pc, #496]	; (8000a08 <MX_GPIO_Init+0x22c>)
 8000818:	f043 0320 	orr.w	r3, r3, #32
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b7a      	ldr	r3, [pc, #488]	; (8000a08 <MX_GPIO_Init+0x22c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0320 	and.w	r3, r3, #32
 8000826:	61fb      	str	r3, [r7, #28]
 8000828:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	4b76      	ldr	r3, [pc, #472]	; (8000a08 <MX_GPIO_Init+0x22c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a75      	ldr	r2, [pc, #468]	; (8000a08 <MX_GPIO_Init+0x22c>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b73      	ldr	r3, [pc, #460]	; (8000a08 <MX_GPIO_Init+0x22c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	4b6f      	ldr	r3, [pc, #444]	; (8000a08 <MX_GPIO_Init+0x22c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a6e      	ldr	r2, [pc, #440]	; (8000a08 <MX_GPIO_Init+0x22c>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b6c      	ldr	r3, [pc, #432]	; (8000a08 <MX_GPIO_Init+0x22c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b68      	ldr	r3, [pc, #416]	; (8000a08 <MX_GPIO_Init+0x22c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a67      	ldr	r2, [pc, #412]	; (8000a08 <MX_GPIO_Init+0x22c>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b65      	ldr	r3, [pc, #404]	; (8000a08 <MX_GPIO_Init+0x22c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b61      	ldr	r3, [pc, #388]	; (8000a08 <MX_GPIO_Init+0x22c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a60      	ldr	r2, [pc, #384]	; (8000a08 <MX_GPIO_Init+0x22c>)
 8000888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b5e      	ldr	r3, [pc, #376]	; (8000a08 <MX_GPIO_Init+0x22c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b5a      	ldr	r3, [pc, #360]	; (8000a08 <MX_GPIO_Init+0x22c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a59      	ldr	r2, [pc, #356]	; (8000a08 <MX_GPIO_Init+0x22c>)
 80008a4:	f043 0310 	orr.w	r3, r3, #16
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b57      	ldr	r3, [pc, #348]	; (8000a08 <MX_GPIO_Init+0x22c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0310 	and.w	r3, r3, #16
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b53      	ldr	r3, [pc, #332]	; (8000a08 <MX_GPIO_Init+0x22c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a52      	ldr	r2, [pc, #328]	; (8000a08 <MX_GPIO_Init+0x22c>)
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b50      	ldr	r3, [pc, #320]	; (8000a08 <MX_GPIO_Init+0x22c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2116      	movs	r1, #22
 80008d6:	484d      	ldr	r0, [pc, #308]	; (8000a0c <MX_GPIO_Init+0x230>)
 80008d8:	f001 fdc0 	bl	800245c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2180      	movs	r1, #128	; 0x80
 80008e0:	484b      	ldr	r0, [pc, #300]	; (8000a10 <MX_GPIO_Init+0x234>)
 80008e2:	f001 fdbb 	bl	800245c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80008ec:	4849      	ldr	r0, [pc, #292]	; (8000a14 <MX_GPIO_Init+0x238>)
 80008ee:	f001 fdb5 	bl	800245c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80008f8:	4847      	ldr	r0, [pc, #284]	; (8000a18 <MX_GPIO_Init+0x23c>)
 80008fa:	f001 fdaf 	bl	800245c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80008fe:	2316      	movs	r3, #22
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	4619      	mov	r1, r3
 8000914:	483d      	ldr	r0, [pc, #244]	; (8000a0c <MX_GPIO_Init+0x230>)
 8000916:	f001 fbf5 	bl	8002104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091a:	2301      	movs	r3, #1
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091e:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <MX_GPIO_Init+0x240>)
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092a:	4619      	mov	r1, r3
 800092c:	4838      	ldr	r0, [pc, #224]	; (8000a10 <MX_GPIO_Init+0x234>)
 800092e:	f001 fbe9 	bl	8002104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000932:	f248 0306 	movw	r3, #32774	; 0x8006
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000938:	4b39      	ldr	r3, [pc, #228]	; (8000a20 <MX_GPIO_Init+0x244>)
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	4619      	mov	r1, r3
 8000946:	4832      	ldr	r0, [pc, #200]	; (8000a10 <MX_GPIO_Init+0x234>)
 8000948:	f001 fbdc 	bl	8002104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000960:	4619      	mov	r1, r3
 8000962:	482b      	ldr	r0, [pc, #172]	; (8000a10 <MX_GPIO_Init+0x234>)
 8000964:	f001 fbce 	bl	8002104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000968:	2320      	movs	r3, #32
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <MX_GPIO_Init+0x244>)
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000978:	4619      	mov	r1, r3
 800097a:	4824      	ldr	r0, [pc, #144]	; (8000a0c <MX_GPIO_Init+0x230>)
 800097c:	f001 fbc2 	bl	8002104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000980:	2304      	movs	r3, #4
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	4619      	mov	r1, r3
 8000992:	4824      	ldr	r0, [pc, #144]	; (8000a24 <MX_GPIO_Init+0x248>)
 8000994:	f001 fbb6 	bl	8002104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000998:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	4819      	ldr	r0, [pc, #100]	; (8000a14 <MX_GPIO_Init+0x238>)
 80009ae:	f001 fba9 	bl	8002104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80009b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c8:	4619      	mov	r1, r3
 80009ca:	4812      	ldr	r0, [pc, #72]	; (8000a14 <MX_GPIO_Init+0x238>)
 80009cc:	f001 fb9a 	bl	8002104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80009d0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	4619      	mov	r1, r3
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <MX_GPIO_Init+0x23c>)
 80009ea:	f001 fb8b 	bl	8002104 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2006      	movs	r0, #6
 80009f4:	f001 f8c2 	bl	8001b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009f8:	2006      	movs	r0, #6
 80009fa:	f001 f8db 	bl	8001bb4 <HAL_NVIC_EnableIRQ>

}
 80009fe:	bf00      	nop
 8000a00:	3738      	adds	r7, #56	; 0x38
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020000 	.word	0x40020000
 8000a14:	40020c00 	.word	0x40020c00
 8000a18:	40021800 	.word	0x40021800
 8000a1c:	10110000 	.word	0x10110000
 8000a20:	10120000 	.word	0x10120000
 8000a24:	40020400 	.word	0x40020400

08000a28 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit_IT(&huart5, Tx_data.buff, Tx_data.len);
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_GPIO_EXTI_Callback+0x30>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_GPIO_EXTI_Callback+0x30>)
 8000a38:	7812      	ldrb	r2, [r2, #0]
 8000a3a:	b292      	uxth	r2, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4807      	ldr	r0, [pc, #28]	; (8000a5c <HAL_GPIO_EXTI_Callback+0x34>)
 8000a40:	f005 f975 	bl	8005d2e <HAL_UART_Transmit_IT>

	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a4a:	f001 fd20 	bl	800248e <HAL_GPIO_TogglePin>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000038 	.word	0x20000038
 8000a5c:	200003a0 	.word	0x200003a0
 8000a60:	40021800 	.word	0x40021800

08000a64 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_I2C3_Init+0x74>)
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <MX_I2C3_Init+0x78>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <MX_I2C3_Init+0x74>)
 8000a70:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <MX_I2C3_Init+0x7c>)
 8000a72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_I2C3_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <MX_I2C3_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_I2C3_Init+0x74>)
 8000a82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a86:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_I2C3_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_I2C3_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a94:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_I2C3_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_I2C3_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <MX_I2C3_Init+0x74>)
 8000aa2:	f003 f831 	bl	8003b08 <HAL_I2C_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000aac:	f000 fb26 	bl	80010fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <MX_I2C3_Init+0x74>)
 8000ab4:	f003 f96c 	bl	8003d90 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000abe:	f000 fb1d 	bl	80010fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_I2C3_Init+0x74>)
 8000ac6:	f003 f99f 	bl	8003e08 <HAL_I2CEx_ConfigDigitalFilter>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000ad0:	f000 fb14 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000b8 	.word	0x200000b8
 8000adc:	40005c00 	.word	0x40005c00
 8000ae0:	000186a0 	.word	0x000186a0

08000ae4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a29      	ldr	r2, [pc, #164]	; (8000ba8 <HAL_I2C_MspInit+0xc4>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d14b      	bne.n	8000b9e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b28      	ldr	r3, [pc, #160]	; (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a27      	ldr	r2, [pc, #156]	; (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a20      	ldr	r2, [pc, #128]	; (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b44:	2312      	movs	r3, #18
 8000b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b50:	2304      	movs	r3, #4
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4815      	ldr	r0, [pc, #84]	; (8000bb0 <HAL_I2C_MspInit+0xcc>)
 8000b5c:	f001 fad2 	bl	8002104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b66:	2312      	movs	r3, #18
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b72:	2304      	movs	r3, #4
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <HAL_I2C_MspInit+0xd0>)
 8000b7e:	f001 fac1 	bl	8002104 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40005c00 	.word	0x40005c00
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08e      	sub	sp, #56	; 0x38
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2234      	movs	r2, #52	; 0x34
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f006 faff 	bl	80071c8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000bca:	4b39      	ldr	r3, [pc, #228]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000bcc:	4a39      	ldr	r2, [pc, #228]	; (8000cb4 <MX_LTDC_Init+0xfc>)
 8000bce:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000bd0:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000bd6:	4b36      	ldr	r3, [pc, #216]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bdc:	4b34      	ldr	r3, [pc, #208]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000be2:	4b33      	ldr	r3, [pc, #204]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000be8:	4b31      	ldr	r3, [pc, #196]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000bea:	2209      	movs	r2, #9
 8000bec:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000bee:	4b30      	ldr	r3, [pc, #192]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000bf4:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000bf6:	221d      	movs	r2, #29
 8000bf8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000bfa:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000c00:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000c02:	f240 120d 	movw	r2, #269	; 0x10d
 8000c06:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000c08:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000c0a:	f240 1243 	movw	r2, #323	; 0x143
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000c10:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000c12:	f240 1217 	movw	r2, #279	; 0x117
 8000c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000c18:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000c1a:	f240 1247 	movw	r2, #327	; 0x147
 8000c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c20:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c28:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c38:	481d      	ldr	r0, [pc, #116]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000c3a:	f003 f925 	bl	8003e88 <HAL_LTDC_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000c44:	f000 fa5a 	bl	80010fc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000c4c:	23f0      	movs	r3, #240	; 0xf0
 8000c4e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000c54:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c58:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c5e:	23ff      	movs	r3, #255	; 0xff
 8000c60:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c6a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c6c:	2307      	movs	r3, #7
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000c70:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000c76:	23f0      	movs	r3, #240	; 0xf0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000c7a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2200      	movs	r2, #0
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_LTDC_Init+0xf8>)
 8000c9a:	f003 fa87 	bl	80041ac <HAL_LTDC_ConfigLayer>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000ca4:	f000 fa2a 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	3738      	adds	r7, #56	; 0x38
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000010c 	.word	0x2000010c
 8000cb4:	40016800 	.word	0x40016800

08000cb8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a7b      	ldr	r2, [pc, #492]	; (8000ec4 <HAL_LTDC_MspInit+0x20c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	f040 80f0 	bne.w	8000ebc <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
 8000ce0:	4b79      	ldr	r3, [pc, #484]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce4:	4a78      	ldr	r2, [pc, #480]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000ce6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cea:	6453      	str	r3, [r2, #68]	; 0x44
 8000cec:	4b76      	ldr	r3, [pc, #472]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cf4:	623b      	str	r3, [r7, #32]
 8000cf6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
 8000cfc:	4b72      	ldr	r3, [pc, #456]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a71      	ldr	r2, [pc, #452]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000d02:	f043 0320 	orr.w	r3, r3, #32
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
 8000d08:	4b6f      	ldr	r3, [pc, #444]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f003 0320 	and.w	r3, r3, #32
 8000d10:	61fb      	str	r3, [r7, #28]
 8000d12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
 8000d18:	4b6b      	ldr	r3, [pc, #428]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	4a6a      	ldr	r2, [pc, #424]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6313      	str	r3, [r2, #48]	; 0x30
 8000d24:	4b68      	ldr	r3, [pc, #416]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	61bb      	str	r3, [r7, #24]
 8000d2e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	4b64      	ldr	r3, [pc, #400]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	4a63      	ldr	r2, [pc, #396]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d40:	4b61      	ldr	r3, [pc, #388]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	4b5d      	ldr	r3, [pc, #372]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	4a5c      	ldr	r2, [pc, #368]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5c:	4b5a      	ldr	r3, [pc, #360]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	4b56      	ldr	r3, [pc, #344]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	4a55      	ldr	r2, [pc, #340]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	4b53      	ldr	r3, [pc, #332]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	4b4f      	ldr	r3, [pc, #316]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	4a4e      	ldr	r2, [pc, #312]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000d8e:	f043 0308 	orr.w	r3, r3, #8
 8000d92:	6313      	str	r3, [r2, #48]	; 0x30
 8000d94:	4b4c      	ldr	r3, [pc, #304]	; (8000ec8 <HAL_LTDC_MspInit+0x210>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	f003 0308 	and.w	r3, r3, #8
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000db2:	230e      	movs	r3, #14
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4843      	ldr	r0, [pc, #268]	; (8000ecc <HAL_LTDC_MspInit+0x214>)
 8000dbe:	f001 f9a1 	bl	8002104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000dc2:	f641 0358 	movw	r3, #6232	; 0x1858
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dd4:	230e      	movs	r3, #14
 8000dd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	483c      	ldr	r0, [pc, #240]	; (8000ed0 <HAL_LTDC_MspInit+0x218>)
 8000de0:	f001 f990 	bl	8002104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000de4:	2303      	movs	r3, #3
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000df4:	2309      	movs	r3, #9
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4835      	ldr	r0, [pc, #212]	; (8000ed4 <HAL_LTDC_MspInit+0x21c>)
 8000e00:	f001 f980 	bl	8002104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000e04:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e16:	230e      	movs	r3, #14
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <HAL_LTDC_MspInit+0x21c>)
 8000e22:	f001 f96f 	bl	8002104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000e26:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e38:	230e      	movs	r3, #14
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	4825      	ldr	r0, [pc, #148]	; (8000ed8 <HAL_LTDC_MspInit+0x220>)
 8000e44:	f001 f95e 	bl	8002104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000e48:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e5a:	230e      	movs	r3, #14
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	481d      	ldr	r0, [pc, #116]	; (8000edc <HAL_LTDC_MspInit+0x224>)
 8000e66:	f001 f94d 	bl	8002104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000e6a:	2348      	movs	r3, #72	; 0x48
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e7a:	230e      	movs	r3, #14
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	4619      	mov	r1, r3
 8000e84:	4816      	ldr	r0, [pc, #88]	; (8000ee0 <HAL_LTDC_MspInit+0x228>)
 8000e86:	f001 f93d 	bl	8002104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000e8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e9c:	2309      	movs	r3, #9
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <HAL_LTDC_MspInit+0x220>)
 8000ea8:	f001 f92c 	bl	8002104 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2105      	movs	r1, #5
 8000eb0:	2058      	movs	r0, #88	; 0x58
 8000eb2:	f000 fe63 	bl	8001b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000eb6:	2058      	movs	r0, #88	; 0x58
 8000eb8:	f000 fe7c 	bl	8001bb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3738      	adds	r7, #56	; 0x38
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40016800 	.word	0x40016800
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40021400 	.word	0x40021400
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	40021800 	.word	0x40021800
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	40020c00 	.word	0x40020c00

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b5b0      	push	{r4, r5, r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f000 fd29 	bl	8001940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f859 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f7ff fc73 	bl	80007dc <MX_GPIO_Init>
  MX_CRC_Init();
 8000ef6:	f7ff faf5 	bl	80004e4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000efa:	f7ff fb29 	bl	8000550 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000efe:	f7ff fb81 	bl	8000604 <MX_FMC_Init>
  MX_I2C3_Init();
 8000f02:	f7ff fdaf 	bl	8000a64 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000f06:	f7ff fe57 	bl	8000bb8 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000f0a:	f000 f95d 	bl	80011c8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000f0e:	f000 fad1 	bl	80014b4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f12:	f000 fb6b 	bl	80015ec <MX_USART1_UART_Init>
  MX_UART5_Init();
 8000f16:	f000 fb3f 	bl	8001598 <MX_UART5_Init>
  MX_USB_OTG_HS_HCD_Init();
 8000f1a:	f000 fc5d 	bl	80017d8 <MX_USB_OTG_HS_HCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t str[]="Hello Clean Yang!!!!!\n";
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <main+0xa8>)
 8000f20:	463c      	mov	r4, r7
 8000f22:	461d      	mov	r5, r3
 8000f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f2c:	6020      	str	r0, [r4, #0]
 8000f2e:	3404      	adds	r4, #4
 8000f30:	8021      	strh	r1, [r4, #0]
 8000f32:	3402      	adds	r4, #2
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	7023      	strb	r3, [r4, #0]
  uint8_t len = (sizeof(str)/sizeof(str[0]))-1;
 8000f38:	2316      	movs	r3, #22
 8000f3a:	75fb      	strb	r3, [r7, #23]

  Tx_data.len=len;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <main+0xac>)
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	7013      	strb	r3, [r2, #0]
  Tx_data.buff=str;
 8000f42:	4a13      	ldr	r2, [pc, #76]	; (8000f90 <main+0xac>)
 8000f44:	463b      	mov	r3, r7
 8000f46:	6053      	str	r3, [r2, #4]


  Ser_Queue.Front=-1;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <main+0xb0>)
 8000f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f4e:	801a      	strh	r2, [r3, #0]
  Ser_Queue.Rear=-1;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <main+0xb0>)
 8000f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f56:	805a      	strh	r2, [r3, #2]

  HAL_UART_Receive_IT(&huart5, rec_buff, 1);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	490f      	ldr	r1, [pc, #60]	; (8000f98 <main+0xb4>)
 8000f5c:	480f      	ldr	r0, [pc, #60]	; (8000f9c <main+0xb8>)
 8000f5e:	f004 ff2b 	bl	8005db8 <HAL_UART_Receive_IT>
//	  HAL_Delay(1000);
//
//	  //HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
//	  LD3_GPIO_Port->BSRR|=(uint32_t)LD3_Pin<<16;
//	  HAL_Delay(1000);
	  if (buff_is_ready())
 8000f62:	f000 f8a3 	bl	80010ac <buff_is_ready>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0fa      	beq.n	8000f62 <main+0x7e>
//
//			 tr_buff[0]= deQueue();
//			 HAL_UART_Transmit(&huart5, tr_buff, 1,100);
//			 //HAL_UART_Transmit_IT(&huart5, tr_buff, 1);
//		 }
		  HAL_UART_Transmit_IT(&huart5,Ser_Queue.Buffer, Ser_Queue.Rear+1);
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <main+0xb0>)
 8000f6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	3301      	adds	r3, #1
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4909      	ldr	r1, [pc, #36]	; (8000fa0 <main+0xbc>)
 8000f7c:	4807      	ldr	r0, [pc, #28]	; (8000f9c <main+0xb8>)
 8000f7e:	f004 fed6 	bl	8005d2e <HAL_UART_Transmit_IT>
		  reset_Queue(&Ser_Queue);
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <main+0xb0>)
 8000f84:	f000 f8e0 	bl	8001148 <reset_Queue>
	  if (buff_is_ready())
 8000f88:	e7eb      	b.n	8000f62 <main+0x7e>
 8000f8a:	bf00      	nop
 8000f8c:	080071f0 	.word	0x080071f0
 8000f90:	20000038 	.word	0x20000038
 8000f94:	200001b4 	.word	0x200001b4
 8000f98:	2000002c 	.word	0x2000002c
 8000f9c:	200003a0 	.word	0x200003a0
 8000fa0:	200001b8 	.word	0x200001b8

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0a0      	sub	sp, #128	; 0x80
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fae:	2230      	movs	r2, #48	; 0x30
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f006 f908 	bl	80071c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2230      	movs	r2, #48	; 0x30
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f006 f8f9 	bl	80071c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <SystemClock_Config+0x100>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	4a31      	ldr	r2, [pc, #196]	; (80010a4 <SystemClock_Config+0x100>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <SystemClock_Config+0x100>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <SystemClock_Config+0x104>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ffe:	4a2a      	ldr	r2, [pc, #168]	; (80010a8 <SystemClock_Config+0x104>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <SystemClock_Config+0x104>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001012:	2301      	movs	r3, #1
 8001014:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800101a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101c:	2302      	movs	r3, #2
 800101e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001020:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001024:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001026:	2304      	movs	r3, #4
 8001028:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 800102a:	2348      	movs	r3, #72	; 0x48
 800102c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800102e:	2302      	movs	r3, #2
 8001030:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001032:	2303      	movs	r3, #3
 8001034:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001036:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800103a:	4618      	mov	r0, r3
 800103c:	f003 fa8c 	bl	8004558 <HAL_RCC_OscConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001046:	f000 f859 	bl	80010fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104a:	230f      	movs	r3, #15
 800104c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104e:	2302      	movs	r3, #2
 8001050:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001060:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001064:	2102      	movs	r1, #2
 8001066:	4618      	mov	r0, r3
 8001068:	f003 fcee 	bl	8004a48 <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001072:	f000 f843 	bl	80010fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001076:	2308      	movs	r3, #8
 8001078:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800107a:	2332      	movs	r3, #50	; 0x32
 800107c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800107e:	2302      	movs	r3, #2
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001082:	2300      	movs	r3, #0
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4618      	mov	r0, r3
 800108c:	f003 ff0a 	bl	8004ea4 <HAL_RCCEx_PeriphCLKConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001096:	f000 f831 	bl	80010fc <Error_Handler>
  }
}
 800109a:	bf00      	nop
 800109c:	3780      	adds	r7, #128	; 0x80
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40007000 	.word	0x40007000

080010ac <buff_is_ready>:

/* USER CODE BEGIN 4 */

uint8_t buff_is_ready(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
	if(Ser_Queue.Buffer[Ser_Queue.Rear]=='\n')
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <buff_is_ready+0x28>)
 80010b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <buff_is_ready+0x28>)
 80010ba:	4413      	add	r3, r2
 80010bc:	791b      	ldrb	r3, [r3, #4]
 80010be:	2b0a      	cmp	r3, #10
 80010c0:	d101      	bne.n	80010c6 <buff_is_ready+0x1a>
	{
		return 1;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <buff_is_ready+0x1c>

	}
	return 0;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200001b4 	.word	0x200001b4

080010d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ea:	f000 fc4b 	bl	8001984 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40001000 	.word	0x40001000

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	e7fe      	b.n	8001104 <Error_Handler+0x8>

08001106 <isQ_Full>:

#include "queue.h"


uint8_t isQ_Full(Queue *Q)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
	if ((Q->Front==Q->Rear+1)||(Q->Front==0&&Q->Rear==SIZE-1))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001114:	461a      	mov	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800111c:	3301      	adds	r3, #1
 800111e:	429a      	cmp	r2, r3
 8001120:	d009      	beq.n	8001136 <isQ_Full+0x30>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d106      	bne.n	800113a <isQ_Full+0x34>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001132:	2bff      	cmp	r3, #255	; 0xff
 8001134:	d101      	bne.n	800113a <isQ_Full+0x34>
	{
		return 1;
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <isQ_Full+0x36>
	}
	return 0;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <reset_Queue>:
	return 0;

}

void reset_Queue(Queue *Q)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	Q->Front=-1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001156:	801a      	strh	r2, [r3, #0]
	Q->Rear=-1;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800115e:	805a      	strh	r2, [r3, #2]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <enQueue>:


void enQueue(Queue *Q,uint8_t element)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	70fb      	strb	r3, [r7, #3]
	if (!isQ_Full(Q))
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ffc4 	bl	8001106 <isQ_Full>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d11c      	bne.n	80011be <enQueue+0x52>
	{
		if (Q->Front==-1){Q->Front=0;}
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800118e:	d102      	bne.n	8001196 <enQueue+0x2a>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	801a      	strh	r2, [r3, #0]

		Q->Rear= (Q->Rear+1)%SIZE;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800119c:	3301      	adds	r3, #1
 800119e:	425a      	negs	r2, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	bf58      	it	pl
 80011a6:	4253      	negpl	r3, r2
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	805a      	strh	r2, [r3, #2]
		Q->Buffer[Q->Rear]= element;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011b4:	461a      	mov	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	78fa      	ldrb	r2, [r7, #3]
 80011bc:	711a      	strb	r2, [r3, #4]


	}

}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_SPI5_Init+0x64>)
 80011ce:	4a18      	ldr	r2, [pc, #96]	; (8001230 <MX_SPI5_Init+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_SPI5_Init+0x64>)
 80011d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_SPI5_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_SPI5_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_SPI5_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_SPI5_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_SPI5_Init+0x64>)
 80011f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_SPI5_Init+0x64>)
 80011fc:	2218      	movs	r2, #24
 80011fe:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_SPI5_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_SPI5_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_SPI5_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_SPI5_Init+0x64>)
 8001214:	220a      	movs	r2, #10
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_SPI5_Init+0x64>)
 800121a:	f004 f835 	bl	8005288 <HAL_SPI_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001224:	f7ff ff6a 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200002b8 	.word	0x200002b8
 8001230:	40015000 	.word	0x40015000

08001234 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <HAL_SPI_MspInit+0x84>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d12c      	bne.n	80012b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_SPI_MspInit+0x88>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a17      	ldr	r2, [pc, #92]	; (80012bc <HAL_SPI_MspInit+0x88>)
 8001260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_SPI_MspInit+0x88>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_SPI_MspInit+0x88>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a10      	ldr	r2, [pc, #64]	; (80012bc <HAL_SPI_MspInit+0x88>)
 800127c:	f043 0320 	orr.w	r3, r3, #32
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_SPI_MspInit+0x88>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0320 	and.w	r3, r3, #32
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800128e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80012a0:	2305      	movs	r3, #5
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <HAL_SPI_MspInit+0x8c>)
 80012ac:	f000 ff2a 	bl	8002104 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	; 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40015000 	.word	0x40015000
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40021400 	.word	0x40021400

080012c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_MspInit+0x4c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <HAL_MspInit+0x4c>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_MspInit+0x4c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_MspInit+0x4c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a08      	ldr	r2, [pc, #32]	; (8001310 <HAL_MspInit+0x4c>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_MspInit+0x4c>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800

08001314 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	2036      	movs	r0, #54	; 0x36
 800132a:	f000 fc27 	bl	8001b7c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800132e:	2036      	movs	r0, #54	; 0x36
 8001330:	f000 fc40 	bl	8001bb4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <HAL_InitTick+0xa4>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	4a1e      	ldr	r2, [pc, #120]	; (80013b8 <HAL_InitTick+0xa4>)
 800133e:	f043 0310 	orr.w	r3, r3, #16
 8001342:	6413      	str	r3, [r2, #64]	; 0x40
 8001344:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <HAL_InitTick+0xa4>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	f003 0310 	and.w	r3, r3, #16
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001350:	f107 0210 	add.w	r2, r7, #16
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f003 fd70 	bl	8004e40 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001360:	f003 fd46 	bl	8004df0 <HAL_RCC_GetPCLK1Freq>
 8001364:	4603      	mov	r3, r0
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136c:	4a13      	ldr	r2, [pc, #76]	; (80013bc <HAL_InitTick+0xa8>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	0c9b      	lsrs	r3, r3, #18
 8001374:	3b01      	subs	r3, #1
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_InitTick+0xac>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <HAL_InitTick+0xb0>)
 800137c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_InitTick+0xac>)
 8001380:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001384:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001386:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <HAL_InitTick+0xac>)
 8001388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_InitTick+0xac>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_InitTick+0xac>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001398:	4809      	ldr	r0, [pc, #36]	; (80013c0 <HAL_InitTick+0xac>)
 800139a:	f003 fffe 	bl	800539a <HAL_TIM_Base_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d104      	bne.n	80013ae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013a4:	4806      	ldr	r0, [pc, #24]	; (80013c0 <HAL_InitTick+0xac>)
 80013a6:	f004 f847 	bl	8005438 <HAL_TIM_Base_Start_IT>
 80013aa:	4603      	mov	r3, r0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3730      	adds	r7, #48	; 0x30
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	431bde83 	.word	0x431bde83
 80013c0:	20000310 	.word	0x20000310
 80013c4:	40001000 	.word	0x40001000

080013c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <NMI_Handler+0x4>

080013ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <MemManage_Handler+0x4>

080013da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <BusFault_Handler+0x4>

080013e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <UsageFault_Handler+0x4>

080013e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001422:	2001      	movs	r0, #1
 8001424:	f001 f84e 	bl	80024c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <UART5_IRQHandler+0x10>)
 8001432:	f004 fcf1 	bl	8005e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200003a0 	.word	0x200003a0

08001440 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <TIM6_DAC_IRQHandler+0x10>)
 8001446:	f004 f867 	bl	8005518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000310 	.word	0x20000310

08001454 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <OTG_HS_IRQHandler+0x10>)
 800145a:	f001 f8ad 	bl	80025b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000428 	.word	0x20000428

08001468 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <LTDC_IRQHandler+0x10>)
 800146e:	f002 fddb 	bl	8004028 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000010c 	.word	0x2000010c

0800147c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <DMA2D_IRQHandler+0x10>)
 8001482:	f000 fc9c 	bl	8001dbe <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000044 	.word	0x20000044

08001490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <SystemInit+0x20>)
 8001496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <SystemInit+0x20>)
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	463b      	mov	r3, r7
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <MX_TIM1_Init+0x98>)
 80014d2:	4a1f      	ldr	r2, [pc, #124]	; (8001550 <MX_TIM1_Init+0x9c>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <MX_TIM1_Init+0x98>)
 80014d8:	2200      	movs	r2, #0
 80014da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <MX_TIM1_Init+0x98>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <MX_TIM1_Init+0x98>)
 80014e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <MX_TIM1_Init+0x98>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <MX_TIM1_Init+0x98>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <MX_TIM1_Init+0x98>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014fc:	4813      	ldr	r0, [pc, #76]	; (800154c <MX_TIM1_Init+0x98>)
 80014fe:	f003 ff4c 	bl	800539a <HAL_TIM_Base_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001508:	f7ff fdf8 	bl	80010fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001510:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	4619      	mov	r1, r3
 8001518:	480c      	ldr	r0, [pc, #48]	; (800154c <MX_TIM1_Init+0x98>)
 800151a:	f004 f905 	bl	8005728 <HAL_TIM_ConfigClockSource>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001524:	f7ff fdea 	bl	80010fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001530:	463b      	mov	r3, r7
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_TIM1_Init+0x98>)
 8001536:	f004 fb1d 	bl	8005b74 <HAL_TIMEx_MasterConfigSynchronization>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001540:	f7ff fddc 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000358 	.word	0x20000358
 8001550:	40010000 	.word	0x40010000

08001554 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <HAL_TIM_Base_MspInit+0x3c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d10d      	bne.n	8001582 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_TIM_Base_MspInit+0x40>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <HAL_TIM_Base_MspInit+0x40>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <HAL_TIM_Base_MspInit+0x40>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40010000 	.word	0x40010000
 8001594:	40023800 	.word	0x40023800

08001598 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_UART5_Init+0x4c>)
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <MX_UART5_Init+0x50>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <MX_UART5_Init+0x4c>)
 80015a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_UART5_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_UART5_Init+0x4c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_UART5_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_UART5_Init+0x4c>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_UART5_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_UART5_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_UART5_Init+0x4c>)
 80015d0:	f004 fb60 	bl	8005c94 <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80015da:	f7ff fd8f 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200003a0 	.word	0x200003a0
 80015e8:	40005000 	.word	0x40005000

080015ec <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <MX_USART1_UART_Init+0x50>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 80015f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 8001624:	f004 fb36 	bl	8005c94 <HAL_UART_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800162e:	f7ff fd65 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200003e4 	.word	0x200003e4
 800163c:	40011000 	.word	0x40011000

08001640 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08c      	sub	sp, #48	; 0x30
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a46      	ldr	r2, [pc, #280]	; (8001778 <HAL_UART_MspInit+0x138>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d153      	bne.n	800170a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	4b45      	ldr	r3, [pc, #276]	; (800177c <HAL_UART_MspInit+0x13c>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a44      	ldr	r2, [pc, #272]	; (800177c <HAL_UART_MspInit+0x13c>)
 800166c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b42      	ldr	r3, [pc, #264]	; (800177c <HAL_UART_MspInit+0x13c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800167a:	61bb      	str	r3, [r7, #24]
 800167c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	4b3e      	ldr	r3, [pc, #248]	; (800177c <HAL_UART_MspInit+0x13c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a3d      	ldr	r2, [pc, #244]	; (800177c <HAL_UART_MspInit+0x13c>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <HAL_UART_MspInit+0x13c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b37      	ldr	r3, [pc, #220]	; (800177c <HAL_UART_MspInit+0x13c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a36      	ldr	r2, [pc, #216]	; (800177c <HAL_UART_MspInit+0x13c>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b34      	ldr	r3, [pc, #208]	; (800177c <HAL_UART_MspInit+0x13c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80016c8:	2308      	movs	r3, #8
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	4619      	mov	r1, r3
 80016d2:	482b      	ldr	r0, [pc, #172]	; (8001780 <HAL_UART_MspInit+0x140>)
 80016d4:	f000 fd16 	bl	8002104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016d8:	2304      	movs	r3, #4
 80016da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e4:	2303      	movs	r3, #3
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80016e8:	2308      	movs	r3, #8
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	4619      	mov	r1, r3
 80016f2:	4824      	ldr	r0, [pc, #144]	; (8001784 <HAL_UART_MspInit+0x144>)
 80016f4:	f000 fd06 	bl	8002104 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2100      	movs	r1, #0
 80016fc:	2035      	movs	r0, #53	; 0x35
 80016fe:	f000 fa3d 	bl	8001b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001702:	2035      	movs	r0, #53	; 0x35
 8001704:	f000 fa56 	bl	8001bb4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001708:	e031      	b.n	800176e <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART1)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <HAL_UART_MspInit+0x148>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d12c      	bne.n	800176e <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_UART_MspInit+0x13c>)
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	4a17      	ldr	r2, [pc, #92]	; (800177c <HAL_UART_MspInit+0x13c>)
 800171e:	f043 0310 	orr.w	r3, r3, #16
 8001722:	6453      	str	r3, [r2, #68]	; 0x44
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_UART_MspInit+0x13c>)
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_UART_MspInit+0x13c>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4a10      	ldr	r2, [pc, #64]	; (800177c <HAL_UART_MspInit+0x13c>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6313      	str	r3, [r2, #48]	; 0x30
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_UART_MspInit+0x13c>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800174c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800175e:	2307      	movs	r3, #7
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	4619      	mov	r1, r3
 8001768:	4808      	ldr	r0, [pc, #32]	; (800178c <HAL_UART_MspInit+0x14c>)
 800176a:	f000 fccb 	bl	8002104 <HAL_GPIO_Init>
}
 800176e:	bf00      	nop
 8001770:	3730      	adds	r7, #48	; 0x30
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40005000 	.word	0x40005000
 800177c:	40023800 	.word	0x40023800
 8001780:	40020800 	.word	0x40020800
 8001784:	40020c00 	.word	0x40020c00
 8001788:	40011000 	.word	0x40011000
 800178c:	40020000 	.word	0x40020000

08001790 <HAL_UART_TxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);

	enQueue(&Ser_Queue, rec_buff[0]);
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <HAL_UART_RxCpltCallback+0x28>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4619      	mov	r1, r3
 80017b2:	4807      	ldr	r0, [pc, #28]	; (80017d0 <HAL_UART_RxCpltCallback+0x2c>)
 80017b4:	f7ff fcda 	bl	800116c <enQueue>
	HAL_UART_Receive_IT(&huart5, rec_buff, 1);
 80017b8:	2201      	movs	r2, #1
 80017ba:	4904      	ldr	r1, [pc, #16]	; (80017cc <HAL_UART_RxCpltCallback+0x28>)
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <HAL_UART_RxCpltCallback+0x30>)
 80017be:	f004 fafb 	bl	8005db8 <HAL_UART_Receive_IT>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000002c 	.word	0x2000002c
 80017d0:	200001b4 	.word	0x200001b4
 80017d4:	200003a0 	.word	0x200003a0

080017d8 <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80017de:	4a13      	ldr	r2, [pc, #76]	; (800182c <MX_USB_OTG_HS_HCD_Init+0x54>)
 80017e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80017e4:	220c      	movs	r2, #12
 80017e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80017f6:	2202      	movs	r2, #2
 80017f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001808:	2200      	movs	r2, #0
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_USB_OTG_HS_HCD_Init+0x50>)
 800180e:	2200      	movs	r2, #0
 8001810:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001814:	f000 fe6e 	bl	80024f4 <HAL_HCD_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 800181e:	f7ff fc6d 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000428 	.word	0x20000428
 800182c:	40040000 	.word	0x40040000

08001830 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a24      	ldr	r2, [pc, #144]	; (80018e0 <HAL_HCD_MspInit+0xb0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d141      	bne.n	80018d6 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <HAL_HCD_MspInit+0xb4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a22      	ldr	r2, [pc, #136]	; (80018e4 <HAL_HCD_MspInit+0xb4>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_HCD_MspInit+0xb4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800186e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001880:	230c      	movs	r3, #12
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4817      	ldr	r0, [pc, #92]	; (80018e8 <HAL_HCD_MspInit+0xb8>)
 800188c:	f000 fc3a 	bl	8002104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	4810      	ldr	r0, [pc, #64]	; (80018e8 <HAL_HCD_MspInit+0xb8>)
 80018a6:	f000 fc2d 	bl	8002104 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <HAL_HCD_MspInit+0xb4>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a0c      	ldr	r2, [pc, #48]	; (80018e4 <HAL_HCD_MspInit+0xb4>)
 80018b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HAL_HCD_MspInit+0xb4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	204d      	movs	r0, #77	; 0x4d
 80018cc:	f000 f956 	bl	8001b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80018d0:	204d      	movs	r0, #77	; 0x4d
 80018d2:	f000 f96f 	bl	8001bb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	; 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40040000 	.word	0x40040000
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020400 	.word	0x40020400

080018ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001924 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f0:	480d      	ldr	r0, [pc, #52]	; (8001928 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018f2:	490e      	ldr	r1, [pc, #56]	; (800192c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018f4:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001908:	4c0b      	ldr	r4, [pc, #44]	; (8001938 <LoopFillZerobss+0x26>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001916:	f7ff fdbb 	bl	8001490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800191a:	f005 fc31 	bl	8007180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191e:	f7ff fae1 	bl	8000ee4 <main>
  bx  lr    
 8001922:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001924:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800192c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001930:	08007230 	.word	0x08007230
  ldr r2, =_sbss
 8001934:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001938:	20000730 	.word	0x20000730

0800193c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800193c:	e7fe      	b.n	800193c <ADC_IRQHandler>
	...

08001940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_Init+0x40>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <HAL_Init+0x40>)
 800194a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_Init+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <HAL_Init+0x40>)
 8001956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <HAL_Init+0x40>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a07      	ldr	r2, [pc, #28]	; (8001980 <HAL_Init+0x40>)
 8001962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001968:	2003      	movs	r0, #3
 800196a:	f000 f8fc 	bl	8001b66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196e:	2000      	movs	r0, #0
 8001970:	f7ff fcd0 	bl	8001314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001974:	f7ff fca6 	bl	80012c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023c00 	.word	0x40023c00

08001984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x20>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_IncTick+0x24>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <HAL_IncTick+0x24>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000008 	.word	0x20000008
 80019a8:	2000072c 	.word	0x2000072c

080019ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return uwTick;
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <HAL_GetTick+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	2000072c 	.word	0x2000072c

080019c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff ffee 	bl	80019ac <HAL_GetTick>
 80019d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d005      	beq.n	80019ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_Delay+0x44>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ea:	bf00      	nop
 80019ec:	f7ff ffde 	bl	80019ac <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d8f7      	bhi.n	80019ec <HAL_Delay+0x28>
  {
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000008 	.word	0x20000008

08001a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60d3      	str	r3, [r2, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <__NVIC_GetPriorityGrouping+0x18>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	f003 0307 	and.w	r3, r3, #7
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db0b      	blt.n	8001a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	4907      	ldr	r1, [pc, #28]	; (8001aa8 <__NVIC_EnableIRQ+0x38>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	2001      	movs	r0, #1
 8001a92:	fa00 f202 	lsl.w	r2, r0, r2
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000e100 	.word	0xe000e100

08001aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	6039      	str	r1, [r7, #0]
 8001ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	db0a      	blt.n	8001ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	490c      	ldr	r1, [pc, #48]	; (8001af8 <__NVIC_SetPriority+0x4c>)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	0112      	lsls	r2, r2, #4
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	440b      	add	r3, r1
 8001ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad4:	e00a      	b.n	8001aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4908      	ldr	r1, [pc, #32]	; (8001afc <__NVIC_SetPriority+0x50>)
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	3b04      	subs	r3, #4
 8001ae4:	0112      	lsls	r2, r2, #4
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	440b      	add	r3, r1
 8001aea:	761a      	strb	r2, [r3, #24]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000e100 	.word	0xe000e100
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f1c3 0307 	rsb	r3, r3, #7
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	bf28      	it	cs
 8001b1e:	2304      	movcs	r3, #4
 8001b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3304      	adds	r3, #4
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d902      	bls.n	8001b30 <NVIC_EncodePriority+0x30>
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3b03      	subs	r3, #3
 8001b2e:	e000      	b.n	8001b32 <NVIC_EncodePriority+0x32>
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	f04f 32ff 	mov.w	r2, #4294967295
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	401a      	ands	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b48:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	43d9      	mvns	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	4313      	orrs	r3, r2
         );
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3724      	adds	r7, #36	; 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ff4c 	bl	8001a0c <__NVIC_SetPriorityGrouping>
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8e:	f7ff ff61 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8001b92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	68b9      	ldr	r1, [r7, #8]
 8001b98:	6978      	ldr	r0, [r7, #20]
 8001b9a:	f7ff ffb1 	bl	8001b00 <NVIC_EncodePriority>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff80 	bl	8001aac <__NVIC_SetPriority>
}
 8001bac:	bf00      	nop
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff54 	bl	8001a70 <__NVIC_EnableIRQ>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00e      	b.n	8001c00 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	795b      	ldrb	r3, [r3, #5]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d105      	bne.n	8001bf8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7fe fc8a 	bl	800050c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c16:	f7ff fec9 	bl	80019ac <HAL_GetTick>
 8001c1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d008      	beq.n	8001c3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e052      	b.n	8001ce0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0216 	bic.w	r2, r2, #22
 8001c48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d103      	bne.n	8001c6a <HAL_DMA_Abort+0x62>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d007      	beq.n	8001c7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0208 	bic.w	r2, r2, #8
 8001c78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c8a:	e013      	b.n	8001cb4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c8c:	f7ff fe8e 	bl	80019ac <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b05      	cmp	r3, #5
 8001c98:	d90c      	bls.n	8001cb4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2203      	movs	r2, #3
 8001cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e015      	b.n	8001ce0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1e4      	bne.n	8001c8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc6:	223f      	movs	r2, #63	; 0x3f
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d004      	beq.n	8001d06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00c      	b.n	8001d20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2205      	movs	r2, #5
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0201 	bic.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e03b      	b.n	8001db6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7fe fc2e 	bl	80005b4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7c:	f023 0107 	bic.w	r1, r3, #7
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68d1      	ldr	r1, [r2, #12]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	430b      	orrs	r3, r1
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d026      	beq.n	8001e2e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d021      	beq.n	8001e2e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfe:	f043 0201 	orr.w	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2204      	movs	r2, #4
 8001e12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f003 0320 	and.w	r3, r3, #32
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d026      	beq.n	8001e86 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d021      	beq.n	8001e86 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e50:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2220      	movs	r2, #32
 8001e58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5e:	f043 0202 	orr.w	r2, r3, #2
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d026      	beq.n	8001ede <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d021      	beq.n	8001ede <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ea8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2208      	movs	r2, #8
 8001eb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb6:	f043 0204 	orr.w	r2, r3, #4
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d013      	beq.n	8001f10 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00e      	beq.n	8001f10 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f00:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2204      	movs	r2, #4
 8001f08:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f853 	bl	8001fb6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d024      	beq.n	8001f64 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01f      	beq.n	8001f64 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f32:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01f      	beq.n	8001fae <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01a      	beq.n	8001fae <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f86:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f80e 	bl	8001fca <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_DMA2D_ConfigLayer+0x20>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e079      	b.n	80020f4 <HAL_DMA2D_ConfigLayer+0x114>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	3318      	adds	r3, #24
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	041b      	lsls	r3, r3, #16
 8002026:	4313      	orrs	r3, r2
 8002028:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800202a:	4b35      	ldr	r3, [pc, #212]	; (8002100 <HAL_DMA2D_ConfigLayer+0x120>)
 800202c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b0a      	cmp	r3, #10
 8002034:	d003      	beq.n	800203e <HAL_DMA2D_ConfigLayer+0x5e>
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b09      	cmp	r3, #9
 800203c:	d107      	bne.n	800204e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	e005      	b.n	800205a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	061b      	lsls	r3, r3, #24
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	4313      	orrs	r3, r2
 8002058:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d120      	bne.n	80020a2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	43db      	mvns	r3, r3
 800206a:	ea02 0103 	and.w	r1, r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	430a      	orrs	r2, r1
 8002076:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b0a      	cmp	r3, #10
 8002088:	d003      	beq.n	8002092 <HAL_DMA2D_ConfigLayer+0xb2>
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b09      	cmp	r3, #9
 8002090:	d127      	bne.n	80020e2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800209e:	629a      	str	r2, [r3, #40]	; 0x28
 80020a0:	e01f      	b.n	80020e2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	69da      	ldr	r2, [r3, #28]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	ea02 0103 	and.w	r1, r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b0a      	cmp	r3, #10
 80020ca:	d003      	beq.n	80020d4 <HAL_DMA2D_ConfigLayer+0xf4>
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b09      	cmp	r3, #9
 80020d2:	d106      	bne.n	80020e2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80020e0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	371c      	adds	r7, #28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	ff03000f 	.word	0xff03000f

08002104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	e177      	b.n	8002410 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002120:	2201      	movs	r2, #1
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	429a      	cmp	r2, r3
 800213a:	f040 8166 	bne.w	800240a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d005      	beq.n	8002156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002152:	2b02      	cmp	r3, #2
 8002154:	d130      	bne.n	80021b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	2203      	movs	r2, #3
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800218c:	2201      	movs	r2, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 0201 	and.w	r2, r3, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d017      	beq.n	80021f4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d123      	bne.n	8002248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	08da      	lsrs	r2, r3, #3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3208      	adds	r2, #8
 8002208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	220f      	movs	r2, #15
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	08da      	lsrs	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3208      	adds	r2, #8
 8002242:	69b9      	ldr	r1, [r7, #24]
 8002244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0203 	and.w	r2, r3, #3
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 80c0 	beq.w	800240a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b66      	ldr	r3, [pc, #408]	; (8002428 <HAL_GPIO_Init+0x324>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	4a65      	ldr	r2, [pc, #404]	; (8002428 <HAL_GPIO_Init+0x324>)
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	6453      	str	r3, [r2, #68]	; 0x44
 800229a:	4b63      	ldr	r3, [pc, #396]	; (8002428 <HAL_GPIO_Init+0x324>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022a6:	4a61      	ldr	r2, [pc, #388]	; (800242c <HAL_GPIO_Init+0x328>)
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	3302      	adds	r3, #2
 80022ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	220f      	movs	r2, #15
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a58      	ldr	r2, [pc, #352]	; (8002430 <HAL_GPIO_Init+0x32c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d037      	beq.n	8002342 <HAL_GPIO_Init+0x23e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a57      	ldr	r2, [pc, #348]	; (8002434 <HAL_GPIO_Init+0x330>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d031      	beq.n	800233e <HAL_GPIO_Init+0x23a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a56      	ldr	r2, [pc, #344]	; (8002438 <HAL_GPIO_Init+0x334>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d02b      	beq.n	800233a <HAL_GPIO_Init+0x236>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a55      	ldr	r2, [pc, #340]	; (800243c <HAL_GPIO_Init+0x338>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d025      	beq.n	8002336 <HAL_GPIO_Init+0x232>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a54      	ldr	r2, [pc, #336]	; (8002440 <HAL_GPIO_Init+0x33c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d01f      	beq.n	8002332 <HAL_GPIO_Init+0x22e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a53      	ldr	r2, [pc, #332]	; (8002444 <HAL_GPIO_Init+0x340>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d019      	beq.n	800232e <HAL_GPIO_Init+0x22a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a52      	ldr	r2, [pc, #328]	; (8002448 <HAL_GPIO_Init+0x344>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <HAL_GPIO_Init+0x226>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a51      	ldr	r2, [pc, #324]	; (800244c <HAL_GPIO_Init+0x348>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00d      	beq.n	8002326 <HAL_GPIO_Init+0x222>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a50      	ldr	r2, [pc, #320]	; (8002450 <HAL_GPIO_Init+0x34c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d007      	beq.n	8002322 <HAL_GPIO_Init+0x21e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4f      	ldr	r2, [pc, #316]	; (8002454 <HAL_GPIO_Init+0x350>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d101      	bne.n	800231e <HAL_GPIO_Init+0x21a>
 800231a:	2309      	movs	r3, #9
 800231c:	e012      	b.n	8002344 <HAL_GPIO_Init+0x240>
 800231e:	230a      	movs	r3, #10
 8002320:	e010      	b.n	8002344 <HAL_GPIO_Init+0x240>
 8002322:	2308      	movs	r3, #8
 8002324:	e00e      	b.n	8002344 <HAL_GPIO_Init+0x240>
 8002326:	2307      	movs	r3, #7
 8002328:	e00c      	b.n	8002344 <HAL_GPIO_Init+0x240>
 800232a:	2306      	movs	r3, #6
 800232c:	e00a      	b.n	8002344 <HAL_GPIO_Init+0x240>
 800232e:	2305      	movs	r3, #5
 8002330:	e008      	b.n	8002344 <HAL_GPIO_Init+0x240>
 8002332:	2304      	movs	r3, #4
 8002334:	e006      	b.n	8002344 <HAL_GPIO_Init+0x240>
 8002336:	2303      	movs	r3, #3
 8002338:	e004      	b.n	8002344 <HAL_GPIO_Init+0x240>
 800233a:	2302      	movs	r3, #2
 800233c:	e002      	b.n	8002344 <HAL_GPIO_Init+0x240>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_GPIO_Init+0x240>
 8002342:	2300      	movs	r3, #0
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	f002 0203 	and.w	r2, r2, #3
 800234a:	0092      	lsls	r2, r2, #2
 800234c:	4093      	lsls	r3, r2
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002354:	4935      	ldr	r1, [pc, #212]	; (800242c <HAL_GPIO_Init+0x328>)
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	3302      	adds	r3, #2
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002362:	4b3d      	ldr	r3, [pc, #244]	; (8002458 <HAL_GPIO_Init+0x354>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002386:	4a34      	ldr	r2, [pc, #208]	; (8002458 <HAL_GPIO_Init+0x354>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800238c:	4b32      	ldr	r3, [pc, #200]	; (8002458 <HAL_GPIO_Init+0x354>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023b0:	4a29      	ldr	r2, [pc, #164]	; (8002458 <HAL_GPIO_Init+0x354>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b6:	4b28      	ldr	r3, [pc, #160]	; (8002458 <HAL_GPIO_Init+0x354>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023da:	4a1f      	ldr	r2, [pc, #124]	; (8002458 <HAL_GPIO_Init+0x354>)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_GPIO_Init+0x354>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002404:	4a14      	ldr	r2, [pc, #80]	; (8002458 <HAL_GPIO_Init+0x354>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3301      	adds	r3, #1
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b0f      	cmp	r3, #15
 8002414:	f67f ae84 	bls.w	8002120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3724      	adds	r7, #36	; 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	40013800 	.word	0x40013800
 8002430:	40020000 	.word	0x40020000
 8002434:	40020400 	.word	0x40020400
 8002438:	40020800 	.word	0x40020800
 800243c:	40020c00 	.word	0x40020c00
 8002440:	40021000 	.word	0x40021000
 8002444:	40021400 	.word	0x40021400
 8002448:	40021800 	.word	0x40021800
 800244c:	40021c00 	.word	0x40021c00
 8002450:	40022000 	.word	0x40022000
 8002454:	40022400 	.word	0x40022400
 8002458:	40013c00 	.word	0x40013c00

0800245c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	807b      	strh	r3, [r7, #2]
 8002468:	4613      	mov	r3, r2
 800246a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800246c:	787b      	ldrb	r3, [r7, #1]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002478:	e003      	b.n	8002482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800247a:	887b      	ldrh	r3, [r7, #2]
 800247c:	041a      	lsls	r2, r3, #16
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	619a      	str	r2, [r3, #24]
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800248e:	b480      	push	{r7}
 8002490:	b085      	sub	sp, #20
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024a0:	887a      	ldrh	r2, [r7, #2]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4013      	ands	r3, r2
 80024a6:	041a      	lsls	r2, r3, #16
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	887b      	ldrh	r3, [r7, #2]
 80024ae:	400b      	ands	r3, r1
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	619a      	str	r2, [r3, #24]
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024da:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe faa0 	bl	8000a28 <HAL_GPIO_EXTI_Callback>
  }
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40013c00 	.word	0x40013c00

080024f4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80024f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f6:	b08f      	sub	sp, #60	; 0x3c
 80024f8:	af0a      	add	r7, sp, #40	; 0x28
 80024fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e054      	b.n	80025b0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d106      	bne.n	8002526 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff f985 	bl	8001830 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2203      	movs	r2, #3
 800252a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d102      	bne.n	8002540 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f004 fabe 	bl	8006ac6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	687e      	ldr	r6, [r7, #4]
 8002552:	466d      	mov	r5, sp
 8002554:	f106 0410 	add.w	r4, r6, #16
 8002558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800255a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800255c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800255e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002560:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002564:	e885 0003 	stmia.w	r5, {r0, r1}
 8002568:	1d33      	adds	r3, r6, #4
 800256a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800256c:	6838      	ldr	r0, [r7, #0]
 800256e:	f004 fa49 	bl	8006a04 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2101      	movs	r1, #1
 8002578:	4618      	mov	r0, r3
 800257a:	f004 fab5 	bl	8006ae8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	687e      	ldr	r6, [r7, #4]
 8002586:	466d      	mov	r5, sp
 8002588:	f106 0410 	add.w	r4, r6, #16
 800258c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800258e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002594:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002598:	e885 0003 	stmia.w	r5, {r0, r1}
 800259c:	1d33      	adds	r3, r6, #4
 800259e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a0:	6838      	ldr	r0, [r7, #0]
 80025a2:	f004 fb91 	bl	8006cc8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f004 fb38 	bl	8006c44 <USB_GetMode>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	f040 80ef 	bne.w	80027ba <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f004 fb1c 	bl	8006c1e <USB_ReadInterrupts>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80e5 	beq.w	80027b8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f004 fb13 	bl	8006c1e <USB_ReadInterrupts>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002602:	d104      	bne.n	800260e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800260c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f004 fb03 	bl	8006c1e <USB_ReadInterrupts>
 8002618:	4603      	mov	r3, r0
 800261a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800261e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002622:	d104      	bne.n	800262e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800262c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f004 faf3 	bl	8006c1e <USB_ReadInterrupts>
 8002638:	4603      	mov	r3, r0
 800263a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800263e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002642:	d104      	bne.n	800264e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800264c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f004 fae3 	bl	8006c1e <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b02      	cmp	r3, #2
 8002660:	d103      	bne.n	800266a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2202      	movs	r2, #2
 8002668:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f004 fad5 	bl	8006c1e <USB_ReadInterrupts>
 8002674:	4603      	mov	r3, r0
 8002676:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800267a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800267e:	d115      	bne.n	80026ac <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002688:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d108      	bne.n	80026ac <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f8a4 	bl	80027e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 fbca 	bl	8006e40 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f004 fab4 	bl	8006c1e <USB_ReadInterrupts>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c0:	d102      	bne.n	80026c8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f001 f9ad 	bl	8003a22 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f004 faa6 	bl	8006c1e <USB_ReadInterrupts>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d106      	bne.n	80026ea <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f86f 	bl	80027c0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2208      	movs	r2, #8
 80026e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f004 fa95 	bl	8006c1e <USB_ReadInterrupts>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d101      	bne.n	8002702 <HAL_HCD_IRQHandler+0x14a>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_HCD_IRQHandler+0x14c>
 8002702:	2300      	movs	r3, #0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d012      	beq.n	800272e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0210 	bic.w	r2, r2, #16
 8002716:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f001 f8b0 	bl	800387e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699a      	ldr	r2, [r3, #24]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0210 	orr.w	r2, r2, #16
 800272c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f004 fa73 	bl	8006c1e <USB_ReadInterrupts>
 8002738:	4603      	mov	r3, r0
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002742:	d13a      	bne.n	80027ba <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f004 fbec 	bl	8006f26 <USB_HC_ReadInterrupt>
 800274e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	e025      	b.n	80027a2 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d018      	beq.n	800279c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4413      	add	r3, r2
 8002772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800277c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002780:	d106      	bne.n	8002790 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	4619      	mov	r1, r3
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f859 	bl	8002840 <HCD_HC_IN_IRQHandler>
 800278e:	e005      	b.n	800279c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4619      	mov	r1, r3
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fc74 	bl	8003084 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3301      	adds	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d3d4      	bcc.n	8002756 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b4:	615a      	str	r2, [r3, #20]
 80027b6:	e000      	b.n	80027ba <HAL_HCD_IRQHandler+0x202>
      return;
 80027b8:	bf00      	nop
    }
  }
}
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	70fb      	strb	r3, [r7, #3]
 8002830:	4613      	mov	r3, r2
 8002832:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4413      	add	r3, r2
 8002862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b04      	cmp	r3, #4
 800286e:	d119      	bne.n	80028a4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	461a      	mov	r2, r3
 800287e:	2304      	movs	r3, #4
 8002880:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4413      	add	r3, r2
 800288a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	0151      	lsls	r1, r2, #5
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	440a      	add	r2, r1
 8002898:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800289c:	f043 0302 	orr.w	r3, r3, #2
 80028a0:	60d3      	str	r3, [r2, #12]
 80028a2:	e101      	b.n	8002aa8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ba:	d12b      	bne.n	8002914 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c8:	461a      	mov	r2, r3
 80028ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	3361      	adds	r3, #97	; 0x61
 80028de:	2207      	movs	r2, #7
 80028e0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	0151      	lsls	r1, r2, #5
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	440a      	add	r2, r1
 80028f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f004 fb1b 	bl	8006f48 <USB_HC_Halt>
 8002912:	e0c9      	b.n	8002aa8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b20      	cmp	r3, #32
 8002928:	d109      	bne.n	800293e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4413      	add	r3, r2
 8002932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002936:	461a      	mov	r2, r3
 8002938:	2320      	movs	r3, #32
 800293a:	6093      	str	r3, [r2, #8]
 800293c:	e0b4      	b.n	8002aa8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4413      	add	r3, r2
 8002946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b08      	cmp	r3, #8
 8002952:	d133      	bne.n	80029bc <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	0151      	lsls	r1, r2, #5
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	440a      	add	r2, r1
 800296a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800296e:	f043 0302 	orr.w	r3, r3, #2
 8002972:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	3361      	adds	r3, #97	; 0x61
 8002982:	2205      	movs	r2, #5
 8002984:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002992:	461a      	mov	r2, r3
 8002994:	2310      	movs	r3, #16
 8002996:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	461a      	mov	r2, r3
 80029a6:	2308      	movs	r3, #8
 80029a8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f004 fac7 	bl	8006f48 <USB_HC_Halt>
 80029ba:	e075      	b.n	8002aa8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d2:	d134      	bne.n	8002a3e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	0151      	lsls	r1, r2, #5
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	440a      	add	r2, r1
 80029ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ee:	f043 0302 	orr.w	r3, r3, #2
 80029f2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3361      	adds	r3, #97	; 0x61
 8002a02:	2208      	movs	r2, #8
 8002a04:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a12:	461a      	mov	r2, r3
 8002a14:	2310      	movs	r3, #16
 8002a16:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a24:	461a      	mov	r2, r3
 8002a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a2a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f004 fa86 	bl	8006f48 <USB_HC_Halt>
 8002a3c:	e034      	b.n	8002aa8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a50:	2b80      	cmp	r3, #128	; 0x80
 8002a52:	d129      	bne.n	8002aa8 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	0151      	lsls	r1, r2, #5
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	440a      	add	r2, r1
 8002a6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a6e:	f043 0302 	orr.w	r3, r3, #2
 8002a72:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3361      	adds	r3, #97	; 0x61
 8002a82:	2206      	movs	r2, #6
 8002a84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f004 fa59 	bl	8006f48 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	015a      	lsls	r2, r3, #5
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002abe:	d122      	bne.n	8002b06 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	0151      	lsls	r1, r2, #5
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	440a      	add	r2, r1
 8002ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ada:	f043 0302 	orr.w	r3, r3, #2
 8002ade:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f004 fa2c 	bl	8006f48 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afc:	461a      	mov	r2, r3
 8002afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b02:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002b04:	e2ba      	b.n	800307c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	f040 811b 	bne.w	8002d54 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d019      	beq.n	8002b5a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3348      	adds	r3, #72	; 0x48
 8002b34:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	0159      	lsls	r1, r3, #5
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	440b      	add	r3, r1
 8002b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002b48:	1ad2      	subs	r2, r2, r3
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	202c      	movs	r0, #44	; 0x2c
 8002b50:	fb00 f303 	mul.w	r3, r0, r3
 8002b54:	440b      	add	r3, r1
 8002b56:	3350      	adds	r3, #80	; 0x50
 8002b58:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	212c      	movs	r1, #44	; 0x2c
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	3361      	adds	r3, #97	; 0x61
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	212c      	movs	r1, #44	; 0x2c
 8002b72:	fb01 f303 	mul.w	r3, r1, r3
 8002b76:	4413      	add	r3, r2
 8002b78:	335c      	adds	r3, #92	; 0x5c
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	333f      	adds	r3, #63	; 0x3f
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d009      	beq.n	8002bb8 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	333f      	adds	r3, #63	; 0x3f
 8002bb2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d121      	bne.n	8002bfc <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	0151      	lsls	r1, r2, #5
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	440a      	add	r2, r1
 8002bce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bd2:	f043 0302 	orr.w	r3, r3, #2
 8002bd6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f004 f9b0 	bl	8006f48 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2310      	movs	r3, #16
 8002bf8:	6093      	str	r3, [r2, #8]
 8002bfa:	e066      	b.n	8002cca <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	333f      	adds	r3, #63	; 0x3f
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d127      	bne.n	8002c60 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	0151      	lsls	r1, r2, #5
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	440a      	add	r2, r1
 8002c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c2e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	212c      	movs	r1, #44	; 0x2c
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3360      	adds	r3, #96	; 0x60
 8002c3e:	2201      	movs	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	b2d9      	uxtb	r1, r3
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	202c      	movs	r0, #44	; 0x2c
 8002c4c:	fb00 f303 	mul.w	r3, r0, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3360      	adds	r3, #96	; 0x60
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff fde3 	bl	8002824 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c5e:	e034      	b.n	8002cca <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	212c      	movs	r1, #44	; 0x2c
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	333f      	adds	r3, #63	; 0x3f
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d12a      	bne.n	8002cca <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	212c      	movs	r1, #44	; 0x2c
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	3360      	adds	r3, #96	; 0x60
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	3354      	adds	r3, #84	; 0x54
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	f083 0301 	eor.w	r3, r3, #1
 8002c9a:	b2d8      	uxtb	r0, r3
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3354      	adds	r3, #84	; 0x54
 8002caa:	4602      	mov	r2, r0
 8002cac:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	b2d9      	uxtb	r1, r3
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	202c      	movs	r0, #44	; 0x2c
 8002cb8:	fb00 f303 	mul.w	r3, r0, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3360      	adds	r3, #96	; 0x60
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff fdad 	bl	8002824 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d12b      	bne.n	8002d2a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	3348      	adds	r3, #72	; 0x48
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	202c      	movs	r0, #44	; 0x2c
 8002ce8:	fb00 f202 	mul.w	r2, r0, r2
 8002cec:	440a      	add	r2, r1
 8002cee:	3240      	adds	r2, #64	; 0x40
 8002cf0:	8812      	ldrh	r2, [r2, #0]
 8002cf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 81be 	beq.w	800307c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3354      	adds	r3, #84	; 0x54
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	f083 0301 	eor.w	r3, r3, #1
 8002d14:	b2d8      	uxtb	r0, r3
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	212c      	movs	r1, #44	; 0x2c
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	3354      	adds	r3, #84	; 0x54
 8002d24:	4602      	mov	r2, r0
 8002d26:	701a      	strb	r2, [r3, #0]
}
 8002d28:	e1a8      	b.n	800307c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	212c      	movs	r1, #44	; 0x2c
 8002d30:	fb01 f303 	mul.w	r3, r1, r3
 8002d34:	4413      	add	r3, r2
 8002d36:	3354      	adds	r3, #84	; 0x54
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	f083 0301 	eor.w	r3, r3, #1
 8002d3e:	b2d8      	uxtb	r0, r3
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3354      	adds	r3, #84	; 0x54
 8002d4e:	4602      	mov	r2, r0
 8002d50:	701a      	strb	r2, [r3, #0]
}
 8002d52:	e193      	b.n	800307c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	f040 8106 	bne.w	8002f78 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	0151      	lsls	r1, r2, #5
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	440a      	add	r2, r1
 8002d82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d86:	f023 0302 	bic.w	r3, r3, #2
 8002d8a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3361      	adds	r3, #97	; 0x61
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d109      	bne.n	8002db4 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	3360      	adds	r3, #96	; 0x60
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	e0c9      	b.n	8002f48 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3361      	adds	r3, #97	; 0x61
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d109      	bne.n	8002ddc <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3360      	adds	r3, #96	; 0x60
 8002dd6:	2205      	movs	r2, #5
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	e0b5      	b.n	8002f48 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	212c      	movs	r1, #44	; 0x2c
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3361      	adds	r3, #97	; 0x61
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b06      	cmp	r3, #6
 8002dee:	d009      	beq.n	8002e04 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3361      	adds	r3, #97	; 0x61
 8002dfe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d150      	bne.n	8002ea6 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	212c      	movs	r1, #44	; 0x2c
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	335c      	adds	r3, #92	; 0x5c
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	202c      	movs	r0, #44	; 0x2c
 8002e1c:	fb00 f303 	mul.w	r3, r0, r3
 8002e20:	440b      	add	r3, r1
 8002e22:	335c      	adds	r3, #92	; 0x5c
 8002e24:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	212c      	movs	r1, #44	; 0x2c
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	335c      	adds	r3, #92	; 0x5c
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d912      	bls.n	8002e60 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	335c      	adds	r3, #92	; 0x5c
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	3360      	adds	r3, #96	; 0x60
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e5e:	e073      	b.n	8002f48 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	212c      	movs	r1, #44	; 0x2c
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3360      	adds	r3, #96	; 0x60
 8002e6e:	2202      	movs	r2, #2
 8002e70:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e88:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e90:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ea4:	e050      	b.n	8002f48 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	212c      	movs	r1, #44	; 0x2c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3361      	adds	r3, #97	; 0x61
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d122      	bne.n	8002f00 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	212c      	movs	r1, #44	; 0x2c
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3360      	adds	r3, #96	; 0x60
 8002ec8:	2202      	movs	r2, #2
 8002eca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ee2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e023      	b.n	8002f48 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	212c      	movs	r1, #44	; 0x2c
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3361      	adds	r3, #97	; 0x61
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b07      	cmp	r3, #7
 8002f12:	d119      	bne.n	8002f48 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	335c      	adds	r3, #92	; 0x5c
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	202c      	movs	r0, #44	; 0x2c
 8002f2c:	fb00 f303 	mul.w	r3, r0, r3
 8002f30:	440b      	add	r3, r1
 8002f32:	335c      	adds	r3, #92	; 0x5c
 8002f34:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	212c      	movs	r1, #44	; 0x2c
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	3360      	adds	r3, #96	; 0x60
 8002f44:	2204      	movs	r2, #4
 8002f46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f54:	461a      	mov	r2, r3
 8002f56:	2302      	movs	r3, #2
 8002f58:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	b2d9      	uxtb	r1, r3
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	202c      	movs	r0, #44	; 0x2c
 8002f64:	fb00 f303 	mul.w	r3, r0, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3360      	adds	r3, #96	; 0x60
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff fc57 	bl	8002824 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f76:	e081      	b.n	800307c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b10      	cmp	r3, #16
 8002f8c:	d176      	bne.n	800307c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	333f      	adds	r3, #63	; 0x3f
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d121      	bne.n	8002fe6 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	212c      	movs	r1, #44	; 0x2c
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	4413      	add	r3, r2
 8002fae:	335c      	adds	r3, #92	; 0x5c
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	0151      	lsls	r1, r2, #5
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	440a      	add	r2, r1
 8002fca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fce:	f043 0302 	orr.w	r3, r3, #2
 8002fd2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f003 ffb2 	bl	8006f48 <USB_HC_Halt>
 8002fe4:	e041      	b.n	800306a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	333f      	adds	r3, #63	; 0x3f
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	333f      	adds	r3, #63	; 0x3f
 8003008:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800300a:	2b02      	cmp	r3, #2
 800300c:	d12d      	bne.n	800306a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	335c      	adds	r3, #92	; 0x5c
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d120      	bne.n	800306a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	212c      	movs	r1, #44	; 0x2c
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	3361      	adds	r3, #97	; 0x61
 8003036:	2203      	movs	r2, #3
 8003038:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4413      	add	r3, r2
 8003042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	0151      	lsls	r1, r2, #5
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	440a      	add	r2, r1
 8003050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003054:	f043 0302 	orr.w	r3, r3, #2
 8003058:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f003 ff6f 	bl	8006f48 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003076:	461a      	mov	r2, r3
 8003078:	2310      	movs	r3, #16
 800307a:	6093      	str	r3, [r2, #8]
}
 800307c:	bf00      	nop
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d119      	bne.n	80030e8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c0:	461a      	mov	r2, r3
 80030c2:	2304      	movs	r3, #4
 80030c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	0151      	lsls	r1, r2, #5
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	440a      	add	r2, r1
 80030dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030e0:	f043 0302 	orr.w	r3, r3, #2
 80030e4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80030e6:	e3c6      	b.n	8003876 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	d13e      	bne.n	800317c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	4413      	add	r3, r2
 8003106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310a:	461a      	mov	r2, r3
 800310c:	2320      	movs	r3, #32
 800310e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	212c      	movs	r1, #44	; 0x2c
 8003116:	fb01 f303 	mul.w	r3, r1, r3
 800311a:	4413      	add	r3, r2
 800311c:	333d      	adds	r3, #61	; 0x3d
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	f040 83a8 	bne.w	8003876 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	212c      	movs	r1, #44	; 0x2c
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	4413      	add	r3, r2
 8003132:	333d      	adds	r3, #61	; 0x3d
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	212c      	movs	r1, #44	; 0x2c
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	3360      	adds	r3, #96	; 0x60
 8003146:	2202      	movs	r2, #2
 8003148:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	4413      	add	r3, r2
 8003152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	0151      	lsls	r1, r2, #5
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	440a      	add	r2, r1
 8003160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003164:	f043 0302 	orr.w	r3, r3, #2
 8003168:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f003 fee7 	bl	8006f48 <USB_HC_Halt>
}
 800317a:	e37c      	b.n	8003876 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800318e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003192:	d122      	bne.n	80031da <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	4413      	add	r3, r2
 800319c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	0151      	lsls	r1, r2, #5
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	440a      	add	r2, r1
 80031aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031ae:	f043 0302 	orr.w	r3, r3, #2
 80031b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f003 fec2 	bl	8006f48 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d0:	461a      	mov	r2, r3
 80031d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031d6:	6093      	str	r3, [r2, #8]
}
 80031d8:	e34d      	b.n	8003876 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d150      	bne.n	8003292 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	335c      	adds	r3, #92	; 0x5c
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4413      	add	r3, r2
 800320a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003214:	2b40      	cmp	r3, #64	; 0x40
 8003216:	d111      	bne.n	800323c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	333d      	adds	r3, #61	; 0x3d
 8003226:	2201      	movs	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	4413      	add	r3, r2
 8003232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003236:	461a      	mov	r2, r3
 8003238:	2340      	movs	r3, #64	; 0x40
 800323a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	4413      	add	r3, r2
 8003244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	0151      	lsls	r1, r2, #5
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	440a      	add	r2, r1
 8003252:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003256:	f043 0302 	orr.w	r3, r3, #2
 800325a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f003 fe6e 	bl	8006f48 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	4413      	add	r3, r2
 8003274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003278:	461a      	mov	r2, r3
 800327a:	2301      	movs	r3, #1
 800327c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	212c      	movs	r1, #44	; 0x2c
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	4413      	add	r3, r2
 800328a:	3361      	adds	r3, #97	; 0x61
 800328c:	2201      	movs	r2, #1
 800328e:	701a      	strb	r2, [r3, #0]
}
 8003290:	e2f1      	b.n	8003876 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	4413      	add	r3, r2
 800329a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d13c      	bne.n	8003322 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	3361      	adds	r3, #97	; 0x61
 80032b6:	2204      	movs	r2, #4
 80032b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	212c      	movs	r1, #44	; 0x2c
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	333d      	adds	r3, #61	; 0x3d
 80032c8:	2201      	movs	r2, #1
 80032ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	212c      	movs	r1, #44	; 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	335c      	adds	r3, #92	; 0x5c
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	0151      	lsls	r1, r2, #5
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	440a      	add	r2, r1
 80032f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f003 fe1d 	bl	8006f48 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	4413      	add	r3, r2
 8003316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331a:	461a      	mov	r2, r3
 800331c:	2340      	movs	r3, #64	; 0x40
 800331e:	6093      	str	r3, [r2, #8]
}
 8003320:	e2a9      	b.n	8003876 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	4413      	add	r3, r2
 800332a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b08      	cmp	r3, #8
 8003336:	d12a      	bne.n	800338e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	4413      	add	r3, r2
 8003340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003344:	461a      	mov	r2, r3
 8003346:	2308      	movs	r3, #8
 8003348:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	0151      	lsls	r1, r2, #5
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	440a      	add	r2, r1
 8003360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003364:	f043 0302 	orr.w	r3, r3, #2
 8003368:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f003 fde7 	bl	8006f48 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	212c      	movs	r1, #44	; 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	3361      	adds	r3, #97	; 0x61
 8003388:	2205      	movs	r2, #5
 800338a:	701a      	strb	r2, [r3, #0]
}
 800338c:	e273      	b.n	8003876 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	4413      	add	r3, r2
 8003396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d150      	bne.n	8003446 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	212c      	movs	r1, #44	; 0x2c
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	335c      	adds	r3, #92	; 0x5c
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	3361      	adds	r3, #97	; 0x61
 80033c4:	2203      	movs	r2, #3
 80033c6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	212c      	movs	r1, #44	; 0x2c
 80033ce:	fb01 f303 	mul.w	r3, r1, r3
 80033d2:	4413      	add	r3, r2
 80033d4:	333d      	adds	r3, #61	; 0x3d
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d112      	bne.n	8003402 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	212c      	movs	r1, #44	; 0x2c
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	333c      	adds	r3, #60	; 0x3c
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d108      	bne.n	8003402 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	212c      	movs	r1, #44	; 0x2c
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	4413      	add	r3, r2
 80033fc:	333d      	adds	r3, #61	; 0x3d
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	4413      	add	r3, r2
 800340a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	0151      	lsls	r1, r2, #5
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	440a      	add	r2, r1
 8003418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800341c:	f043 0302 	orr.w	r3, r3, #2
 8003420:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f003 fd8b 	bl	8006f48 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	4413      	add	r3, r2
 800343a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343e:	461a      	mov	r2, r3
 8003440:	2310      	movs	r3, #16
 8003442:	6093      	str	r3, [r2, #8]
}
 8003444:	e217      	b.n	8003876 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b80      	cmp	r3, #128	; 0x80
 800345a:	d174      	bne.n	8003546 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d121      	bne.n	80034a8 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3361      	adds	r3, #97	; 0x61
 8003472:	2206      	movs	r2, #6
 8003474:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	4413      	add	r3, r2
 800347e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	0151      	lsls	r1, r2, #5
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	440a      	add	r2, r1
 800348c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003490:	f043 0302 	orr.w	r3, r3, #2
 8003494:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	4611      	mov	r1, r2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f003 fd51 	bl	8006f48 <USB_HC_Halt>
 80034a6:	e044      	b.n	8003532 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	212c      	movs	r1, #44	; 0x2c
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	335c      	adds	r3, #92	; 0x5c
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	202c      	movs	r0, #44	; 0x2c
 80034c0:	fb00 f303 	mul.w	r3, r0, r3
 80034c4:	440b      	add	r3, r1
 80034c6:	335c      	adds	r3, #92	; 0x5c
 80034c8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	212c      	movs	r1, #44	; 0x2c
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	4413      	add	r3, r2
 80034d6:	335c      	adds	r3, #92	; 0x5c
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d920      	bls.n	8003520 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	212c      	movs	r1, #44	; 0x2c
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	335c      	adds	r3, #92	; 0x5c
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	212c      	movs	r1, #44	; 0x2c
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	3360      	adds	r3, #96	; 0x60
 80034fe:	2204      	movs	r2, #4
 8003500:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	b2d9      	uxtb	r1, r3
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	202c      	movs	r0, #44	; 0x2c
 800350c:	fb00 f303 	mul.w	r3, r0, r3
 8003510:	4413      	add	r3, r2
 8003512:	3360      	adds	r3, #96	; 0x60
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff f983 	bl	8002824 <HAL_HCD_HC_NotifyURBChange_Callback>
 800351e:	e008      	b.n	8003532 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	212c      	movs	r1, #44	; 0x2c
 8003526:	fb01 f303 	mul.w	r3, r1, r3
 800352a:	4413      	add	r3, r2
 800352c:	3360      	adds	r3, #96	; 0x60
 800352e:	2202      	movs	r2, #2
 8003530:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	4413      	add	r3, r2
 800353a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353e:	461a      	mov	r2, r3
 8003540:	2380      	movs	r3, #128	; 0x80
 8003542:	6093      	str	r3, [r2, #8]
}
 8003544:	e197      	b.n	8003876 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355c:	d134      	bne.n	80035c8 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	0151      	lsls	r1, r2, #5
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	440a      	add	r2, r1
 8003574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003578:	f043 0302 	orr.w	r3, r3, #2
 800357c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	4611      	mov	r1, r2
 8003588:	4618      	mov	r0, r3
 800358a:	f003 fcdd 	bl	8006f48 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	4413      	add	r3, r2
 8003596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359a:	461a      	mov	r2, r3
 800359c:	2310      	movs	r3, #16
 800359e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ac:	461a      	mov	r2, r3
 80035ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	212c      	movs	r1, #44	; 0x2c
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	4413      	add	r3, r2
 80035c0:	3361      	adds	r3, #97	; 0x61
 80035c2:	2208      	movs	r2, #8
 80035c4:	701a      	strb	r2, [r3, #0]
}
 80035c6:	e156      	b.n	8003876 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b02      	cmp	r3, #2
 80035dc:	f040 814b 	bne.w	8003876 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	0151      	lsls	r1, r2, #5
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	440a      	add	r2, r1
 80035f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035fa:	f023 0302 	bic.w	r3, r3, #2
 80035fe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	212c      	movs	r1, #44	; 0x2c
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	3361      	adds	r3, #97	; 0x61
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d179      	bne.n	8003708 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	212c      	movs	r1, #44	; 0x2c
 800361a:	fb01 f303 	mul.w	r3, r1, r3
 800361e:	4413      	add	r3, r2
 8003620:	3360      	adds	r3, #96	; 0x60
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	212c      	movs	r1, #44	; 0x2c
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	4413      	add	r3, r2
 8003632:	333f      	adds	r3, #63	; 0x3f
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d00a      	beq.n	8003650 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	212c      	movs	r1, #44	; 0x2c
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	4413      	add	r3, r2
 8003646:	333f      	adds	r3, #63	; 0x3f
 8003648:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800364a:	2b03      	cmp	r3, #3
 800364c:	f040 80fc 	bne.w	8003848 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d142      	bne.n	80036de <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	334c      	adds	r3, #76	; 0x4c
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80ed 	beq.w	8003848 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	212c      	movs	r1, #44	; 0x2c
 8003674:	fb01 f303 	mul.w	r3, r1, r3
 8003678:	4413      	add	r3, r2
 800367a:	334c      	adds	r3, #76	; 0x4c
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	202c      	movs	r0, #44	; 0x2c
 8003684:	fb00 f202 	mul.w	r2, r0, r2
 8003688:	440a      	add	r2, r1
 800368a:	3240      	adds	r2, #64	; 0x40
 800368c:	8812      	ldrh	r2, [r2, #0]
 800368e:	4413      	add	r3, r2
 8003690:	3b01      	subs	r3, #1
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	202c      	movs	r0, #44	; 0x2c
 8003698:	fb00 f202 	mul.w	r2, r0, r2
 800369c:	440a      	add	r2, r1
 800369e:	3240      	adds	r2, #64	; 0x40
 80036a0:	8812      	ldrh	r2, [r2, #0]
 80036a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 80ca 	beq.w	8003848 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	212c      	movs	r1, #44	; 0x2c
 80036ba:	fb01 f303 	mul.w	r3, r1, r3
 80036be:	4413      	add	r3, r2
 80036c0:	3355      	adds	r3, #85	; 0x55
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	f083 0301 	eor.w	r3, r3, #1
 80036c8:	b2d8      	uxtb	r0, r3
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	212c      	movs	r1, #44	; 0x2c
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	3355      	adds	r3, #85	; 0x55
 80036d8:	4602      	mov	r2, r0
 80036da:	701a      	strb	r2, [r3, #0]
 80036dc:	e0b4      	b.n	8003848 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	212c      	movs	r1, #44	; 0x2c
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	3355      	adds	r3, #85	; 0x55
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	f083 0301 	eor.w	r3, r3, #1
 80036f2:	b2d8      	uxtb	r0, r3
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	212c      	movs	r1, #44	; 0x2c
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	4413      	add	r3, r2
 8003700:	3355      	adds	r3, #85	; 0x55
 8003702:	4602      	mov	r2, r0
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	e09f      	b.n	8003848 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	212c      	movs	r1, #44	; 0x2c
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	3361      	adds	r3, #97	; 0x61
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d109      	bne.n	8003730 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	212c      	movs	r1, #44	; 0x2c
 8003722:	fb01 f303 	mul.w	r3, r1, r3
 8003726:	4413      	add	r3, r2
 8003728:	3360      	adds	r3, #96	; 0x60
 800372a:	2202      	movs	r2, #2
 800372c:	701a      	strb	r2, [r3, #0]
 800372e:	e08b      	b.n	8003848 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	212c      	movs	r1, #44	; 0x2c
 8003736:	fb01 f303 	mul.w	r3, r1, r3
 800373a:	4413      	add	r3, r2
 800373c:	3361      	adds	r3, #97	; 0x61
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b04      	cmp	r3, #4
 8003742:	d109      	bne.n	8003758 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	212c      	movs	r1, #44	; 0x2c
 800374a:	fb01 f303 	mul.w	r3, r1, r3
 800374e:	4413      	add	r3, r2
 8003750:	3360      	adds	r3, #96	; 0x60
 8003752:	2202      	movs	r2, #2
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	e077      	b.n	8003848 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	212c      	movs	r1, #44	; 0x2c
 800375e:	fb01 f303 	mul.w	r3, r1, r3
 8003762:	4413      	add	r3, r2
 8003764:	3361      	adds	r3, #97	; 0x61
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b05      	cmp	r3, #5
 800376a:	d109      	bne.n	8003780 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	212c      	movs	r1, #44	; 0x2c
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	4413      	add	r3, r2
 8003778:	3360      	adds	r3, #96	; 0x60
 800377a:	2205      	movs	r2, #5
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	e063      	b.n	8003848 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	212c      	movs	r1, #44	; 0x2c
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	4413      	add	r3, r2
 800378c:	3361      	adds	r3, #97	; 0x61
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b06      	cmp	r3, #6
 8003792:	d009      	beq.n	80037a8 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	212c      	movs	r1, #44	; 0x2c
 800379a:	fb01 f303 	mul.w	r3, r1, r3
 800379e:	4413      	add	r3, r2
 80037a0:	3361      	adds	r3, #97	; 0x61
 80037a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d14f      	bne.n	8003848 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	212c      	movs	r1, #44	; 0x2c
 80037ae:	fb01 f303 	mul.w	r3, r1, r3
 80037b2:	4413      	add	r3, r2
 80037b4:	335c      	adds	r3, #92	; 0x5c
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	202c      	movs	r0, #44	; 0x2c
 80037c0:	fb00 f303 	mul.w	r3, r0, r3
 80037c4:	440b      	add	r3, r1
 80037c6:	335c      	adds	r3, #92	; 0x5c
 80037c8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	212c      	movs	r1, #44	; 0x2c
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	335c      	adds	r3, #92	; 0x5c
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d912      	bls.n	8003804 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	212c      	movs	r1, #44	; 0x2c
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	335c      	adds	r3, #92	; 0x5c
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	212c      	movs	r1, #44	; 0x2c
 80037f6:	fb01 f303 	mul.w	r3, r1, r3
 80037fa:	4413      	add	r3, r2
 80037fc:	3360      	adds	r3, #96	; 0x60
 80037fe:	2204      	movs	r2, #4
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	e021      	b.n	8003848 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	212c      	movs	r1, #44	; 0x2c
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	4413      	add	r3, r2
 8003810:	3360      	adds	r3, #96	; 0x60
 8003812:	2202      	movs	r2, #2
 8003814:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	4413      	add	r3, r2
 800381e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800382c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003834:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	4413      	add	r3, r2
 800383e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003842:	461a      	mov	r2, r3
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	4413      	add	r3, r2
 8003850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003854:	461a      	mov	r2, r3
 8003856:	2302      	movs	r3, #2
 8003858:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	b2d9      	uxtb	r1, r3
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	202c      	movs	r0, #44	; 0x2c
 8003864:	fb00 f303 	mul.w	r3, r0, r3
 8003868:	4413      	add	r3, r2
 800386a:	3360      	adds	r3, #96	; 0x60
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7fe ffd7 	bl	8002824 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003876:	bf00      	nop
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b08a      	sub	sp, #40	; 0x28
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	0c5b      	lsrs	r3, r3, #17
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038b2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d004      	beq.n	80038c4 <HCD_RXQLVL_IRQHandler+0x46>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b05      	cmp	r3, #5
 80038be:	f000 80a9 	beq.w	8003a14 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80038c2:	e0aa      	b.n	8003a1a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 80a6 	beq.w	8003a18 <HCD_RXQLVL_IRQHandler+0x19a>
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	212c      	movs	r1, #44	; 0x2c
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	3344      	adds	r3, #68	; 0x44
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 809b 	beq.w	8003a18 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	212c      	movs	r1, #44	; 0x2c
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	4413      	add	r3, r2
 80038ee:	3350      	adds	r3, #80	; 0x50
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	441a      	add	r2, r3
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	202c      	movs	r0, #44	; 0x2c
 80038fc:	fb00 f303 	mul.w	r3, r0, r3
 8003900:	440b      	add	r3, r1
 8003902:	334c      	adds	r3, #76	; 0x4c
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d87a      	bhi.n	8003a00 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	212c      	movs	r1, #44	; 0x2c
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	4413      	add	r3, r2
 800391a:	3344      	adds	r3, #68	; 0x44
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	b292      	uxth	r2, r2
 8003922:	4619      	mov	r1, r3
 8003924:	f003 f952 	bl	8006bcc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	212c      	movs	r1, #44	; 0x2c
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	4413      	add	r3, r2
 8003934:	3344      	adds	r3, #68	; 0x44
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	441a      	add	r2, r3
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	202c      	movs	r0, #44	; 0x2c
 8003942:	fb00 f303 	mul.w	r3, r0, r3
 8003946:	440b      	add	r3, r1
 8003948:	3344      	adds	r3, #68	; 0x44
 800394a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	212c      	movs	r1, #44	; 0x2c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	3350      	adds	r3, #80	; 0x50
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	441a      	add	r2, r3
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	202c      	movs	r0, #44	; 0x2c
 8003966:	fb00 f303 	mul.w	r3, r0, r3
 800396a:	440b      	add	r3, r1
 800396c:	3350      	adds	r3, #80	; 0x50
 800396e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	4413      	add	r3, r2
 8003978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	0cdb      	lsrs	r3, r3, #19
 8003980:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003984:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	212c      	movs	r1, #44	; 0x2c
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	4413      	add	r3, r2
 8003992:	3340      	adds	r3, #64	; 0x40
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4293      	cmp	r3, r2
 800399c:	d13c      	bne.n	8003a18 <HCD_RXQLVL_IRQHandler+0x19a>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d039      	beq.n	8003a18 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039ba:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039c2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d0:	461a      	mov	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	212c      	movs	r1, #44	; 0x2c
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	3354      	adds	r3, #84	; 0x54
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	f083 0301 	eor.w	r3, r3, #1
 80039ea:	b2d8      	uxtb	r0, r3
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	3354      	adds	r3, #84	; 0x54
 80039fa:	4602      	mov	r2, r0
 80039fc:	701a      	strb	r2, [r3, #0]
      break;
 80039fe:	e00b      	b.n	8003a18 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	212c      	movs	r1, #44	; 0x2c
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3360      	adds	r3, #96	; 0x60
 8003a0e:	2204      	movs	r2, #4
 8003a10:	701a      	strb	r2, [r3, #0]
      break;
 8003a12:	e001      	b.n	8003a18 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003a14:	bf00      	nop
 8003a16:	e000      	b.n	8003a1a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003a18:	bf00      	nop
  }
}
 8003a1a:	bf00      	nop
 8003a1c:	3728      	adds	r7, #40	; 0x28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b086      	sub	sp, #24
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a4e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d10b      	bne.n	8003a72 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d102      	bne.n	8003a6a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fe feb5 	bl	80027d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f043 0302 	orr.w	r3, r3, #2
 8003a70:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d132      	bne.n	8003ae2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f043 0308 	orr.w	r3, r3, #8
 8003a82:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d126      	bne.n	8003adc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d113      	bne.n	8003abe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aa0:	d106      	bne.n	8003ab0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2102      	movs	r1, #2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f003 f9c9 	bl	8006e40 <USB_InitFSLSPClkSel>
 8003aae:	e011      	b.n	8003ad4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f003 f9c2 	bl	8006e40 <USB_InitFSLSPClkSel>
 8003abc:	e00a      	b.n	8003ad4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d106      	bne.n	8003ad4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003acc:	461a      	mov	r2, r3
 8003ace:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ad2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7fe fe91 	bl	80027fc <HAL_HCD_PortEnabled_Callback>
 8003ada:	e002      	b.n	8003ae2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7fe fe97 	bl	8002810 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d103      	bne.n	8003af4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f043 0320 	orr.w	r3, r3, #32
 8003af2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003afa:	461a      	mov	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	6013      	str	r3, [r2, #0]
}
 8003b00:	bf00      	nop
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e12b      	b.n	8003d72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fc ffd8 	bl	8000ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2224      	movs	r2, #36	; 0x24
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b6c:	f001 f940 	bl	8004df0 <HAL_RCC_GetPCLK1Freq>
 8003b70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4a81      	ldr	r2, [pc, #516]	; (8003d7c <HAL_I2C_Init+0x274>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d807      	bhi.n	8003b8c <HAL_I2C_Init+0x84>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a80      	ldr	r2, [pc, #512]	; (8003d80 <HAL_I2C_Init+0x278>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	bf94      	ite	ls
 8003b84:	2301      	movls	r3, #1
 8003b86:	2300      	movhi	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	e006      	b.n	8003b9a <HAL_I2C_Init+0x92>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a7d      	ldr	r2, [pc, #500]	; (8003d84 <HAL_I2C_Init+0x27c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	bf94      	ite	ls
 8003b94:	2301      	movls	r3, #1
 8003b96:	2300      	movhi	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e0e7      	b.n	8003d72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4a78      	ldr	r2, [pc, #480]	; (8003d88 <HAL_I2C_Init+0x280>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	0c9b      	lsrs	r3, r3, #18
 8003bac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4a6a      	ldr	r2, [pc, #424]	; (8003d7c <HAL_I2C_Init+0x274>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d802      	bhi.n	8003bdc <HAL_I2C_Init+0xd4>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	e009      	b.n	8003bf0 <HAL_I2C_Init+0xe8>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	4a69      	ldr	r2, [pc, #420]	; (8003d8c <HAL_I2C_Init+0x284>)
 8003be8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bec:	099b      	lsrs	r3, r3, #6
 8003bee:	3301      	adds	r3, #1
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	495c      	ldr	r1, [pc, #368]	; (8003d7c <HAL_I2C_Init+0x274>)
 8003c0c:	428b      	cmp	r3, r1
 8003c0e:	d819      	bhi.n	8003c44 <HAL_I2C_Init+0x13c>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1e59      	subs	r1, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c1e:	1c59      	adds	r1, r3, #1
 8003c20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c24:	400b      	ands	r3, r1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_I2C_Init+0x138>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1e59      	subs	r1, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c38:	3301      	adds	r3, #1
 8003c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3e:	e051      	b.n	8003ce4 <HAL_I2C_Init+0x1dc>
 8003c40:	2304      	movs	r3, #4
 8003c42:	e04f      	b.n	8003ce4 <HAL_I2C_Init+0x1dc>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d111      	bne.n	8003c70 <HAL_I2C_Init+0x168>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1e58      	subs	r0, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	440b      	add	r3, r1
 8003c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e012      	b.n	8003c96 <HAL_I2C_Init+0x18e>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1e58      	subs	r0, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	0099      	lsls	r1, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c86:	3301      	adds	r3, #1
 8003c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf0c      	ite	eq
 8003c90:	2301      	moveq	r3, #1
 8003c92:	2300      	movne	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Init+0x196>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e022      	b.n	8003ce4 <HAL_I2C_Init+0x1dc>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10e      	bne.n	8003cc4 <HAL_I2C_Init+0x1bc>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1e58      	subs	r0, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6859      	ldr	r1, [r3, #4]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	440b      	add	r3, r1
 8003cb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc2:	e00f      	b.n	8003ce4 <HAL_I2C_Init+0x1dc>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	1e58      	subs	r0, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	0099      	lsls	r1, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	6809      	ldr	r1, [r1, #0]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69da      	ldr	r2, [r3, #28]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6911      	ldr	r1, [r2, #16]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68d2      	ldr	r2, [r2, #12]
 8003d1e:	4311      	orrs	r1, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	430b      	orrs	r3, r1
 8003d26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	000186a0 	.word	0x000186a0
 8003d80:	001e847f 	.word	0x001e847f
 8003d84:	003d08ff 	.word	0x003d08ff
 8003d88:	431bde83 	.word	0x431bde83
 8003d8c:	10624dd3 	.word	0x10624dd3

08003d90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d129      	bne.n	8003dfa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2224      	movs	r2, #36	; 0x24
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0201 	bic.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0210 	bic.w	r2, r2, #16
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	e000      	b.n	8003dfc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
  }
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	d12a      	bne.n	8003e78 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2224      	movs	r2, #36	; 0x24
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0201 	bic.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003e42:	89fb      	ldrh	r3, [r7, #14]
 8003e44:	f023 030f 	bic.w	r3, r3, #15
 8003e48:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	89fb      	ldrh	r3, [r7, #14]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	89fa      	ldrh	r2, [r7, #14]
 8003e5a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e0bf      	b.n	800401a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fc ff02 	bl	8000cb8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003eca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6999      	ldr	r1, [r3, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ee0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6899      	ldr	r1, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4b4a      	ldr	r3, [pc, #296]	; (8004024 <HAL_LTDC_Init+0x19c>)
 8003efc:	400b      	ands	r3, r1
 8003efe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	041b      	lsls	r3, r3, #16
 8003f06:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6899      	ldr	r1, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68d9      	ldr	r1, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b3e      	ldr	r3, [pc, #248]	; (8004024 <HAL_LTDC_Init+0x19c>)
 8003f2a:	400b      	ands	r3, r1
 8003f2c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68d9      	ldr	r1, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1a      	ldr	r2, [r3, #32]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6919      	ldr	r1, [r3, #16]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	4b33      	ldr	r3, [pc, #204]	; (8004024 <HAL_LTDC_Init+0x19c>)
 8003f58:	400b      	ands	r3, r1
 8003f5a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	041b      	lsls	r3, r3, #16
 8003f62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6919      	ldr	r1, [r3, #16]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6959      	ldr	r1, [r3, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	4b27      	ldr	r3, [pc, #156]	; (8004024 <HAL_LTDC_Init+0x19c>)
 8003f86:	400b      	ands	r3, r1
 8003f88:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	041b      	lsls	r3, r3, #16
 8003f90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6959      	ldr	r1, [r3, #20]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003fb8:	041b      	lsls	r3, r3, #16
 8003fba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003fca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0206 	orr.w	r2, r2, #6
 8003ff6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	f000f800 	.word	0xf000f800

08004028 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d023      	beq.n	8004092 <HAL_LTDC_IRQHandler+0x6a>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01e      	beq.n	8004092 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0204 	bic.w	r2, r2, #4
 8004062:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2204      	movs	r2, #4
 800406a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004072:	f043 0201 	orr.w	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2204      	movs	r2, #4
 8004080:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f86f 	bl	8004170 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d023      	beq.n	80040e4 <HAL_LTDC_IRQHandler+0xbc>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01e      	beq.n	80040e4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0202 	bic.w	r2, r2, #2
 80040b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2202      	movs	r2, #2
 80040bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040c4:	f043 0202 	orr.w	r2, r3, #2
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2204      	movs	r2, #4
 80040d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f846 	bl	8004170 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01b      	beq.n	8004126 <HAL_LTDC_IRQHandler+0xfe>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d016      	beq.n	8004126 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0201 	bic.w	r2, r2, #1
 8004106:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2201      	movs	r2, #1
 800410e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f82f 	bl	8004184 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01b      	beq.n	8004168 <HAL_LTDC_IRQHandler+0x140>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d016      	beq.n	8004168 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0208 	bic.w	r2, r2, #8
 8004148:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2208      	movs	r2, #8
 8004150:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f818 	bl	8004198 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004168:	bf00      	nop
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80041ac:	b5b0      	push	{r4, r5, r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_LTDC_ConfigLayer+0x1a>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e02c      	b.n	8004220 <HAL_LTDC_ConfigLayer+0x74>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2202      	movs	r2, #2
 80041d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2134      	movs	r1, #52	; 0x34
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	4413      	add	r3, r2
 80041e2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	4614      	mov	r4, r2
 80041ea:	461d      	mov	r5, r3
 80041ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041f8:	682b      	ldr	r3, [r5, #0]
 80041fa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f811 	bl	8004228 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2201      	movs	r2, #1
 800420c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bdb0      	pop	{r4, r5, r7, pc}

08004228 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004228:	b480      	push	{r7}
 800422a:	b089      	sub	sp, #36	; 0x24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	0c1b      	lsrs	r3, r3, #16
 8004240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004244:	4413      	add	r3, r2
 8004246:	041b      	lsls	r3, r3, #16
 8004248:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	01db      	lsls	r3, r3, #7
 8004254:	4413      	add	r3, r2
 8004256:	3384      	adds	r3, #132	; 0x84
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	4611      	mov	r1, r2
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	01d2      	lsls	r2, r2, #7
 8004264:	440a      	add	r2, r1
 8004266:	3284      	adds	r2, #132	; 0x84
 8004268:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800426c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	0c1b      	lsrs	r3, r3, #16
 800427a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800427e:	4413      	add	r3, r2
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4619      	mov	r1, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	01db      	lsls	r3, r3, #7
 800428c:	440b      	add	r3, r1
 800428e:	3384      	adds	r3, #132	; 0x84
 8004290:	4619      	mov	r1, r3
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	4313      	orrs	r3, r2
 8004296:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042a6:	4413      	add	r3, r2
 80042a8:	041b      	lsls	r3, r3, #16
 80042aa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	01db      	lsls	r3, r3, #7
 80042b6:	4413      	add	r3, r2
 80042b8:	3384      	adds	r3, #132	; 0x84
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	4611      	mov	r1, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	01d2      	lsls	r2, r2, #7
 80042c6:	440a      	add	r2, r1
 80042c8:	3284      	adds	r2, #132	; 0x84
 80042ca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80042ce:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042de:	4413      	add	r3, r2
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4619      	mov	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	01db      	lsls	r3, r3, #7
 80042ec:	440b      	add	r3, r1
 80042ee:	3384      	adds	r3, #132	; 0x84
 80042f0:	4619      	mov	r1, r3
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	01db      	lsls	r3, r3, #7
 8004302:	4413      	add	r3, r2
 8004304:	3384      	adds	r3, #132	; 0x84
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	4611      	mov	r1, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	01d2      	lsls	r2, r2, #7
 8004312:	440a      	add	r2, r1
 8004314:	3284      	adds	r2, #132	; 0x84
 8004316:	f023 0307 	bic.w	r3, r3, #7
 800431a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	01db      	lsls	r3, r3, #7
 8004326:	4413      	add	r3, r2
 8004328:	3384      	adds	r3, #132	; 0x84
 800432a:	461a      	mov	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004338:	021b      	lsls	r3, r3, #8
 800433a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004342:	041b      	lsls	r3, r3, #16
 8004344:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	061b      	lsls	r3, r3, #24
 800434c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	01db      	lsls	r3, r3, #7
 8004358:	4413      	add	r3, r2
 800435a:	3384      	adds	r3, #132	; 0x84
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	01db      	lsls	r3, r3, #7
 8004368:	4413      	add	r3, r2
 800436a:	3384      	adds	r3, #132	; 0x84
 800436c:	461a      	mov	r2, r3
 800436e:	2300      	movs	r3, #0
 8004370:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004378:	461a      	mov	r2, r3
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	431a      	orrs	r2, r3
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	431a      	orrs	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4619      	mov	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	01db      	lsls	r3, r3, #7
 800438c:	440b      	add	r3, r1
 800438e:	3384      	adds	r3, #132	; 0x84
 8004390:	4619      	mov	r1, r3
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	461a      	mov	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	01db      	lsls	r3, r3, #7
 80043a2:	4413      	add	r3, r2
 80043a4:	3384      	adds	r3, #132	; 0x84
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	4611      	mov	r1, r2
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	01d2      	lsls	r2, r2, #7
 80043b2:	440a      	add	r2, r1
 80043b4:	3284      	adds	r2, #132	; 0x84
 80043b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043ba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	01db      	lsls	r3, r3, #7
 80043c6:	4413      	add	r3, r2
 80043c8:	3384      	adds	r3, #132	; 0x84
 80043ca:	461a      	mov	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	01db      	lsls	r3, r3, #7
 80043dc:	4413      	add	r3, r2
 80043de:	3384      	adds	r3, #132	; 0x84
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	6812      	ldr	r2, [r2, #0]
 80043e6:	4611      	mov	r1, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	01d2      	lsls	r2, r2, #7
 80043ec:	440a      	add	r2, r1
 80043ee:	3284      	adds	r2, #132	; 0x84
 80043f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043f4:	f023 0307 	bic.w	r3, r3, #7
 80043f8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	69da      	ldr	r2, [r3, #28]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	68f9      	ldr	r1, [r7, #12]
 8004404:	6809      	ldr	r1, [r1, #0]
 8004406:	4608      	mov	r0, r1
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	01c9      	lsls	r1, r1, #7
 800440c:	4401      	add	r1, r0
 800440e:	3184      	adds	r1, #132	; 0x84
 8004410:	4313      	orrs	r3, r2
 8004412:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	01db      	lsls	r3, r3, #7
 800441e:	4413      	add	r3, r2
 8004420:	3384      	adds	r3, #132	; 0x84
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	01db      	lsls	r3, r3, #7
 800442e:	4413      	add	r3, r2
 8004430:	3384      	adds	r3, #132	; 0x84
 8004432:	461a      	mov	r2, r3
 8004434:	2300      	movs	r3, #0
 8004436:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	01db      	lsls	r3, r3, #7
 8004442:	4413      	add	r3, r2
 8004444:	3384      	adds	r3, #132	; 0x84
 8004446:	461a      	mov	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d102      	bne.n	800445c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004456:	2304      	movs	r3, #4
 8004458:	61fb      	str	r3, [r7, #28]
 800445a:	e01b      	b.n	8004494 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d102      	bne.n	800446a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004464:	2303      	movs	r3, #3
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	e014      	b.n	8004494 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b04      	cmp	r3, #4
 8004470:	d00b      	beq.n	800448a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004476:	2b02      	cmp	r3, #2
 8004478:	d007      	beq.n	800448a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800447e:	2b03      	cmp	r3, #3
 8004480:	d003      	beq.n	800448a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004486:	2b07      	cmp	r3, #7
 8004488:	d102      	bne.n	8004490 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800448a:	2302      	movs	r3, #2
 800448c:	61fb      	str	r3, [r7, #28]
 800448e:	e001      	b.n	8004494 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004490:	2301      	movs	r3, #1
 8004492:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	01db      	lsls	r3, r3, #7
 800449e:	4413      	add	r3, r2
 80044a0:	3384      	adds	r3, #132	; 0x84
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	6812      	ldr	r2, [r2, #0]
 80044a8:	4611      	mov	r1, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	01d2      	lsls	r2, r2, #7
 80044ae:	440a      	add	r2, r1
 80044b0:	3284      	adds	r2, #132	; 0x84
 80044b2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80044b6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	69fa      	ldr	r2, [r7, #28]
 80044be:	fb02 f303 	mul.w	r3, r2, r3
 80044c2:	041a      	lsls	r2, r3, #16
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	6859      	ldr	r1, [r3, #4]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	1acb      	subs	r3, r1, r3
 80044ce:	69f9      	ldr	r1, [r7, #28]
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	3303      	adds	r3, #3
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	6809      	ldr	r1, [r1, #0]
 80044da:	4608      	mov	r0, r1
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	01c9      	lsls	r1, r1, #7
 80044e0:	4401      	add	r1, r0
 80044e2:	3184      	adds	r1, #132	; 0x84
 80044e4:	4313      	orrs	r3, r2
 80044e6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	01db      	lsls	r3, r3, #7
 80044f2:	4413      	add	r3, r2
 80044f4:	3384      	adds	r3, #132	; 0x84
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	6812      	ldr	r2, [r2, #0]
 80044fc:	4611      	mov	r1, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	01d2      	lsls	r2, r2, #7
 8004502:	440a      	add	r2, r1
 8004504:	3284      	adds	r2, #132	; 0x84
 8004506:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800450a:	f023 0307 	bic.w	r3, r3, #7
 800450e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	01db      	lsls	r3, r3, #7
 800451a:	4413      	add	r3, r2
 800451c:	3384      	adds	r3, #132	; 0x84
 800451e:	461a      	mov	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	01db      	lsls	r3, r3, #7
 8004530:	4413      	add	r3, r2
 8004532:	3384      	adds	r3, #132	; 0x84
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	4611      	mov	r1, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	01d2      	lsls	r2, r2, #7
 8004540:	440a      	add	r2, r1
 8004542:	3284      	adds	r2, #132	; 0x84
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	6013      	str	r3, [r2, #0]
}
 800454a:	bf00      	nop
 800454c:	3724      	adds	r7, #36	; 0x24
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e264      	b.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d075      	beq.n	8004662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004576:	4ba3      	ldr	r3, [pc, #652]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	2b04      	cmp	r3, #4
 8004580:	d00c      	beq.n	800459c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004582:	4ba0      	ldr	r3, [pc, #640]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800458a:	2b08      	cmp	r3, #8
 800458c:	d112      	bne.n	80045b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458e:	4b9d      	ldr	r3, [pc, #628]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800459a:	d10b      	bne.n	80045b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459c:	4b99      	ldr	r3, [pc, #612]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d05b      	beq.n	8004660 <HAL_RCC_OscConfig+0x108>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d157      	bne.n	8004660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e23f      	b.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045bc:	d106      	bne.n	80045cc <HAL_RCC_OscConfig+0x74>
 80045be:	4b91      	ldr	r3, [pc, #580]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a90      	ldr	r2, [pc, #576]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	e01d      	b.n	8004608 <HAL_RCC_OscConfig+0xb0>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x98>
 80045d6:	4b8b      	ldr	r3, [pc, #556]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a8a      	ldr	r2, [pc, #552]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	4b88      	ldr	r3, [pc, #544]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a87      	ldr	r2, [pc, #540]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 80045e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	e00b      	b.n	8004608 <HAL_RCC_OscConfig+0xb0>
 80045f0:	4b84      	ldr	r3, [pc, #528]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a83      	ldr	r2, [pc, #524]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 80045f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	4b81      	ldr	r3, [pc, #516]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a80      	ldr	r2, [pc, #512]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 8004602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d013      	beq.n	8004638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004610:	f7fd f9cc 	bl	80019ac <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004618:	f7fd f9c8 	bl	80019ac <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b64      	cmp	r3, #100	; 0x64
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e204      	b.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462a:	4b76      	ldr	r3, [pc, #472]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0xc0>
 8004636:	e014      	b.n	8004662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004638:	f7fd f9b8 	bl	80019ac <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004640:	f7fd f9b4 	bl	80019ac <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b64      	cmp	r3, #100	; 0x64
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e1f0      	b.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004652:	4b6c      	ldr	r3, [pc, #432]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0xe8>
 800465e:	e000      	b.n	8004662 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d063      	beq.n	8004736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800466e:	4b65      	ldr	r3, [pc, #404]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00b      	beq.n	8004692 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800467a:	4b62      	ldr	r3, [pc, #392]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004682:	2b08      	cmp	r3, #8
 8004684:	d11c      	bne.n	80046c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004686:	4b5f      	ldr	r3, [pc, #380]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d116      	bne.n	80046c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004692:	4b5c      	ldr	r3, [pc, #368]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <HAL_RCC_OscConfig+0x152>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d001      	beq.n	80046aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e1c4      	b.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046aa:	4b56      	ldr	r3, [pc, #344]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4952      	ldr	r1, [pc, #328]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046be:	e03a      	b.n	8004736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d020      	beq.n	800470a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c8:	4b4f      	ldr	r3, [pc, #316]	; (8004808 <HAL_RCC_OscConfig+0x2b0>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7fd f96d 	bl	80019ac <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d6:	f7fd f969 	bl	80019ac <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e1a5      	b.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e8:	4b46      	ldr	r3, [pc, #280]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f4:	4b43      	ldr	r3, [pc, #268]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	4940      	ldr	r1, [pc, #256]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 8004704:	4313      	orrs	r3, r2
 8004706:	600b      	str	r3, [r1, #0]
 8004708:	e015      	b.n	8004736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800470a:	4b3f      	ldr	r3, [pc, #252]	; (8004808 <HAL_RCC_OscConfig+0x2b0>)
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fd f94c 	bl	80019ac <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004718:	f7fd f948 	bl	80019ac <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e184      	b.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800472a:	4b36      	ldr	r3, [pc, #216]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d030      	beq.n	80047a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d016      	beq.n	8004778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800474a:	4b30      	ldr	r3, [pc, #192]	; (800480c <HAL_RCC_OscConfig+0x2b4>)
 800474c:	2201      	movs	r2, #1
 800474e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fd f92c 	bl	80019ac <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004758:	f7fd f928 	bl	80019ac <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e164      	b.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800476a:	4b26      	ldr	r3, [pc, #152]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 800476c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x200>
 8004776:	e015      	b.n	80047a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004778:	4b24      	ldr	r3, [pc, #144]	; (800480c <HAL_RCC_OscConfig+0x2b4>)
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477e:	f7fd f915 	bl	80019ac <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004786:	f7fd f911 	bl	80019ac <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e14d      	b.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004798:	4b1a      	ldr	r3, [pc, #104]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 800479a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f0      	bne.n	8004786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80a0 	beq.w	80048f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b2:	2300      	movs	r3, #0
 80047b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047b6:	4b13      	ldr	r3, [pc, #76]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10f      	bne.n	80047e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	4a0e      	ldr	r2, [pc, #56]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 80047cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d0:	6413      	str	r3, [r2, #64]	; 0x40
 80047d2:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <HAL_RCC_OscConfig+0x2ac>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047de:	2301      	movs	r3, #1
 80047e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e2:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <HAL_RCC_OscConfig+0x2b8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d121      	bne.n	8004832 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ee:	4b08      	ldr	r3, [pc, #32]	; (8004810 <HAL_RCC_OscConfig+0x2b8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a07      	ldr	r2, [pc, #28]	; (8004810 <HAL_RCC_OscConfig+0x2b8>)
 80047f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047fa:	f7fd f8d7 	bl	80019ac <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004800:	e011      	b.n	8004826 <HAL_RCC_OscConfig+0x2ce>
 8004802:	bf00      	nop
 8004804:	40023800 	.word	0x40023800
 8004808:	42470000 	.word	0x42470000
 800480c:	42470e80 	.word	0x42470e80
 8004810:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004814:	f7fd f8ca 	bl	80019ac <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e106      	b.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004826:	4b85      	ldr	r3, [pc, #532]	; (8004a3c <HAL_RCC_OscConfig+0x4e4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d106      	bne.n	8004848 <HAL_RCC_OscConfig+0x2f0>
 800483a:	4b81      	ldr	r3, [pc, #516]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 800483c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483e:	4a80      	ldr	r2, [pc, #512]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 8004840:	f043 0301 	orr.w	r3, r3, #1
 8004844:	6713      	str	r3, [r2, #112]	; 0x70
 8004846:	e01c      	b.n	8004882 <HAL_RCC_OscConfig+0x32a>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b05      	cmp	r3, #5
 800484e:	d10c      	bne.n	800486a <HAL_RCC_OscConfig+0x312>
 8004850:	4b7b      	ldr	r3, [pc, #492]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	4a7a      	ldr	r2, [pc, #488]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 8004856:	f043 0304 	orr.w	r3, r3, #4
 800485a:	6713      	str	r3, [r2, #112]	; 0x70
 800485c:	4b78      	ldr	r3, [pc, #480]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004860:	4a77      	ldr	r2, [pc, #476]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	6713      	str	r3, [r2, #112]	; 0x70
 8004868:	e00b      	b.n	8004882 <HAL_RCC_OscConfig+0x32a>
 800486a:	4b75      	ldr	r3, [pc, #468]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 800486c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486e:	4a74      	ldr	r2, [pc, #464]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 8004870:	f023 0301 	bic.w	r3, r3, #1
 8004874:	6713      	str	r3, [r2, #112]	; 0x70
 8004876:	4b72      	ldr	r3, [pc, #456]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 8004878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487a:	4a71      	ldr	r2, [pc, #452]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 800487c:	f023 0304 	bic.w	r3, r3, #4
 8004880:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d015      	beq.n	80048b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488a:	f7fd f88f 	bl	80019ac <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004890:	e00a      	b.n	80048a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004892:	f7fd f88b 	bl	80019ac <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e0c5      	b.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a8:	4b65      	ldr	r3, [pc, #404]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 80048aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0ee      	beq.n	8004892 <HAL_RCC_OscConfig+0x33a>
 80048b4:	e014      	b.n	80048e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b6:	f7fd f879 	bl	80019ac <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048bc:	e00a      	b.n	80048d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048be:	f7fd f875 	bl	80019ac <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e0af      	b.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d4:	4b5a      	ldr	r3, [pc, #360]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1ee      	bne.n	80048be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d105      	bne.n	80048f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e6:	4b56      	ldr	r3, [pc, #344]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	4a55      	ldr	r2, [pc, #340]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 80048ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 809b 	beq.w	8004a32 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048fc:	4b50      	ldr	r3, [pc, #320]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 030c 	and.w	r3, r3, #12
 8004904:	2b08      	cmp	r3, #8
 8004906:	d05c      	beq.n	80049c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d141      	bne.n	8004994 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004910:	4b4c      	ldr	r3, [pc, #304]	; (8004a44 <HAL_RCC_OscConfig+0x4ec>)
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004916:	f7fd f849 	bl	80019ac <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800491e:	f7fd f845 	bl	80019ac <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e081      	b.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004930:	4b43      	ldr	r3, [pc, #268]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1f0      	bne.n	800491e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	69da      	ldr	r2, [r3, #28]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	019b      	lsls	r3, r3, #6
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	085b      	lsrs	r3, r3, #1
 8004954:	3b01      	subs	r3, #1
 8004956:	041b      	lsls	r3, r3, #16
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	061b      	lsls	r3, r3, #24
 8004960:	4937      	ldr	r1, [pc, #220]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 8004962:	4313      	orrs	r3, r2
 8004964:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004966:	4b37      	ldr	r3, [pc, #220]	; (8004a44 <HAL_RCC_OscConfig+0x4ec>)
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496c:	f7fd f81e 	bl	80019ac <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004974:	f7fd f81a 	bl	80019ac <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e056      	b.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004986:	4b2e      	ldr	r3, [pc, #184]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0x41c>
 8004992:	e04e      	b.n	8004a32 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004994:	4b2b      	ldr	r3, [pc, #172]	; (8004a44 <HAL_RCC_OscConfig+0x4ec>)
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499a:	f7fd f807 	bl	80019ac <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a2:	f7fd f803 	bl	80019ac <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e03f      	b.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b4:	4b22      	ldr	r3, [pc, #136]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f0      	bne.n	80049a2 <HAL_RCC_OscConfig+0x44a>
 80049c0:	e037      	b.n	8004a32 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e032      	b.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049ce:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <HAL_RCC_OscConfig+0x4e8>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d028      	beq.n	8004a2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d121      	bne.n	8004a2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d11a      	bne.n	8004a2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049fe:	4013      	ands	r3, r2
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a04:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d111      	bne.n	8004a2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	085b      	lsrs	r3, r3, #1
 8004a16:	3b01      	subs	r3, #1
 8004a18:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d107      	bne.n	8004a2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d001      	beq.n	8004a32 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40007000 	.word	0x40007000
 8004a40:	40023800 	.word	0x40023800
 8004a44:	42470060 	.word	0x42470060

08004a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0cc      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a5c:	4b68      	ldr	r3, [pc, #416]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d90c      	bls.n	8004a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6a:	4b65      	ldr	r3, [pc, #404]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a72:	4b63      	ldr	r3, [pc, #396]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0b8      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d020      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a9c:	4b59      	ldr	r3, [pc, #356]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	4a58      	ldr	r2, [pc, #352]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ab4:	4b53      	ldr	r3, [pc, #332]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	4a52      	ldr	r2, [pc, #328]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac0:	4b50      	ldr	r3, [pc, #320]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	494d      	ldr	r1, [pc, #308]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d044      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d107      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae6:	4b47      	ldr	r3, [pc, #284]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d119      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e07f      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d003      	beq.n	8004b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b06:	4b3f      	ldr	r3, [pc, #252]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e06f      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b16:	4b3b      	ldr	r3, [pc, #236]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e067      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b26:	4b37      	ldr	r3, [pc, #220]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f023 0203 	bic.w	r2, r3, #3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4934      	ldr	r1, [pc, #208]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b38:	f7fc ff38 	bl	80019ac <HAL_GetTick>
 8004b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3e:	e00a      	b.n	8004b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b40:	f7fc ff34 	bl	80019ac <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e04f      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b56:	4b2b      	ldr	r3, [pc, #172]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 020c 	and.w	r2, r3, #12
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d1eb      	bne.n	8004b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b68:	4b25      	ldr	r3, [pc, #148]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d20c      	bcs.n	8004b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b76:	4b22      	ldr	r3, [pc, #136]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7e:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e032      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b9c:	4b19      	ldr	r3, [pc, #100]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4916      	ldr	r1, [pc, #88]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d009      	beq.n	8004bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bba:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	490e      	ldr	r1, [pc, #56]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bce:	f000 f821 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	091b      	lsrs	r3, r3, #4
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	490a      	ldr	r1, [pc, #40]	; (8004c08 <HAL_RCC_ClockConfig+0x1c0>)
 8004be0:	5ccb      	ldrb	r3, [r1, r3]
 8004be2:	fa22 f303 	lsr.w	r3, r2, r3
 8004be6:	4a09      	ldr	r2, [pc, #36]	; (8004c0c <HAL_RCC_ClockConfig+0x1c4>)
 8004be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bea:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <HAL_RCC_ClockConfig+0x1c8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fc fb90 	bl	8001314 <HAL_InitTick>

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40023c00 	.word	0x40023c00
 8004c04:	40023800 	.word	0x40023800
 8004c08:	08007208 	.word	0x08007208
 8004c0c:	20000000 	.word	0x20000000
 8004c10:	20000004 	.word	0x20000004

08004c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	607b      	str	r3, [r7, #4]
 8004c20:	2300      	movs	r3, #0
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	2300      	movs	r3, #0
 8004c26:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c2c:	4b67      	ldr	r3, [pc, #412]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 030c 	and.w	r3, r3, #12
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d00d      	beq.n	8004c54 <HAL_RCC_GetSysClockFreq+0x40>
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	f200 80bd 	bhi.w	8004db8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <HAL_RCC_GetSysClockFreq+0x34>
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d003      	beq.n	8004c4e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c46:	e0b7      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c48:	4b61      	ldr	r3, [pc, #388]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c4a:	60bb      	str	r3, [r7, #8]
       break;
 8004c4c:	e0b7      	b.n	8004dbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c4e:	4b61      	ldr	r3, [pc, #388]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004c50:	60bb      	str	r3, [r7, #8]
      break;
 8004c52:	e0b4      	b.n	8004dbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c54:	4b5d      	ldr	r3, [pc, #372]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c5e:	4b5b      	ldr	r3, [pc, #364]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d04d      	beq.n	8004d06 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c6a:	4b58      	ldr	r3, [pc, #352]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	099b      	lsrs	r3, r3, #6
 8004c70:	461a      	mov	r2, r3
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c7a:	f04f 0100 	mov.w	r1, #0
 8004c7e:	ea02 0800 	and.w	r8, r2, r0
 8004c82:	ea03 0901 	and.w	r9, r3, r1
 8004c86:	4640      	mov	r0, r8
 8004c88:	4649      	mov	r1, r9
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	014b      	lsls	r3, r1, #5
 8004c94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c98:	0142      	lsls	r2, r0, #5
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	ebb0 0008 	subs.w	r0, r0, r8
 8004ca2:	eb61 0109 	sbc.w	r1, r1, r9
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	018b      	lsls	r3, r1, #6
 8004cb0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004cb4:	0182      	lsls	r2, r0, #6
 8004cb6:	1a12      	subs	r2, r2, r0
 8004cb8:	eb63 0301 	sbc.w	r3, r3, r1
 8004cbc:	f04f 0000 	mov.w	r0, #0
 8004cc0:	f04f 0100 	mov.w	r1, #0
 8004cc4:	00d9      	lsls	r1, r3, #3
 8004cc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cca:	00d0      	lsls	r0, r2, #3
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	eb12 0208 	adds.w	r2, r2, r8
 8004cd4:	eb43 0309 	adc.w	r3, r3, r9
 8004cd8:	f04f 0000 	mov.w	r0, #0
 8004cdc:	f04f 0100 	mov.w	r1, #0
 8004ce0:	0259      	lsls	r1, r3, #9
 8004ce2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004ce6:	0250      	lsls	r0, r2, #9
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4610      	mov	r0, r2
 8004cee:	4619      	mov	r1, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	f7fb fa78 	bl	80001ec <__aeabi_uldivmod>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4613      	mov	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	e04a      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d06:	4b31      	ldr	r3, [pc, #196]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	099b      	lsrs	r3, r3, #6
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d16:	f04f 0100 	mov.w	r1, #0
 8004d1a:	ea02 0400 	and.w	r4, r2, r0
 8004d1e:	ea03 0501 	and.w	r5, r3, r1
 8004d22:	4620      	mov	r0, r4
 8004d24:	4629      	mov	r1, r5
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	014b      	lsls	r3, r1, #5
 8004d30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d34:	0142      	lsls	r2, r0, #5
 8004d36:	4610      	mov	r0, r2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	1b00      	subs	r0, r0, r4
 8004d3c:	eb61 0105 	sbc.w	r1, r1, r5
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	018b      	lsls	r3, r1, #6
 8004d4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d4e:	0182      	lsls	r2, r0, #6
 8004d50:	1a12      	subs	r2, r2, r0
 8004d52:	eb63 0301 	sbc.w	r3, r3, r1
 8004d56:	f04f 0000 	mov.w	r0, #0
 8004d5a:	f04f 0100 	mov.w	r1, #0
 8004d5e:	00d9      	lsls	r1, r3, #3
 8004d60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d64:	00d0      	lsls	r0, r2, #3
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	1912      	adds	r2, r2, r4
 8004d6c:	eb45 0303 	adc.w	r3, r5, r3
 8004d70:	f04f 0000 	mov.w	r0, #0
 8004d74:	f04f 0100 	mov.w	r1, #0
 8004d78:	0299      	lsls	r1, r3, #10
 8004d7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004d7e:	0290      	lsls	r0, r2, #10
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	f7fb fa2c 	bl	80001ec <__aeabi_uldivmod>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4613      	mov	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d9c:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	0c1b      	lsrs	r3, r3, #16
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	3301      	adds	r3, #1
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db4:	60bb      	str	r3, [r7, #8]
      break;
 8004db6:	e002      	b.n	8004dbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004db8:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004dba:	60bb      	str	r3, [r7, #8]
      break;
 8004dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004dca:	bf00      	nop
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	00f42400 	.word	0x00f42400
 8004dd4:	007a1200 	.word	0x007a1200

08004dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ddc:	4b03      	ldr	r3, [pc, #12]	; (8004dec <HAL_RCC_GetHCLKFreq+0x14>)
 8004dde:	681b      	ldr	r3, [r3, #0]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000000 	.word	0x20000000

08004df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004df4:	f7ff fff0 	bl	8004dd8 <HAL_RCC_GetHCLKFreq>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	0a9b      	lsrs	r3, r3, #10
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	4903      	ldr	r1, [pc, #12]	; (8004e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e06:	5ccb      	ldrb	r3, [r1, r3]
 8004e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40023800 	.word	0x40023800
 8004e14:	08007218 	.word	0x08007218

08004e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e1c:	f7ff ffdc 	bl	8004dd8 <HAL_RCC_GetHCLKFreq>
 8004e20:	4602      	mov	r2, r0
 8004e22:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	0b5b      	lsrs	r3, r3, #13
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	4903      	ldr	r1, [pc, #12]	; (8004e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e2e:	5ccb      	ldrb	r3, [r1, r3]
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40023800 	.word	0x40023800
 8004e3c:	08007218 	.word	0x08007218

08004e40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	220f      	movs	r2, #15
 8004e4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e50:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_RCC_GetClockConfig+0x5c>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f003 0203 	and.w	r2, r3, #3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e5c:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <HAL_RCC_GetClockConfig+0x5c>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e68:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <HAL_RCC_GetClockConfig+0x5c>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e74:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <HAL_RCC_GetClockConfig+0x5c>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	08db      	lsrs	r3, r3, #3
 8004e7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e82:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <HAL_RCC_GetClockConfig+0x60>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 020f 	and.w	r2, r3, #15
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	601a      	str	r2, [r3, #0]
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	40023c00 	.word	0x40023c00

08004ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10b      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d105      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d075      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ed8:	4bad      	ldr	r3, [pc, #692]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ede:	f7fc fd65 	bl	80019ac <HAL_GetTick>
 8004ee2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ee6:	f7fc fd61 	bl	80019ac <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e18b      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ef8:	4ba6      	ldr	r3, [pc, #664]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f0      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d009      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	019a      	lsls	r2, r3, #6
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	071b      	lsls	r3, r3, #28
 8004f1c:	499d      	ldr	r1, [pc, #628]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01f      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f30:	4b98      	ldr	r3, [pc, #608]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f36:	0f1b      	lsrs	r3, r3, #28
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	019a      	lsls	r2, r3, #6
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	061b      	lsls	r3, r3, #24
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	071b      	lsls	r3, r3, #28
 8004f50:	4990      	ldr	r1, [pc, #576]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f58:	4b8e      	ldr	r3, [pc, #568]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f5e:	f023 021f 	bic.w	r2, r3, #31
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	498a      	ldr	r1, [pc, #552]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00d      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	019a      	lsls	r2, r3, #6
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	061b      	lsls	r3, r3, #24
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	071b      	lsls	r3, r3, #28
 8004f90:	4980      	ldr	r1, [pc, #512]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f98:	4b7d      	ldr	r3, [pc, #500]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f9e:	f7fc fd05 	bl	80019ac <HAL_GetTick>
 8004fa2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fa6:	f7fc fd01 	bl	80019ac <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e12b      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fb8:	4b76      	ldr	r3, [pc, #472]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d105      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d079      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fdc:	4b6e      	ldr	r3, [pc, #440]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fe2:	f7fc fce3 	bl	80019ac <HAL_GetTick>
 8004fe6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004fea:	f7fc fcdf 	bl	80019ac <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e109      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ffc:	4b65      	ldr	r3, [pc, #404]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005008:	d0ef      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b00      	cmp	r3, #0
 8005014:	d020      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005016:	4b5f      	ldr	r3, [pc, #380]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501c:	0f1b      	lsrs	r3, r3, #28
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	019a      	lsls	r2, r3, #6
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	061b      	lsls	r3, r3, #24
 8005030:	431a      	orrs	r2, r3
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	071b      	lsls	r3, r3, #28
 8005036:	4957      	ldr	r1, [pc, #348]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800503e:	4b55      	ldr	r3, [pc, #340]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005044:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	3b01      	subs	r3, #1
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	4950      	ldr	r1, [pc, #320]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01e      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005064:	4b4b      	ldr	r3, [pc, #300]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506a:	0e1b      	lsrs	r3, r3, #24
 800506c:	f003 030f 	and.w	r3, r3, #15
 8005070:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	019a      	lsls	r2, r3, #6
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	061b      	lsls	r3, r3, #24
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	071b      	lsls	r3, r3, #28
 8005084:	4943      	ldr	r1, [pc, #268]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800508c:	4b41      	ldr	r3, [pc, #260]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800508e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005092:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	493e      	ldr	r1, [pc, #248]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80050a2:	4b3d      	ldr	r3, [pc, #244]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050a4:	2201      	movs	r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050a8:	f7fc fc80 	bl	80019ac <HAL_GetTick>
 80050ac:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80050b0:	f7fc fc7c 	bl	80019ac <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e0a6      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050c2:	4b34      	ldr	r3, [pc, #208]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ce:	d1ef      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 808d 	beq.w	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	4b2c      	ldr	r3, [pc, #176]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	4a2b      	ldr	r2, [pc, #172]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ec:	6413      	str	r3, [r2, #64]	; 0x40
 80050ee:	4b29      	ldr	r3, [pc, #164]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050fa:	4b28      	ldr	r3, [pc, #160]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a27      	ldr	r2, [pc, #156]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005104:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005106:	f7fc fc51 	bl	80019ac <HAL_GetTick>
 800510a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800510c:	e008      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800510e:	f7fc fc4d 	bl	80019ac <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e077      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005120:	4b1e      	ldr	r3, [pc, #120]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0f0      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800512c:	4b19      	ldr	r3, [pc, #100]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005134:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d039      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	429a      	cmp	r2, r3
 8005148:	d032      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800514a:	4b12      	ldr	r3, [pc, #72]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005152:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005154:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005156:	2201      	movs	r2, #1
 8005158:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800515a:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005160:	4a0c      	ldr	r2, [pc, #48]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005166:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b01      	cmp	r3, #1
 8005170:	d11e      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005172:	f7fc fc1b 	bl	80019ac <HAL_GetTick>
 8005176:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005178:	e014      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800517a:	f7fc fc17 	bl	80019ac <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	f241 3288 	movw	r2, #5000	; 0x1388
 8005188:	4293      	cmp	r3, r2
 800518a:	d90b      	bls.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e03f      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005190:	42470068 	.word	0x42470068
 8005194:	40023800 	.word	0x40023800
 8005198:	42470070 	.word	0x42470070
 800519c:	40007000 	.word	0x40007000
 80051a0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a4:	4b1c      	ldr	r3, [pc, #112]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0e4      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051bc:	d10d      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x336>
 80051be:	4b16      	ldr	r3, [pc, #88]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80051ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d2:	4911      	ldr	r1, [pc, #68]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	608b      	str	r3, [r1, #8]
 80051d8:	e005      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80051da:	4b0f      	ldr	r3, [pc, #60]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	4a0e      	ldr	r2, [pc, #56]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051e4:	6093      	str	r3, [r2, #8]
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f2:	4909      	ldr	r1, [pc, #36]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b00      	cmp	r3, #0
 8005202:	d004      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800520a:	4b04      	ldr	r3, [pc, #16]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800520c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40023800 	.word	0x40023800
 800521c:	424711e0 	.word	0x424711e0

08005220 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e025      	b.n	8005280 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d106      	bne.n	800524e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7fb fabd 	bl	80007c8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2202      	movs	r2, #2
 8005252:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3304      	adds	r3, #4
 800525e:	4619      	mov	r1, r3
 8005260:	4610      	mov	r0, r2
 8005262:	f001 fadd 	bl	8006820 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	461a      	mov	r2, r3
 8005270:	6839      	ldr	r1, [r7, #0]
 8005272:	f001 fb48 	bl	8006906 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e07b      	b.n	8005392 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d108      	bne.n	80052b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052aa:	d009      	beq.n	80052c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	61da      	str	r2, [r3, #28]
 80052b2:	e005      	b.n	80052c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fb ffaa 	bl	8001234 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005344:	ea42 0103 	orr.w	r1, r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	0c1b      	lsrs	r3, r3, #16
 800535e:	f003 0104 	and.w	r1, r3, #4
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	f003 0210 	and.w	r2, r3, #16
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005380:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b082      	sub	sp, #8
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e041      	b.n	8005430 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d106      	bne.n	80053c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7fc f8c7 	bl	8001554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2202      	movs	r2, #2
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3304      	adds	r3, #4
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f000 fa91 	bl	8005900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b01      	cmp	r3, #1
 800544a:	d001      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e04e      	b.n	80054ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a23      	ldr	r2, [pc, #140]	; (80054fc <HAL_TIM_Base_Start_IT+0xc4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d022      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x80>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547a:	d01d      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x80>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a1f      	ldr	r2, [pc, #124]	; (8005500 <HAL_TIM_Base_Start_IT+0xc8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d018      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x80>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a1e      	ldr	r2, [pc, #120]	; (8005504 <HAL_TIM_Base_Start_IT+0xcc>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d013      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x80>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a1c      	ldr	r2, [pc, #112]	; (8005508 <HAL_TIM_Base_Start_IT+0xd0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00e      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x80>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a1b      	ldr	r2, [pc, #108]	; (800550c <HAL_TIM_Base_Start_IT+0xd4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d009      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x80>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a19      	ldr	r2, [pc, #100]	; (8005510 <HAL_TIM_Base_Start_IT+0xd8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d004      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x80>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a18      	ldr	r2, [pc, #96]	; (8005514 <HAL_TIM_Base_Start_IT+0xdc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d111      	bne.n	80054dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 0307 	and.w	r3, r3, #7
 80054c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b06      	cmp	r3, #6
 80054c8:	d010      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0201 	orr.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054da:	e007      	b.n	80054ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	40010000 	.word	0x40010000
 8005500:	40000400 	.word	0x40000400
 8005504:	40000800 	.word	0x40000800
 8005508:	40000c00 	.word	0x40000c00
 800550c:	40010400 	.word	0x40010400
 8005510:	40014000 	.word	0x40014000
 8005514:	40001800 	.word	0x40001800

08005518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b02      	cmp	r3, #2
 800552c:	d122      	bne.n	8005574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b02      	cmp	r3, #2
 800553a:	d11b      	bne.n	8005574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0202 	mvn.w	r2, #2
 8005544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f9b2 	bl	80058c4 <HAL_TIM_IC_CaptureCallback>
 8005560:	e005      	b.n	800556e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f9a4 	bl	80058b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f9b5 	bl	80058d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b04      	cmp	r3, #4
 8005580:	d122      	bne.n	80055c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b04      	cmp	r3, #4
 800558e:	d11b      	bne.n	80055c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0204 	mvn.w	r2, #4
 8005598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2202      	movs	r2, #2
 800559e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f988 	bl	80058c4 <HAL_TIM_IC_CaptureCallback>
 80055b4:	e005      	b.n	80055c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f97a 	bl	80058b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f98b 	bl	80058d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d122      	bne.n	800561c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d11b      	bne.n	800561c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0208 	mvn.w	r2, #8
 80055ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2204      	movs	r2, #4
 80055f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f95e 	bl	80058c4 <HAL_TIM_IC_CaptureCallback>
 8005608:	e005      	b.n	8005616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f950 	bl	80058b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f961 	bl	80058d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0310 	and.w	r3, r3, #16
 8005626:	2b10      	cmp	r3, #16
 8005628:	d122      	bne.n	8005670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b10      	cmp	r3, #16
 8005636:	d11b      	bne.n	8005670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0210 	mvn.w	r2, #16
 8005640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2208      	movs	r2, #8
 8005646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f934 	bl	80058c4 <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f926 	bl	80058b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f937 	bl	80058d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d10e      	bne.n	800569c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b01      	cmp	r3, #1
 800568a:	d107      	bne.n	800569c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0201 	mvn.w	r2, #1
 8005694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fb fd1e 	bl	80010d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a6:	2b80      	cmp	r3, #128	; 0x80
 80056a8:	d10e      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b4:	2b80      	cmp	r3, #128	; 0x80
 80056b6:	d107      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fadc 	bl	8005c80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d10e      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e0:	2b40      	cmp	r3, #64	; 0x40
 80056e2:	d107      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f8fc 	bl	80058ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d10e      	bne.n	8005720 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b20      	cmp	r3, #32
 800570e:	d107      	bne.n	8005720 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0220 	mvn.w	r2, #32
 8005718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 faa6 	bl	8005c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_TIM_ConfigClockSource+0x18>
 800573c:	2302      	movs	r3, #2
 800573e:	e0b3      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x180>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800575e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005766:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005778:	d03e      	beq.n	80057f8 <HAL_TIM_ConfigClockSource+0xd0>
 800577a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800577e:	f200 8087 	bhi.w	8005890 <HAL_TIM_ConfigClockSource+0x168>
 8005782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005786:	f000 8085 	beq.w	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 800578a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578e:	d87f      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 8005790:	2b70      	cmp	r3, #112	; 0x70
 8005792:	d01a      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0xa2>
 8005794:	2b70      	cmp	r3, #112	; 0x70
 8005796:	d87b      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 8005798:	2b60      	cmp	r3, #96	; 0x60
 800579a:	d050      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x116>
 800579c:	2b60      	cmp	r3, #96	; 0x60
 800579e:	d877      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 80057a0:	2b50      	cmp	r3, #80	; 0x50
 80057a2:	d03c      	beq.n	800581e <HAL_TIM_ConfigClockSource+0xf6>
 80057a4:	2b50      	cmp	r3, #80	; 0x50
 80057a6:	d873      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	d058      	beq.n	800585e <HAL_TIM_ConfigClockSource+0x136>
 80057ac:	2b40      	cmp	r3, #64	; 0x40
 80057ae:	d86f      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 80057b0:	2b30      	cmp	r3, #48	; 0x30
 80057b2:	d064      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x156>
 80057b4:	2b30      	cmp	r3, #48	; 0x30
 80057b6:	d86b      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d060      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x156>
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d867      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d05c      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x156>
 80057c4:	2b10      	cmp	r3, #16
 80057c6:	d05a      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80057c8:	e062      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6899      	ldr	r1, [r3, #8]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f000 f9ab 	bl	8005b34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	609a      	str	r2, [r3, #8]
      break;
 80057f6:	e04e      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	6899      	ldr	r1, [r3, #8]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f000 f994 	bl	8005b34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800581a:	609a      	str	r2, [r3, #8]
      break;
 800581c:	e03b      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	6859      	ldr	r1, [r3, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	461a      	mov	r2, r3
 800582c:	f000 f908 	bl	8005a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2150      	movs	r1, #80	; 0x50
 8005836:	4618      	mov	r0, r3
 8005838:	f000 f961 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 800583c:	e02b      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6859      	ldr	r1, [r3, #4]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	461a      	mov	r2, r3
 800584c:	f000 f927 	bl	8005a9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2160      	movs	r1, #96	; 0x60
 8005856:	4618      	mov	r0, r3
 8005858:	f000 f951 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 800585c:	e01b      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6859      	ldr	r1, [r3, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	461a      	mov	r2, r3
 800586c:	f000 f8e8 	bl	8005a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2140      	movs	r1, #64	; 0x40
 8005876:	4618      	mov	r0, r3
 8005878:	f000 f941 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 800587c:	e00b      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4619      	mov	r1, r3
 8005888:	4610      	mov	r0, r2
 800588a:	f000 f938 	bl	8005afe <TIM_ITRx_SetConfig>
        break;
 800588e:	e002      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005890:	bf00      	nop
 8005892:	e000      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005894:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a40      	ldr	r2, [pc, #256]	; (8005a14 <TIM_Base_SetConfig+0x114>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d013      	beq.n	8005940 <TIM_Base_SetConfig+0x40>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591e:	d00f      	beq.n	8005940 <TIM_Base_SetConfig+0x40>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a3d      	ldr	r2, [pc, #244]	; (8005a18 <TIM_Base_SetConfig+0x118>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00b      	beq.n	8005940 <TIM_Base_SetConfig+0x40>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a3c      	ldr	r2, [pc, #240]	; (8005a1c <TIM_Base_SetConfig+0x11c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d007      	beq.n	8005940 <TIM_Base_SetConfig+0x40>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a3b      	ldr	r2, [pc, #236]	; (8005a20 <TIM_Base_SetConfig+0x120>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d003      	beq.n	8005940 <TIM_Base_SetConfig+0x40>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a3a      	ldr	r2, [pc, #232]	; (8005a24 <TIM_Base_SetConfig+0x124>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d108      	bne.n	8005952 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a2f      	ldr	r2, [pc, #188]	; (8005a14 <TIM_Base_SetConfig+0x114>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d02b      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005960:	d027      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a2c      	ldr	r2, [pc, #176]	; (8005a18 <TIM_Base_SetConfig+0x118>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d023      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a2b      	ldr	r2, [pc, #172]	; (8005a1c <TIM_Base_SetConfig+0x11c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d01f      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a2a      	ldr	r2, [pc, #168]	; (8005a20 <TIM_Base_SetConfig+0x120>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d01b      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a29      	ldr	r2, [pc, #164]	; (8005a24 <TIM_Base_SetConfig+0x124>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d017      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a28      	ldr	r2, [pc, #160]	; (8005a28 <TIM_Base_SetConfig+0x128>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a27      	ldr	r2, [pc, #156]	; (8005a2c <TIM_Base_SetConfig+0x12c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00f      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a26      	ldr	r2, [pc, #152]	; (8005a30 <TIM_Base_SetConfig+0x130>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00b      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a25      	ldr	r2, [pc, #148]	; (8005a34 <TIM_Base_SetConfig+0x134>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d007      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a24      	ldr	r2, [pc, #144]	; (8005a38 <TIM_Base_SetConfig+0x138>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d003      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a23      	ldr	r2, [pc, #140]	; (8005a3c <TIM_Base_SetConfig+0x13c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d108      	bne.n	80059c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a0a      	ldr	r2, [pc, #40]	; (8005a14 <TIM_Base_SetConfig+0x114>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d003      	beq.n	80059f8 <TIM_Base_SetConfig+0xf8>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a0c      	ldr	r2, [pc, #48]	; (8005a24 <TIM_Base_SetConfig+0x124>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d103      	bne.n	8005a00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	615a      	str	r2, [r3, #20]
}
 8005a06:	bf00      	nop
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40010000 	.word	0x40010000
 8005a18:	40000400 	.word	0x40000400
 8005a1c:	40000800 	.word	0x40000800
 8005a20:	40000c00 	.word	0x40000c00
 8005a24:	40010400 	.word	0x40010400
 8005a28:	40014000 	.word	0x40014000
 8005a2c:	40014400 	.word	0x40014400
 8005a30:	40014800 	.word	0x40014800
 8005a34:	40001800 	.word	0x40001800
 8005a38:	40001c00 	.word	0x40001c00
 8005a3c:	40002000 	.word	0x40002000

08005a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f023 0201 	bic.w	r2, r3, #1
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f023 030a 	bic.w	r3, r3, #10
 8005a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	621a      	str	r2, [r3, #32]
}
 8005a92:	bf00      	nop
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b087      	sub	sp, #28
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f023 0210 	bic.w	r2, r3, #16
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	031b      	lsls	r3, r3, #12
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ada:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	621a      	str	r2, [r3, #32]
}
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f043 0307 	orr.w	r3, r3, #7
 8005b20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	609a      	str	r2, [r3, #8]
}
 8005b28:	bf00      	nop
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	021a      	lsls	r2, r3, #8
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	431a      	orrs	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	609a      	str	r2, [r3, #8]
}
 8005b68:	bf00      	nop
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e05a      	b.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a21      	ldr	r2, [pc, #132]	; (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d022      	beq.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd8:	d01d      	beq.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d018      	beq.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a1b      	ldr	r2, [pc, #108]	; (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d013      	beq.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a1a      	ldr	r2, [pc, #104]	; (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00e      	beq.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a18      	ldr	r2, [pc, #96]	; (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d009      	beq.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a17      	ldr	r2, [pc, #92]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d004      	beq.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a15      	ldr	r2, [pc, #84]	; (8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d10c      	bne.n	8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	40010000 	.word	0x40010000
 8005c54:	40000400 	.word	0x40000400
 8005c58:	40000800 	.word	0x40000800
 8005c5c:	40000c00 	.word	0x40000c00
 8005c60:	40010400 	.word	0x40010400
 8005c64:	40014000 	.word	0x40014000
 8005c68:	40001800 	.word	0x40001800

08005c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e03f      	b.n	8005d26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7fb fcc0 	bl	8001640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2224      	movs	r2, #36	; 0x24
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fbd9 	bl	8006490 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	695a      	ldr	r2, [r3, #20]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b085      	sub	sp, #20
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d130      	bne.n	8005daa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <HAL_UART_Transmit_IT+0x26>
 8005d4e:	88fb      	ldrh	r3, [r7, #6]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e029      	b.n	8005dac <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_UART_Transmit_IT+0x38>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e022      	b.n	8005dac <HAL_UART_Transmit_IT+0x7e>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	88fa      	ldrh	r2, [r7, #6]
 8005d78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	88fa      	ldrh	r2, [r7, #6]
 8005d7e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2221      	movs	r2, #33	; 0x21
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005da4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	e000      	b.n	8005dac <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005daa:	2302      	movs	r3, #2
  }
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	d11d      	bne.n	8005e0e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <HAL_UART_Receive_IT+0x26>
 8005dd8:	88fb      	ldrh	r3, [r7, #6]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e016      	b.n	8005e10 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_UART_Receive_IT+0x38>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e00f      	b.n	8005e10 <HAL_UART_Receive_IT+0x58>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
 8005e00:	461a      	mov	r2, r3
 8005e02:	68b9      	ldr	r1, [r7, #8]
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 f9c9 	bl	800619c <UART_Start_Receive_IT>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	e000      	b.n	8005e10 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005e0e:	2302      	movs	r3, #2
  }
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08a      	sub	sp, #40	; 0x28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10d      	bne.n	8005e6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	f003 0320 	and.w	r3, r3, #32
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d008      	beq.n	8005e6a <HAL_UART_IRQHandler+0x52>
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fa7d 	bl	8006362 <UART_Receive_IT>
      return;
 8005e68:	e17c      	b.n	8006164 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 80b1 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x1bc>
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d105      	bne.n	8005e88 <HAL_UART_IRQHandler+0x70>
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 80a6 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <HAL_UART_IRQHandler+0x90>
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	f043 0201 	orr.w	r2, r3, #1
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <HAL_UART_IRQHandler+0xb0>
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec0:	f043 0202 	orr.w	r2, r3, #2
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <HAL_UART_IRQHandler+0xd0>
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	f043 0204 	orr.w	r2, r3, #4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00f      	beq.n	8005f12 <HAL_UART_IRQHandler+0xfa>
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d104      	bne.n	8005f06 <HAL_UART_IRQHandler+0xee>
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d005      	beq.n	8005f12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	f043 0208 	orr.w	r2, r3, #8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 811f 	beq.w	800615a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d007      	beq.n	8005f36 <HAL_UART_IRQHandler+0x11e>
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	f003 0320 	and.w	r3, r3, #32
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fa16 	bl	8006362 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f40:	2b40      	cmp	r3, #64	; 0x40
 8005f42:	bf0c      	ite	eq
 8005f44:	2301      	moveq	r3, #1
 8005f46:	2300      	movne	r3, #0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d102      	bne.n	8005f5e <HAL_UART_IRQHandler+0x146>
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d031      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f956 	bl	8006210 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6e:	2b40      	cmp	r3, #64	; 0x40
 8005f70:	d123      	bne.n	8005fba <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	695a      	ldr	r2, [r3, #20]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f80:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d013      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8e:	4a77      	ldr	r2, [pc, #476]	; (800616c <HAL_UART_IRQHandler+0x354>)
 8005f90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fb fea6 	bl	8001ce8 <HAL_DMA_Abort_IT>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d016      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fac:	4610      	mov	r0, r2
 8005fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb0:	e00e      	b.n	8005fd0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f8dc 	bl	8006170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb8:	e00a      	b.n	8005fd0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f8d8 	bl	8006170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc0:	e006      	b.n	8005fd0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f8d4 	bl	8006170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005fce:	e0c4      	b.n	800615a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd0:	bf00      	nop
    return;
 8005fd2:	e0c2      	b.n	800615a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	f040 80a2 	bne.w	8006122 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 809c 	beq.w	8006122 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 8096 	beq.w	8006122 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60fb      	str	r3, [r7, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006016:	2b40      	cmp	r3, #64	; 0x40
 8006018:	d14f      	bne.n	80060ba <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006024:	8a3b      	ldrh	r3, [r7, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 8099 	beq.w	800615e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006030:	8a3a      	ldrh	r2, [r7, #16]
 8006032:	429a      	cmp	r2, r3
 8006034:	f080 8093 	bcs.w	800615e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	8a3a      	ldrh	r2, [r7, #16]
 800603c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006048:	d02b      	beq.n	80060a2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006058:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	695a      	ldr	r2, [r3, #20]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0201 	bic.w	r2, r2, #1
 8006068:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695a      	ldr	r2, [r3, #20]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006078:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0210 	bic.w	r2, r2, #16
 8006096:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	4618      	mov	r0, r3
 800609e:	f7fb fdb3 	bl	8001c08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f866 	bl	8006184 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80060b8:	e051      	b.n	800615e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d047      	beq.n	8006162 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80060d2:	8a7b      	ldrh	r3, [r7, #18]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d044      	beq.n	8006162 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060e6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	695a      	ldr	r2, [r3, #20]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0201 	bic.w	r2, r2, #1
 80060f6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0210 	bic.w	r2, r2, #16
 8006114:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006116:	8a7b      	ldrh	r3, [r7, #18]
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f832 	bl	8006184 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006120:	e01f      	b.n	8006162 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006128:	2b00      	cmp	r3, #0
 800612a:	d008      	beq.n	800613e <HAL_UART_IRQHandler+0x326>
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f8ab 	bl	8006292 <UART_Transmit_IT>
    return;
 800613c:	e012      	b.n	8006164 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00d      	beq.n	8006164 <HAL_UART_IRQHandler+0x34c>
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d008      	beq.n	8006164 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f8ed 	bl	8006332 <UART_EndTransmit_IT>
    return;
 8006158:	e004      	b.n	8006164 <HAL_UART_IRQHandler+0x34c>
    return;
 800615a:	bf00      	nop
 800615c:	e002      	b.n	8006164 <HAL_UART_IRQHandler+0x34c>
      return;
 800615e:	bf00      	nop
 8006160:	e000      	b.n	8006164 <HAL_UART_IRQHandler+0x34c>
      return;
 8006162:	bf00      	nop
  }
}
 8006164:	3728      	adds	r7, #40	; 0x28
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	0800626b 	.word	0x0800626b

08006170 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	4613      	mov	r3, r2
 80061a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	88fa      	ldrh	r2, [r7, #6]
 80061b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	88fa      	ldrh	r2, [r7, #6]
 80061ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2222      	movs	r2, #34	; 0x22
 80061c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061e0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	695a      	ldr	r2, [r3, #20]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0201 	orr.w	r2, r2, #1
 80061f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f042 0220 	orr.w	r2, r2, #32
 8006200:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006226:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695a      	ldr	r2, [r3, #20]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0201 	bic.w	r2, r2, #1
 8006236:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623c:	2b01      	cmp	r3, #1
 800623e:	d107      	bne.n	8006250 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0210 	bic.w	r2, r2, #16
 800624e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff ff73 	bl	8006170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800628a:	bf00      	nop
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006292:	b480      	push	{r7}
 8006294:	b085      	sub	sp, #20
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b21      	cmp	r3, #33	; 0x21
 80062a4:	d13e      	bne.n	8006324 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ae:	d114      	bne.n	80062da <UART_Transmit_IT+0x48>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d110      	bne.n	80062da <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	1c9a      	adds	r2, r3, #2
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	621a      	str	r2, [r3, #32]
 80062d8:	e008      	b.n	80062ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	1c59      	adds	r1, r3, #1
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6211      	str	r1, [r2, #32]
 80062e4:	781a      	ldrb	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	4619      	mov	r1, r3
 80062fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10f      	bne.n	8006320 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800630e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800631e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	e000      	b.n	8006326 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006324:	2302      	movs	r3, #2
  }
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006348:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2220      	movs	r2, #32
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7fb fa1c 	bl	8001790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b22      	cmp	r3, #34	; 0x22
 8006374:	f040 8087 	bne.w	8006486 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006380:	d117      	bne.n	80063b2 <UART_Receive_IT+0x50>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d113      	bne.n	80063b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006392:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063aa:	1c9a      	adds	r2, r3, #2
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	629a      	str	r2, [r3, #40]	; 0x28
 80063b0:	e026      	b.n	8006400 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c4:	d007      	beq.n	80063d6 <UART_Receive_IT+0x74>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <UART_Receive_IT+0x82>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	e008      	b.n	80063f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29b      	uxth	r3, r3
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	4619      	mov	r1, r3
 800640e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006410:	2b00      	cmp	r3, #0
 8006412:	d136      	bne.n	8006482 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0220 	bic.w	r2, r2, #32
 8006422:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006432:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0201 	bic.w	r2, r2, #1
 8006442:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	2b01      	cmp	r3, #1
 8006452:	d10e      	bne.n	8006472 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0210 	bic.w	r2, r2, #16
 8006462:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006468:	4619      	mov	r1, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7ff fe8a 	bl	8006184 <HAL_UARTEx_RxEventCallback>
 8006470:	e002      	b.n	8006478 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fb f996 	bl	80017a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	e002      	b.n	8006488 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	e000      	b.n	8006488 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006486:	2302      	movs	r3, #2
  }
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	b09f      	sub	sp, #124	; 0x7c
 8006496:	af00      	add	r7, sp, #0
 8006498:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800649a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a6:	68d9      	ldr	r1, [r3, #12]
 80064a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	ea40 0301 	orr.w	r3, r0, r1
 80064b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	431a      	orrs	r2, r3
 80064bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	431a      	orrs	r2, r3
 80064c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80064ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064d4:	f021 010c 	bic.w	r1, r1, #12
 80064d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064de:	430b      	orrs	r3, r1
 80064e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ee:	6999      	ldr	r1, [r3, #24]
 80064f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	ea40 0301 	orr.w	r3, r0, r1
 80064f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	4bc5      	ldr	r3, [pc, #788]	; (8006814 <UART_SetConfig+0x384>)
 8006500:	429a      	cmp	r2, r3
 8006502:	d004      	beq.n	800650e <UART_SetConfig+0x7e>
 8006504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	4bc3      	ldr	r3, [pc, #780]	; (8006818 <UART_SetConfig+0x388>)
 800650a:	429a      	cmp	r2, r3
 800650c:	d103      	bne.n	8006516 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800650e:	f7fe fc83 	bl	8004e18 <HAL_RCC_GetPCLK2Freq>
 8006512:	6778      	str	r0, [r7, #116]	; 0x74
 8006514:	e002      	b.n	800651c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006516:	f7fe fc6b 	bl	8004df0 <HAL_RCC_GetPCLK1Freq>
 800651a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800651c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006524:	f040 80b6 	bne.w	8006694 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800652a:	461c      	mov	r4, r3
 800652c:	f04f 0500 	mov.w	r5, #0
 8006530:	4622      	mov	r2, r4
 8006532:	462b      	mov	r3, r5
 8006534:	1891      	adds	r1, r2, r2
 8006536:	6439      	str	r1, [r7, #64]	; 0x40
 8006538:	415b      	adcs	r3, r3
 800653a:	647b      	str	r3, [r7, #68]	; 0x44
 800653c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006540:	1912      	adds	r2, r2, r4
 8006542:	eb45 0303 	adc.w	r3, r5, r3
 8006546:	f04f 0000 	mov.w	r0, #0
 800654a:	f04f 0100 	mov.w	r1, #0
 800654e:	00d9      	lsls	r1, r3, #3
 8006550:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006554:	00d0      	lsls	r0, r2, #3
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	1911      	adds	r1, r2, r4
 800655c:	6639      	str	r1, [r7, #96]	; 0x60
 800655e:	416b      	adcs	r3, r5
 8006560:	667b      	str	r3, [r7, #100]	; 0x64
 8006562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	461a      	mov	r2, r3
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	1891      	adds	r1, r2, r2
 800656e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006570:	415b      	adcs	r3, r3
 8006572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006574:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006578:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800657c:	f7f9 fe36 	bl	80001ec <__aeabi_uldivmod>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4ba5      	ldr	r3, [pc, #660]	; (800681c <UART_SetConfig+0x38c>)
 8006586:	fba3 2302 	umull	r2, r3, r3, r2
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	011e      	lsls	r6, r3, #4
 800658e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006590:	461c      	mov	r4, r3
 8006592:	f04f 0500 	mov.w	r5, #0
 8006596:	4622      	mov	r2, r4
 8006598:	462b      	mov	r3, r5
 800659a:	1891      	adds	r1, r2, r2
 800659c:	6339      	str	r1, [r7, #48]	; 0x30
 800659e:	415b      	adcs	r3, r3
 80065a0:	637b      	str	r3, [r7, #52]	; 0x34
 80065a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80065a6:	1912      	adds	r2, r2, r4
 80065a8:	eb45 0303 	adc.w	r3, r5, r3
 80065ac:	f04f 0000 	mov.w	r0, #0
 80065b0:	f04f 0100 	mov.w	r1, #0
 80065b4:	00d9      	lsls	r1, r3, #3
 80065b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065ba:	00d0      	lsls	r0, r2, #3
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	1911      	adds	r1, r2, r4
 80065c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80065c4:	416b      	adcs	r3, r5
 80065c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	461a      	mov	r2, r3
 80065ce:	f04f 0300 	mov.w	r3, #0
 80065d2:	1891      	adds	r1, r2, r2
 80065d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80065d6:	415b      	adcs	r3, r3
 80065d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80065e2:	f7f9 fe03 	bl	80001ec <__aeabi_uldivmod>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4b8c      	ldr	r3, [pc, #560]	; (800681c <UART_SetConfig+0x38c>)
 80065ec:	fba3 1302 	umull	r1, r3, r3, r2
 80065f0:	095b      	lsrs	r3, r3, #5
 80065f2:	2164      	movs	r1, #100	; 0x64
 80065f4:	fb01 f303 	mul.w	r3, r1, r3
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	3332      	adds	r3, #50	; 0x32
 80065fe:	4a87      	ldr	r2, [pc, #540]	; (800681c <UART_SetConfig+0x38c>)
 8006600:	fba2 2303 	umull	r2, r3, r2, r3
 8006604:	095b      	lsrs	r3, r3, #5
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800660c:	441e      	add	r6, r3
 800660e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006610:	4618      	mov	r0, r3
 8006612:	f04f 0100 	mov.w	r1, #0
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	1894      	adds	r4, r2, r2
 800661c:	623c      	str	r4, [r7, #32]
 800661e:	415b      	adcs	r3, r3
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
 8006622:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006626:	1812      	adds	r2, r2, r0
 8006628:	eb41 0303 	adc.w	r3, r1, r3
 800662c:	f04f 0400 	mov.w	r4, #0
 8006630:	f04f 0500 	mov.w	r5, #0
 8006634:	00dd      	lsls	r5, r3, #3
 8006636:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800663a:	00d4      	lsls	r4, r2, #3
 800663c:	4622      	mov	r2, r4
 800663e:	462b      	mov	r3, r5
 8006640:	1814      	adds	r4, r2, r0
 8006642:	653c      	str	r4, [r7, #80]	; 0x50
 8006644:	414b      	adcs	r3, r1
 8006646:	657b      	str	r3, [r7, #84]	; 0x54
 8006648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	461a      	mov	r2, r3
 800664e:	f04f 0300 	mov.w	r3, #0
 8006652:	1891      	adds	r1, r2, r2
 8006654:	61b9      	str	r1, [r7, #24]
 8006656:	415b      	adcs	r3, r3
 8006658:	61fb      	str	r3, [r7, #28]
 800665a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800665e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006662:	f7f9 fdc3 	bl	80001ec <__aeabi_uldivmod>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4b6c      	ldr	r3, [pc, #432]	; (800681c <UART_SetConfig+0x38c>)
 800666c:	fba3 1302 	umull	r1, r3, r3, r2
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	2164      	movs	r1, #100	; 0x64
 8006674:	fb01 f303 	mul.w	r3, r1, r3
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	3332      	adds	r3, #50	; 0x32
 800667e:	4a67      	ldr	r2, [pc, #412]	; (800681c <UART_SetConfig+0x38c>)
 8006680:	fba2 2303 	umull	r2, r3, r2, r3
 8006684:	095b      	lsrs	r3, r3, #5
 8006686:	f003 0207 	and.w	r2, r3, #7
 800668a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4432      	add	r2, r6
 8006690:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006692:	e0b9      	b.n	8006808 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006696:	461c      	mov	r4, r3
 8006698:	f04f 0500 	mov.w	r5, #0
 800669c:	4622      	mov	r2, r4
 800669e:	462b      	mov	r3, r5
 80066a0:	1891      	adds	r1, r2, r2
 80066a2:	6139      	str	r1, [r7, #16]
 80066a4:	415b      	adcs	r3, r3
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80066ac:	1912      	adds	r2, r2, r4
 80066ae:	eb45 0303 	adc.w	r3, r5, r3
 80066b2:	f04f 0000 	mov.w	r0, #0
 80066b6:	f04f 0100 	mov.w	r1, #0
 80066ba:	00d9      	lsls	r1, r3, #3
 80066bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066c0:	00d0      	lsls	r0, r2, #3
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	eb12 0804 	adds.w	r8, r2, r4
 80066ca:	eb43 0905 	adc.w	r9, r3, r5
 80066ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f04f 0100 	mov.w	r1, #0
 80066d8:	f04f 0200 	mov.w	r2, #0
 80066dc:	f04f 0300 	mov.w	r3, #0
 80066e0:	008b      	lsls	r3, r1, #2
 80066e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80066e6:	0082      	lsls	r2, r0, #2
 80066e8:	4640      	mov	r0, r8
 80066ea:	4649      	mov	r1, r9
 80066ec:	f7f9 fd7e 	bl	80001ec <__aeabi_uldivmod>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4b49      	ldr	r3, [pc, #292]	; (800681c <UART_SetConfig+0x38c>)
 80066f6:	fba3 2302 	umull	r2, r3, r3, r2
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	011e      	lsls	r6, r3, #4
 80066fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006700:	4618      	mov	r0, r3
 8006702:	f04f 0100 	mov.w	r1, #0
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	1894      	adds	r4, r2, r2
 800670c:	60bc      	str	r4, [r7, #8]
 800670e:	415b      	adcs	r3, r3
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006716:	1812      	adds	r2, r2, r0
 8006718:	eb41 0303 	adc.w	r3, r1, r3
 800671c:	f04f 0400 	mov.w	r4, #0
 8006720:	f04f 0500 	mov.w	r5, #0
 8006724:	00dd      	lsls	r5, r3, #3
 8006726:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800672a:	00d4      	lsls	r4, r2, #3
 800672c:	4622      	mov	r2, r4
 800672e:	462b      	mov	r3, r5
 8006730:	1814      	adds	r4, r2, r0
 8006732:	64bc      	str	r4, [r7, #72]	; 0x48
 8006734:	414b      	adcs	r3, r1
 8006736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	4618      	mov	r0, r3
 800673e:	f04f 0100 	mov.w	r1, #0
 8006742:	f04f 0200 	mov.w	r2, #0
 8006746:	f04f 0300 	mov.w	r3, #0
 800674a:	008b      	lsls	r3, r1, #2
 800674c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006750:	0082      	lsls	r2, r0, #2
 8006752:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006756:	f7f9 fd49 	bl	80001ec <__aeabi_uldivmod>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	4b2f      	ldr	r3, [pc, #188]	; (800681c <UART_SetConfig+0x38c>)
 8006760:	fba3 1302 	umull	r1, r3, r3, r2
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	2164      	movs	r1, #100	; 0x64
 8006768:	fb01 f303 	mul.w	r3, r1, r3
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	3332      	adds	r3, #50	; 0x32
 8006772:	4a2a      	ldr	r2, [pc, #168]	; (800681c <UART_SetConfig+0x38c>)
 8006774:	fba2 2303 	umull	r2, r3, r2, r3
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800677e:	441e      	add	r6, r3
 8006780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006782:	4618      	mov	r0, r3
 8006784:	f04f 0100 	mov.w	r1, #0
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	1894      	adds	r4, r2, r2
 800678e:	603c      	str	r4, [r7, #0]
 8006790:	415b      	adcs	r3, r3
 8006792:	607b      	str	r3, [r7, #4]
 8006794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006798:	1812      	adds	r2, r2, r0
 800679a:	eb41 0303 	adc.w	r3, r1, r3
 800679e:	f04f 0400 	mov.w	r4, #0
 80067a2:	f04f 0500 	mov.w	r5, #0
 80067a6:	00dd      	lsls	r5, r3, #3
 80067a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067ac:	00d4      	lsls	r4, r2, #3
 80067ae:	4622      	mov	r2, r4
 80067b0:	462b      	mov	r3, r5
 80067b2:	eb12 0a00 	adds.w	sl, r2, r0
 80067b6:	eb43 0b01 	adc.w	fp, r3, r1
 80067ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	4618      	mov	r0, r3
 80067c0:	f04f 0100 	mov.w	r1, #0
 80067c4:	f04f 0200 	mov.w	r2, #0
 80067c8:	f04f 0300 	mov.w	r3, #0
 80067cc:	008b      	lsls	r3, r1, #2
 80067ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80067d2:	0082      	lsls	r2, r0, #2
 80067d4:	4650      	mov	r0, sl
 80067d6:	4659      	mov	r1, fp
 80067d8:	f7f9 fd08 	bl	80001ec <__aeabi_uldivmod>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4b0e      	ldr	r3, [pc, #56]	; (800681c <UART_SetConfig+0x38c>)
 80067e2:	fba3 1302 	umull	r1, r3, r3, r2
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	2164      	movs	r1, #100	; 0x64
 80067ea:	fb01 f303 	mul.w	r3, r1, r3
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	3332      	adds	r3, #50	; 0x32
 80067f4:	4a09      	ldr	r2, [pc, #36]	; (800681c <UART_SetConfig+0x38c>)
 80067f6:	fba2 2303 	umull	r2, r3, r2, r3
 80067fa:	095b      	lsrs	r3, r3, #5
 80067fc:	f003 020f 	and.w	r2, r3, #15
 8006800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4432      	add	r2, r6
 8006806:	609a      	str	r2, [r3, #8]
}
 8006808:	bf00      	nop
 800680a:	377c      	adds	r7, #124	; 0x7c
 800680c:	46bd      	mov	sp, r7
 800680e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006812:	bf00      	nop
 8006814:	40011000 	.word	0x40011000
 8006818:	40011400 	.word	0x40011400
 800681c:	51eb851f 	.word	0x51eb851f

08006820 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d029      	beq.n	800688e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006846:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800684a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006854:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800685a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8006860:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8006866:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800686c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8006872:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8006878:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800687e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	e034      	b.n	80068f8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800689a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80068a4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80068aa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80068be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068c2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80068cc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80068d2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80068d8:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80068de:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80068e4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006906:	b480      	push	{r7}
 8006908:	b087      	sub	sp, #28
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d02e      	beq.n	800697e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800692c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	3b01      	subs	r3, #1
 800693a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800693c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	3b01      	subs	r3, #1
 8006944:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006946:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	3b01      	subs	r3, #1
 800694e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006950:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	3b01      	subs	r3, #1
 8006958:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800695a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	3b01      	subs	r3, #1
 8006962:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006964:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	3b01      	subs	r3, #1
 800696c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800696e:	4313      	orrs	r3, r2
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	609a      	str	r2, [r3, #8]
 800697c:	e03b      	b.n	80069f6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800698a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800698e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	3b01      	subs	r3, #1
 8006996:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	3b01      	subs	r3, #1
 800699e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80069a0:	4313      	orrs	r3, r2
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80069b4:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	3b01      	subs	r3, #1
 80069c2:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80069c4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80069ce:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80069d8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	3b01      	subs	r3, #1
 80069e0:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80069e2:	4313      	orrs	r3, r2
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	371c      	adds	r7, #28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a04:	b084      	sub	sp, #16
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	f107 001c 	add.w	r0, r7, #28
 8006a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d122      	bne.n	8006a62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d105      	bne.n	8006a56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f902 	bl	8006c60 <USB_CoreReset>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]
 8006a60:	e01a      	b.n	8006a98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f8f6 	bl	8006c60 <USB_CoreReset>
 8006a74:	4603      	mov	r3, r0
 8006a76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d106      	bne.n	8006a8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	639a      	str	r2, [r3, #56]	; 0x38
 8006a8a:	e005      	b.n	8006a98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d10b      	bne.n	8006ab6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f043 0206 	orr.w	r2, r3, #6
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f043 0220 	orr.w	r2, r3, #32
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ac2:	b004      	add	sp, #16
 8006ac4:	4770      	bx	lr

08006ac6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b083      	sub	sp, #12
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f023 0201 	bic.w	r2, r3, #1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d106      	bne.n	8006b14 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	60da      	str	r2, [r3, #12]
 8006b12:	e00b      	b.n	8006b2c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60da      	str	r2, [r3, #12]
 8006b26:	e001      	b.n	8006b2c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e003      	b.n	8006b34 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006b2c:	2032      	movs	r0, #50	; 0x32
 8006b2e:	f7fa ff49 	bl	80019c4 <HAL_Delay>

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	019b      	lsls	r3, r3, #6
 8006b4e:	f043 0220 	orr.w	r2, r3, #32
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4a09      	ldr	r2, [pc, #36]	; (8006b84 <USB_FlushTxFifo+0x48>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d901      	bls.n	8006b68 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e006      	b.n	8006b76 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	f003 0320 	and.w	r3, r3, #32
 8006b70:	2b20      	cmp	r3, #32
 8006b72:	d0f0      	beq.n	8006b56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	00030d40 	.word	0x00030d40

08006b88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2210      	movs	r2, #16
 8006b98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4a09      	ldr	r2, [pc, #36]	; (8006bc8 <USB_FlushRxFifo+0x40>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d901      	bls.n	8006bac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e006      	b.n	8006bba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	f003 0310 	and.w	r3, r3, #16
 8006bb4:	2b10      	cmp	r3, #16
 8006bb6:	d0f0      	beq.n	8006b9a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	00030d40 	.word	0x00030d40

08006bcc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b089      	sub	sp, #36	; 0x24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	3303      	adds	r3, #3
 8006be6:	089b      	lsrs	r3, r3, #2
 8006be8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006bea:	2300      	movs	r3, #0
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	e00b      	b.n	8006c08 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	601a      	str	r2, [r3, #0]
    pDest++;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	3301      	adds	r3, #1
 8006c06:	61bb      	str	r3, [r7, #24]
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d3ef      	bcc.n	8006bf0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006c10:	69fb      	ldr	r3, [r7, #28]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3724      	adds	r7, #36	; 0x24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b085      	sub	sp, #20
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4013      	ands	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c36:	68fb      	ldr	r3, [r7, #12]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	f003 0301 	and.w	r3, r3, #1
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4a13      	ldr	r2, [pc, #76]	; (8006cc4 <USB_CoreReset+0x64>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d901      	bls.n	8006c7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e01b      	b.n	8006cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	daf2      	bge.n	8006c6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	f043 0201 	orr.w	r2, r3, #1
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4a09      	ldr	r2, [pc, #36]	; (8006cc4 <USB_CoreReset+0x64>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d901      	bls.n	8006ca8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e006      	b.n	8006cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d0f0      	beq.n	8006c96 <USB_CoreReset+0x36>

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	00030d40 	.word	0x00030d40

08006cc8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cc8:	b084      	sub	sp, #16
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b084      	sub	sp, #16
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	f107 001c 	add.w	r0, r7, #28
 8006cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d06:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d018      	beq.n	8006d4c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d10a      	bne.n	8006d36 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d2e:	f043 0304 	orr.w	r3, r3, #4
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	e014      	b.n	8006d60 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d44:	f023 0304 	bic.w	r3, r3, #4
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	e009      	b.n	8006d60 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d5a:	f023 0304 	bic.w	r3, r3, #4
 8006d5e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006d60:	2110      	movs	r1, #16
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7ff feea 	bl	8006b3c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff ff0d 	bl	8006b88 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	e015      	b.n	8006da0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d80:	461a      	mov	r2, r3
 8006d82:	f04f 33ff 	mov.w	r3, #4294967295
 8006d86:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d94:	461a      	mov	r2, r3
 8006d96:	2300      	movs	r3, #0
 8006d98:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d3e5      	bcc.n	8006d74 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006da8:	2101      	movs	r1, #1
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f882 	bl	8006eb4 <USB_DriveVbus>

  HAL_Delay(200U);
 8006db0:	20c8      	movs	r0, #200	; 0xc8
 8006db2:	f7fa fe07 	bl	80019c4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00b      	beq.n	8006de8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dd6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a14      	ldr	r2, [pc, #80]	; (8006e2c <USB_HostInit+0x164>)
 8006ddc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a13      	ldr	r2, [pc, #76]	; (8006e30 <USB_HostInit+0x168>)
 8006de2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006de6:	e009      	b.n	8006dfc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2280      	movs	r2, #128	; 0x80
 8006dec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a10      	ldr	r2, [pc, #64]	; (8006e34 <USB_HostInit+0x16c>)
 8006df2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a10      	ldr	r2, [pc, #64]	; (8006e38 <USB_HostInit+0x170>)
 8006df8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d105      	bne.n	8006e0e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	f043 0210 	orr.w	r2, r3, #16
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699a      	ldr	r2, [r3, #24]
 8006e12:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <USB_HostInit+0x174>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e26:	b004      	add	sp, #16
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	01000200 	.word	0x01000200
 8006e30:	00e00300 	.word	0x00e00300
 8006e34:	00600080 	.word	0x00600080
 8006e38:	004000e0 	.word	0x004000e0
 8006e3c:	a3200008 	.word	0xa3200008

08006e40 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	460b      	mov	r3, r1
 8006e4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e5e:	f023 0303 	bic.w	r3, r3, #3
 8006e62:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	78fb      	ldrb	r3, [r7, #3]
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	68f9      	ldr	r1, [r7, #12]
 8006e74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006e7c:	78fb      	ldrb	r3, [r7, #3]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d107      	bne.n	8006e92 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e88:	461a      	mov	r2, r3
 8006e8a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006e8e:	6053      	str	r3, [r2, #4]
 8006e90:	e009      	b.n	8006ea6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d106      	bne.n	8006ea6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f241 7370 	movw	r3, #6000	; 0x1770
 8006ea4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ed8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d109      	bne.n	8006ef8 <USB_DriveVbus+0x44>
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d106      	bne.n	8006ef8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ef2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ef6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f02:	d109      	bne.n	8006f18 <USB_DriveVbus+0x64>
 8006f04:	78fb      	ldrb	r3, [r7, #3]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d106      	bne.n	8006f18 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f16:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b085      	sub	sp, #20
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	b29b      	uxth	r3, r3
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3714      	adds	r7, #20
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b089      	sub	sp, #36	; 0x24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006f58:	78fb      	ldrb	r3, [r7, #3]
 8006f5a:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	0c9b      	lsrs	r3, r3, #18
 8006f70:	f003 0303 	and.w	r3, r3, #3
 8006f74:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	0fdb      	lsrs	r3, r3, #31
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f003 0320 	and.w	r3, r3, #32
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	d104      	bne.n	8006fa2 <USB_HC_Halt+0x5a>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e0e8      	b.n	8007174 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <USB_HC_Halt+0x66>
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d173      	bne.n	8007096 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	0151      	lsls	r1, r2, #5
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	440a      	add	r2, r1
 8006fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fcc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f003 0320 	and.w	r3, r3, #32
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f040 80cb 	bne.w	8007172 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d143      	bne.n	8007070 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	0151      	lsls	r1, r2, #5
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	440a      	add	r2, r1
 8006ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007002:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007006:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	4413      	add	r3, r2
 8007010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	0151      	lsls	r1, r2, #5
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	440a      	add	r2, r1
 800701e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007022:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007026:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	4413      	add	r3, r2
 8007030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	0151      	lsls	r1, r2, #5
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	440a      	add	r2, r1
 800703e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007042:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007046:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	3301      	adds	r3, #1
 800704c:	61fb      	str	r3, [r7, #28]
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007054:	d81d      	bhi.n	8007092 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	015a      	lsls	r2, r3, #5
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	4413      	add	r3, r2
 800705e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800706c:	d0ec      	beq.n	8007048 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800706e:	e080      	b.n	8007172 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	4413      	add	r3, r2
 8007078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	0151      	lsls	r1, r2, #5
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	440a      	add	r2, r1
 8007086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800708a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800708e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007090:	e06f      	b.n	8007172 <USB_HC_Halt+0x22a>
            break;
 8007092:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007094:	e06d      	b.n	8007172 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	4413      	add	r3, r2
 800709e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	0151      	lsls	r1, r2, #5
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	440a      	add	r2, r1
 80070ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070b4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d143      	bne.n	800714e <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	0151      	lsls	r1, r2, #5
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	440a      	add	r2, r1
 80070dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070e4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	0151      	lsls	r1, r2, #5
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	440a      	add	r2, r1
 80070fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007100:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007104:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	4413      	add	r3, r2
 800710e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	0151      	lsls	r1, r2, #5
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	440a      	add	r2, r1
 800711c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007120:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007124:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	3301      	adds	r3, #1
 800712a:	61fb      	str	r3, [r7, #28]
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007132:	d81d      	bhi.n	8007170 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	4413      	add	r3, r2
 800713c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007146:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800714a:	d0ec      	beq.n	8007126 <USB_HC_Halt+0x1de>
 800714c:	e011      	b.n	8007172 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	4413      	add	r3, r2
 8007156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	0151      	lsls	r1, r2, #5
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	440a      	add	r2, r1
 8007164:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007168:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	e000      	b.n	8007172 <USB_HC_Halt+0x22a>
          break;
 8007170:	bf00      	nop
    }
  }

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3724      	adds	r7, #36	; 0x24
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <__libc_init_array>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	4d0d      	ldr	r5, [pc, #52]	; (80071b8 <__libc_init_array+0x38>)
 8007184:	4c0d      	ldr	r4, [pc, #52]	; (80071bc <__libc_init_array+0x3c>)
 8007186:	1b64      	subs	r4, r4, r5
 8007188:	10a4      	asrs	r4, r4, #2
 800718a:	2600      	movs	r6, #0
 800718c:	42a6      	cmp	r6, r4
 800718e:	d109      	bne.n	80071a4 <__libc_init_array+0x24>
 8007190:	4d0b      	ldr	r5, [pc, #44]	; (80071c0 <__libc_init_array+0x40>)
 8007192:	4c0c      	ldr	r4, [pc, #48]	; (80071c4 <__libc_init_array+0x44>)
 8007194:	f000 f820 	bl	80071d8 <_init>
 8007198:	1b64      	subs	r4, r4, r5
 800719a:	10a4      	asrs	r4, r4, #2
 800719c:	2600      	movs	r6, #0
 800719e:	42a6      	cmp	r6, r4
 80071a0:	d105      	bne.n	80071ae <__libc_init_array+0x2e>
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
 80071a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a8:	4798      	blx	r3
 80071aa:	3601      	adds	r6, #1
 80071ac:	e7ee      	b.n	800718c <__libc_init_array+0xc>
 80071ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b2:	4798      	blx	r3
 80071b4:	3601      	adds	r6, #1
 80071b6:	e7f2      	b.n	800719e <__libc_init_array+0x1e>
 80071b8:	08007228 	.word	0x08007228
 80071bc:	08007228 	.word	0x08007228
 80071c0:	08007228 	.word	0x08007228
 80071c4:	0800722c 	.word	0x0800722c

080071c8 <memset>:
 80071c8:	4402      	add	r2, r0
 80071ca:	4603      	mov	r3, r0
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d100      	bne.n	80071d2 <memset+0xa>
 80071d0:	4770      	bx	lr
 80071d2:	f803 1b01 	strb.w	r1, [r3], #1
 80071d6:	e7f9      	b.n	80071cc <memset+0x4>

080071d8 <_init>:
 80071d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071da:	bf00      	nop
 80071dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071de:	bc08      	pop	{r3}
 80071e0:	469e      	mov	lr, r3
 80071e2:	4770      	bx	lr

080071e4 <_fini>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	bf00      	nop
 80071e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ea:	bc08      	pop	{r3}
 80071ec:	469e      	mov	lr, r3
 80071ee:	4770      	bx	lr
